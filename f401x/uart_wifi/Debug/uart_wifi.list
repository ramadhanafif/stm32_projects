
uart_wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d83c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  0800d9dc  0800d9dc  0001d9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddc4  0800ddc4  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ddc4  0800ddc4  0001ddc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ddcc  0800ddcc  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddcc  0800ddcc  0001ddcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ddd0  0800ddd0  0001ddd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800ddd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006a94  2000015c  0800df30  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006bf0  0800df30  00026bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023f22  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005813  00000000  00000000  000440f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dc8  00000000  00000000  00049908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016bc  00000000  00000000  0004b6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008642  00000000  00000000  0004cd8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000274d1  00000000  00000000  000553ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae350  00000000  00000000  0007c89f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008344  00000000  00000000  0012abf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00132f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000015c 	.word	0x2000015c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d9c4 	.word	0x0800d9c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000160 	.word	0x20000160
 80001dc:	0800d9c4 	.word	0x0800d9c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fc48 	bl	8000e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f844 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f972 	bl	8000870 <MX_GPIO_Init>
  MX_ADC1_Init();
 800058c:	f000 f8ae 	bl	80006ec <MX_ADC1_Init>
  MX_CRC_Init();
 8000590:	f000 f900 	bl	8000794 <MX_CRC_Init>
  MX_RTC_Init();
 8000594:	f000 f912 	bl	80007bc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000598:	f008 fb1a 	bl	8008bd0 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of BtnEvent */
  BtnEventHandle = osMessageQueueNew (16, sizeof(uint8_t), &BtnEvent_attributes);
 800059c:	4a11      	ldr	r2, [pc, #68]	; (80005e4 <main+0x68>)
 800059e:	2101      	movs	r1, #1
 80005a0:	2010      	movs	r0, #16
 80005a2:	f008 fc39 	bl	8008e18 <osMessageQueueNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a0f      	ldr	r2, [pc, #60]	; (80005e8 <main+0x6c>)
 80005aa:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ac:	4a0f      	ldr	r2, [pc, #60]	; (80005ec <main+0x70>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	480f      	ldr	r0, [pc, #60]	; (80005f0 <main+0x74>)
 80005b2:	f008 fb57 	bl	8008c64 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a0e      	ldr	r2, [pc, #56]	; (80005f4 <main+0x78>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of ButtonPollTask */
  ButtonPollTaskHandle = osThreadNew(ButtonPoll, NULL, &ButtonPollTask_attributes);
 80005bc:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <main+0x7c>)
 80005be:	2100      	movs	r1, #0
 80005c0:	480e      	ldr	r0, [pc, #56]	; (80005fc <main+0x80>)
 80005c2:	f008 fb4f 	bl	8008c64 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <main+0x84>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of BtnEventHandler */
  BtnEventHandlerHandle = osThreadNew(BtnEventHandler_task, NULL, &BtnEventHandler_attributes);
 80005cc:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <main+0x88>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	480d      	ldr	r0, [pc, #52]	; (8000608 <main+0x8c>)
 80005d2:	f008 fb47 	bl	8008c64 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a0c      	ldr	r2, [pc, #48]	; (800060c <main+0x90>)
 80005da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005dc:	f008 fb1c 	bl	8008c18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80005e0:	e7fe      	b.n	80005e0 <main+0x64>
 80005e2:	bf00      	nop
 80005e4:	0800dd50 	.word	0x0800dd50
 80005e8:	20000744 	.word	0x20000744
 80005ec:	0800dce4 	.word	0x0800dce4
 80005f0:	08000931 	.word	0x08000931
 80005f4:	200001e8 	.word	0x200001e8
 80005f8:	0800dd08 	.word	0x0800dd08
 80005fc:	0800c91d 	.word	0x0800c91d
 8000600:	200001ec 	.word	0x200001ec
 8000604:	0800dd2c 	.word	0x0800dd2c
 8000608:	0800c9d1 	.word	0x0800c9d1
 800060c:	20000498 	.word	0x20000498

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f00c fbe4 	bl	800cdec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <SystemClock_Config+0xd4>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a29      	ldr	r2, [pc, #164]	; (80006e4 <SystemClock_Config+0xd4>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <SystemClock_Config+0xd4>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <SystemClock_Config+0xd8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800065c:	4a22      	ldr	r2, [pc, #136]	; (80006e8 <SystemClock_Config+0xd8>)
 800065e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <SystemClock_Config+0xd8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000670:	2309      	movs	r3, #9
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800067a:	2301      	movs	r3, #1
 800067c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000688:	2319      	movs	r3, #25
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800068c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000692:	2304      	movs	r3, #4
 8000694:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000696:	2307      	movs	r3, #7
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 ff9e 	bl	80035e0 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006aa:	f000 f97f 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2302      	movs	r3, #2
 80006b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2102      	movs	r1, #2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 fab0 	bl	8003c30 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006d6:	f000 f969 	bl	80009ac <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f2:	463b      	mov	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006fe:	4b22      	ldr	r3, [pc, #136]	; (8000788 <MX_ADC1_Init+0x9c>)
 8000700:	4a22      	ldr	r2, [pc, #136]	; (800078c <MX_ADC1_Init+0xa0>)
 8000702:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000704:	4b20      	ldr	r3, [pc, #128]	; (8000788 <MX_ADC1_Init+0x9c>)
 8000706:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800070a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <MX_ADC1_Init+0x9c>)
 800070e:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000712:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_ADC1_Init+0x9c>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800071a:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_ADC1_Init+0x9c>)
 800071c:	2201      	movs	r2, #1
 800071e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <MX_ADC1_Init+0x9c>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <MX_ADC1_Init+0x9c>)
 800072a:	2200      	movs	r2, #0
 800072c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_ADC1_Init+0x9c>)
 8000730:	4a17      	ldr	r2, [pc, #92]	; (8000790 <MX_ADC1_Init+0xa4>)
 8000732:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_ADC1_Init+0x9c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_ADC1_Init+0x9c>)
 800073c:	2201      	movs	r2, #1
 800073e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_ADC1_Init+0x9c>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_ADC1_Init+0x9c>)
 800074a:	2201      	movs	r2, #1
 800074c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074e:	480e      	ldr	r0, [pc, #56]	; (8000788 <MX_ADC1_Init+0x9c>)
 8000750:	f000 fbc6 	bl	8000ee0 <HAL_ADC_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800075a:	f000 f927 	bl	80009ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800075e:	2301      	movs	r3, #1
 8000760:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000762:	2301      	movs	r3, #1
 8000764:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076a:	463b      	mov	r3, r7
 800076c:	4619      	mov	r1, r3
 800076e:	4806      	ldr	r0, [pc, #24]	; (8000788 <MX_ADC1_Init+0x9c>)
 8000770:	f000 fdf6 	bl	8001360 <HAL_ADC_ConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800077a:	f000 f917 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000178 	.word	0x20000178
 800078c:	40012000 	.word	0x40012000
 8000790:	0f000001 	.word	0x0f000001

08000794 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_CRC_Init+0x20>)
 800079a:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <MX_CRC_Init+0x24>)
 800079c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_CRC_Init+0x20>)
 80007a0:	f001 f958 	bl	8001a54 <HAL_CRC_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007aa:	f000 f8ff 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200001c0 	.word	0x200001c0
 80007b8:	40023000 	.word	0x40023000

080007bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007d0:	2300      	movs	r3, #0
 80007d2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007d4:	4b24      	ldr	r3, [pc, #144]	; (8000868 <MX_RTC_Init+0xac>)
 80007d6:	4a25      	ldr	r2, [pc, #148]	; (800086c <MX_RTC_Init+0xb0>)
 80007d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007da:	4b23      	ldr	r3, [pc, #140]	; (8000868 <MX_RTC_Init+0xac>)
 80007dc:	2200      	movs	r2, #0
 80007de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_RTC_Init+0xac>)
 80007e2:	227f      	movs	r2, #127	; 0x7f
 80007e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <MX_RTC_Init+0xac>)
 80007e8:	22ff      	movs	r2, #255	; 0xff
 80007ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_RTC_Init+0xac>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_RTC_Init+0xac>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_RTC_Init+0xac>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007fe:	481a      	ldr	r0, [pc, #104]	; (8000868 <MX_RTC_Init+0xac>)
 8000800:	f003 fec2 	bl	8004588 <HAL_RTC_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800080a:	f000 f8cf 	bl	80009ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800080e:	2300      	movs	r3, #0
 8000810:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000812:	2300      	movs	r3, #0
 8000814:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000816:	2300      	movs	r3, #0
 8000818:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2201      	movs	r2, #1
 8000826:	4619      	mov	r1, r3
 8000828:	480f      	ldr	r0, [pc, #60]	; (8000868 <MX_RTC_Init+0xac>)
 800082a:	f003 ff85 	bl	8004738 <HAL_RTC_SetTime>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000834:	f000 f8ba 	bl	80009ac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000838:	2301      	movs	r3, #1
 800083a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800083c:	2301      	movs	r3, #1
 800083e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000840:	2301      	movs	r3, #1
 8000842:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000844:	2300      	movs	r3, #0
 8000846:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000848:	463b      	mov	r3, r7
 800084a:	2201      	movs	r2, #1
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_RTC_Init+0xac>)
 8000850:	f004 f8ba 	bl	80049c8 <HAL_RTC_SetDate>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800085a:	f000 f8a7 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200001c8 	.word	0x200001c8
 800086c:	40002800 	.word	0x40002800

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b26      	ldr	r3, [pc, #152]	; (8000924 <MX_GPIO_Init+0xb4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a25      	ldr	r2, [pc, #148]	; (8000924 <MX_GPIO_Init+0xb4>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b23      	ldr	r3, [pc, #140]	; (8000924 <MX_GPIO_Init+0xb4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <MX_GPIO_Init+0xb4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a1e      	ldr	r2, [pc, #120]	; (8000924 <MX_GPIO_Init+0xb4>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_GPIO_Init+0xb4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_GPIO_Init+0xb4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a17      	ldr	r2, [pc, #92]	; (8000924 <MX_GPIO_Init+0xb4>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_GPIO_Init+0xb4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e0:	4811      	ldr	r0, [pc, #68]	; (8000928 <MX_GPIO_Init+0xb8>)
 80008e2:	f001 fb9b 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 80008e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	4619      	mov	r1, r3
 80008fe:	480a      	ldr	r0, [pc, #40]	; (8000928 <MX_GPIO_Init+0xb8>)
 8000900:	f001 f8d2 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000904:	2301      	movs	r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800090c:	2301      	movs	r3, #1
 800090e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	4619      	mov	r1, r3
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_GPIO_Init+0xbc>)
 8000918:	f001 f8c6 	bl	8001aa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800091c:	bf00      	nop
 800091e:	3720      	adds	r7, #32
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40020800 	.word	0x40020800
 800092c:	40020000 	.word	0x40020000

08000930 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000938:	f00b f958 	bl	800bbec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  SEGGER_RTT_Init();
 800093c:	f00b ffd8 	bl	800c8f0 <SEGGER_RTT_Init>
	HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000946:	480d      	ldr	r0, [pc, #52]	; (800097c <StartDefaultTask+0x4c>)
 8000948:	f001 fb68 	bl	800201c <HAL_GPIO_WritePin>
	HAL_ADC_Start_IT(&hadc1);
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <StartDefaultTask+0x50>)
 800094e:	f000 fc25 	bl	800119c <HAL_ADC_Start_IT>
	printf("Main start\n");
 8000952:	480c      	ldr	r0, [pc, #48]	; (8000984 <StartDefaultTask+0x54>)
 8000954:	f00c f96a 	bl	800cc2c <puts>
	/* Infinite loop */
	for (;;) {
		for (int x = 0; x < 4; x++) {
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	e00a      	b.n	8000974 <StartDefaultTask+0x44>
			HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 800095e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000962:	4806      	ldr	r0, [pc, #24]	; (800097c <StartDefaultTask+0x4c>)
 8000964:	f001 fb8c 	bl	8002080 <HAL_GPIO_TogglePin>
			osDelay(250);
 8000968:	20fa      	movs	r0, #250	; 0xfa
 800096a:	f008 fa0d 	bl	8008d88 <osDelay>
		for (int x = 0; x < 4; x++) {
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	3301      	adds	r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2b03      	cmp	r3, #3
 8000978:	ddf1      	ble.n	800095e <StartDefaultTask+0x2e>
 800097a:	e7ed      	b.n	8000958 <StartDefaultTask+0x28>
 800097c:	40020800 	.word	0x40020800
 8000980:	20000178 	.word	0x20000178
 8000984:	0800da30 	.word	0x0800da30

08000988 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d101      	bne.n	800099e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800099a:	f000 fa5d 	bl	8000e58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40010000 	.word	0x40010000

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	printf("ASSERT: file %s on line %lu\r\n", file, line);
 80009c2:	683a      	ldr	r2, [r7, #0]
 80009c4:	6879      	ldr	r1, [r7, #4]
 80009c6:	4803      	ldr	r0, [pc, #12]	; (80009d4 <assert_failed+0x1c>)
 80009c8:	f00c f8ca 	bl	800cb60 <iprintf>

  /* USER CODE END 6 */
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	0800da3c 	.word	0x0800da3c

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_MspInit+0x54>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a11      	ldr	r2, [pc, #68]	; (8000a2c <HAL_MspInit+0x54>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_MspInit+0x54>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <HAL_MspInit+0x54>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <HAL_MspInit+0x54>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_MspInit+0x54>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	210f      	movs	r1, #15
 8000a1a:	f06f 0001 	mvn.w	r0, #1
 8000a1e:	f000 ffd5 	bl	80019cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a17      	ldr	r2, [pc, #92]	; (8000aac <HAL_ADC_MspInit+0x7c>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d127      	bne.n	8000aa2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <HAL_ADC_MspInit+0x80>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	4a15      	ldr	r2, [pc, #84]	; (8000ab0 <HAL_ADC_MspInit+0x80>)
 8000a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a60:	6453      	str	r3, [r2, #68]	; 0x44
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <HAL_ADC_MspInit+0x80>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <HAL_ADC_MspInit+0x80>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_ADC_MspInit+0x80>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_ADC_MspInit+0x80>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <HAL_ADC_MspInit+0x84>)
 8000a9e:	f001 f803 	bl	8001aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aa2:	bf00      	nop
 8000aa4:	3728      	adds	r7, #40	; 0x28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40012000 	.word	0x40012000
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <HAL_CRC_MspInit+0x3c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d10d      	bne.n	8000ae6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_CRC_MspInit+0x40>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a09      	ldr	r2, [pc, #36]	; (8000af8 <HAL_CRC_MspInit+0x40>)
 8000ad4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <HAL_CRC_MspInit+0x40>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ae6:	bf00      	nop
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40023000 	.word	0x40023000
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0c      	ldr	r2, [pc, #48]	; (8000b4c <HAL_RTC_MspInit+0x50>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d111      	bne.n	8000b42 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b26:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f003 fb25 	bl	800417c <HAL_RCCEx_PeriphCLKConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000b38:	f7ff ff38 	bl	80009ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <HAL_RTC_MspInit+0x54>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b42:	bf00      	nop
 8000b44:	3720      	adds	r7, #32
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40002800 	.word	0x40002800
 8000b50:	42470e3c 	.word	0x42470e3c

08000b54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	; 0x30
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <HAL_InitTick+0xd0>)
 8000b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6c:	4a2d      	ldr	r2, [pc, #180]	; (8000c24 <HAL_InitTick+0xd0>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6453      	str	r3, [r2, #68]	; 0x44
 8000b74:	4b2b      	ldr	r3, [pc, #172]	; (8000c24 <HAL_InitTick+0xd0>)
 8000b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b80:	f107 020c 	add.w	r2, r7, #12
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f003 fac4 	bl	8004118 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b90:	f003 faae 	bl	80040f0 <HAL_RCC_GetPCLK2Freq>
 8000b94:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b98:	4a23      	ldr	r2, [pc, #140]	; (8000c28 <HAL_InitTick+0xd4>)
 8000b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9e:	0c9b      	lsrs	r3, r3, #18
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ba4:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <HAL_InitTick+0xd8>)
 8000ba6:	4a22      	ldr	r2, [pc, #136]	; (8000c30 <HAL_InitTick+0xdc>)
 8000ba8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000baa:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <HAL_InitTick+0xd8>)
 8000bac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bb2:	4a1e      	ldr	r2, [pc, #120]	; (8000c2c <HAL_InitTick+0xd8>)
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <HAL_InitTick+0xd8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <HAL_InitTick+0xd8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_InitTick+0xd8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000bca:	4818      	ldr	r0, [pc, #96]	; (8000c2c <HAL_InitTick+0xd8>)
 8000bcc:	f004 f8c6 	bl	8004d5c <HAL_TIM_Base_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000bd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d11b      	bne.n	8000c16 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000bde:	4813      	ldr	r0, [pc, #76]	; (8000c2c <HAL_InitTick+0xd8>)
 8000be0:	f004 f98c 	bl	8004efc <HAL_TIM_Base_Start_IT>
 8000be4:	4603      	mov	r3, r0
 8000be6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000bea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d111      	bne.n	8000c16 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bf2:	2019      	movs	r0, #25
 8000bf4:	f000 ff16 	bl	8001a24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b0f      	cmp	r3, #15
 8000bfc:	d808      	bhi.n	8000c10 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	6879      	ldr	r1, [r7, #4]
 8000c02:	2019      	movs	r0, #25
 8000c04:	f000 fee2 	bl	80019cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_InitTick+0xe0>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	e002      	b.n	8000c16 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3730      	adds	r7, #48	; 0x30
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800
 8000c28:	431bde83 	.word	0x431bde83
 8000c2c:	200007a8 	.word	0x200007a8
 8000c30:	40010000 	.word	0x40010000
 8000c34:	20000004 	.word	0x20000004

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <NMI_Handler+0x4>

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c6a:	f004 f9d9 	bl	8005020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200007a8 	.word	0x200007a8

08000c78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <OTG_FS_IRQHandler+0x10>)
 8000c7e:	f001 fb82 	bl	8002386 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20005ec0 	.word	0x20005ec0

08000c8c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	e00a      	b.n	8000cb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c9e:	f3af 8000 	nop.w
 8000ca2:	4601      	mov	r1, r0
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	60ba      	str	r2, [r7, #8]
 8000caa:	b2ca      	uxtb	r2, r1
 8000cac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbf0      	blt.n	8000c9e <_read+0x12>
  }

  return len;
 8000cbc:	687b      	ldr	r3, [r7, #4]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cee:	605a      	str	r2, [r3, #4]
  return 0;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <_isatty>:

int _isatty(int file)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d60:	f00c f8e8 	bl	800cf34 <__errno>
 8000d64:	4603      	mov	r3, r0
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <_sbrk+0x64>)
 8000d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20010000 	.word	0x20010000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	200007f0 	.word	0x200007f0
 8000d98:	20006bf0 	.word	0x20006bf0

08000d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dc6:	490e      	ldr	r1, [pc, #56]	; (8000e00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ddc:	4c0b      	ldr	r4, [pc, #44]	; (8000e0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dea:	f7ff ffd7 	bl	8000d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dee:	f00c f8a7 	bl	800cf40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df2:	f7ff fbc3 	bl	800057c <main>
  bx  lr    
 8000df6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000e04:	0800ddd4 	.word	0x0800ddd4
  ldr r2, =_sbss
 8000e08:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000e0c:	20006bf0 	.word	0x20006bf0

08000e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC_IRQHandler>
	...

08000e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <HAL_Init+0x40>)
 8000e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <HAL_Init+0x40>)
 8000e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_Init+0x40>)
 8000e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 fda5 	bl	800198c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e42:	200f      	movs	r0, #15
 8000e44:	f7ff fe86 	bl	8000b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f7ff fdc6 	bl	80009d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023c00 	.word	0x40023c00

08000e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x20>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x24>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_IncTick+0x24>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	200007f4 	.word	0x200007f4

08000e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <HAL_GetTick+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	200007f4 	.word	0x200007f4

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff ffee 	bl	8000e80 <HAL_GetTick>
 8000ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d005      	beq.n	8000ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_Delay+0x44>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ebe:	bf00      	nop
 8000ec0:	f7ff ffde 	bl	8000e80 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f7      	bhi.n	8000ec0 <HAL_Delay+0x28>
  {
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008

08000ee0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e14e      	b.n	8001194 <HAL_ADC_Init+0x2b4>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a90      	ldr	r2, [pc, #576]	; (800113c <HAL_ADC_Init+0x25c>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d004      	beq.n	8000f0a <HAL_ADC_Init+0x2a>
 8000f00:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8000f04:	488e      	ldr	r0, [pc, #568]	; (8001140 <HAL_ADC_Init+0x260>)
 8000f06:	f7ff fd57 	bl	80009b8 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d013      	beq.n	8000f3a <HAL_ADC_Init+0x5a>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f1a:	d00e      	beq.n	8000f3a <HAL_ADC_Init+0x5a>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000f24:	d009      	beq.n	8000f3a <HAL_ADC_Init+0x5a>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000f2e:	d004      	beq.n	8000f3a <HAL_ADC_Init+0x5a>
 8000f30:	f240 1143 	movw	r1, #323	; 0x143
 8000f34:	4882      	ldr	r0, [pc, #520]	; (8001140 <HAL_ADC_Init+0x260>)
 8000f36:	f7ff fd3f 	bl	80009b8 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d013      	beq.n	8000f6a <HAL_ADC_Init+0x8a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f4a:	d00e      	beq.n	8000f6a <HAL_ADC_Init+0x8a>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000f54:	d009      	beq.n	8000f6a <HAL_ADC_Init+0x8a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8000f5e:	d004      	beq.n	8000f6a <HAL_ADC_Init+0x8a>
 8000f60:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8000f64:	4876      	ldr	r0, [pc, #472]	; (8001140 <HAL_ADC_Init+0x260>)
 8000f66:	f7ff fd27 	bl	80009b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d008      	beq.n	8000f84 <HAL_ADC_Init+0xa4>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d004      	beq.n	8000f84 <HAL_ADC_Init+0xa4>
 8000f7a:	f240 1145 	movw	r1, #325	; 0x145
 8000f7e:	4870      	ldr	r0, [pc, #448]	; (8001140 <HAL_ADC_Init+0x260>)
 8000f80:	f7ff fd1a 	bl	80009b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	7e1b      	ldrb	r3, [r3, #24]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d008      	beq.n	8000f9e <HAL_ADC_Init+0xbe>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7e1b      	ldrb	r3, [r3, #24]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d004      	beq.n	8000f9e <HAL_ADC_Init+0xbe>
 8000f94:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8000f98:	4869      	ldr	r0, [pc, #420]	; (8001140 <HAL_ADC_Init+0x260>)
 8000f9a:	f7ff fd0d 	bl	80009b8 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d054      	beq.n	8001050 <HAL_ADC_Init+0x170>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000faa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fae:	d04f      	beq.n	8001050 <HAL_ADC_Init+0x170>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000fb8:	d04a      	beq.n	8001050 <HAL_ADC_Init+0x170>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8000fc2:	d045      	beq.n	8001050 <HAL_ADC_Init+0x170>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000fcc:	d040      	beq.n	8001050 <HAL_ADC_Init+0x170>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8000fd6:	d03b      	beq.n	8001050 <HAL_ADC_Init+0x170>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fdc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8000fe0:	d036      	beq.n	8001050 <HAL_ADC_Init+0x170>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe6:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8000fea:	d031      	beq.n	8001050 <HAL_ADC_Init+0x170>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000ff4:	d02c      	beq.n	8001050 <HAL_ADC_Init+0x170>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffa:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8000ffe:	d027      	beq.n	8001050 <HAL_ADC_Init+0x170>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001004:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001008:	d022      	beq.n	8001050 <HAL_ADC_Init+0x170>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100e:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8001012:	d01d      	beq.n	8001050 <HAL_ADC_Init+0x170>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800101c:	d018      	beq.n	8001050 <HAL_ADC_Init+0x170>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001022:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8001026:	d013      	beq.n	8001050 <HAL_ADC_Init+0x170>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001030:	d00e      	beq.n	8001050 <HAL_ADC_Init+0x170>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800103a:	d009      	beq.n	8001050 <HAL_ADC_Init+0x170>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001040:	4a40      	ldr	r2, [pc, #256]	; (8001144 <HAL_ADC_Init+0x264>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d004      	beq.n	8001050 <HAL_ADC_Init+0x170>
 8001046:	f240 1147 	movw	r1, #327	; 0x147
 800104a:	483d      	ldr	r0, [pc, #244]	; (8001140 <HAL_ADC_Init+0x260>)
 800104c:	f7ff fcb4 	bl	80009b8 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d009      	beq.n	800106c <HAL_ADC_Init+0x18c>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001060:	d004      	beq.n	800106c <HAL_ADC_Init+0x18c>
 8001062:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001066:	4836      	ldr	r0, [pc, #216]	; (8001140 <HAL_ADC_Init+0x260>)
 8001068:	f7ff fca6 	bl	80009b8 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_ADC_Init+0x19c>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	2b10      	cmp	r3, #16
 800107a:	d904      	bls.n	8001086 <HAL_ADC_Init+0x1a6>
 800107c:	f240 1149 	movw	r1, #329	; 0x149
 8001080:	482f      	ldr	r0, [pc, #188]	; (8001140 <HAL_ADC_Init+0x260>)
 8001082:	f7ff fc99 	bl	80009b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800108c:	2b00      	cmp	r3, #0
 800108e:	d009      	beq.n	80010a4 <HAL_ADC_Init+0x1c4>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001096:	2b01      	cmp	r3, #1
 8001098:	d004      	beq.n	80010a4 <HAL_ADC_Init+0x1c4>
 800109a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800109e:	4828      	ldr	r0, [pc, #160]	; (8001140 <HAL_ADC_Init+0x260>)
 80010a0:	f7ff fc8a 	bl	80009b8 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d00c      	beq.n	80010c6 <HAL_ADC_Init+0x1e6>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d008      	beq.n	80010c6 <HAL_ADC_Init+0x1e6>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d004      	beq.n	80010c6 <HAL_ADC_Init+0x1e6>
 80010bc:	f240 114b 	movw	r1, #331	; 0x14b
 80010c0:	481f      	ldr	r0, [pc, #124]	; (8001140 <HAL_ADC_Init+0x260>)
 80010c2:	f7ff fc79 	bl	80009b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d009      	beq.n	80010e4 <HAL_ADC_Init+0x204>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d004      	beq.n	80010e4 <HAL_ADC_Init+0x204>
 80010da:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80010de:	4818      	ldr	r0, [pc, #96]	; (8001140 <HAL_ADC_Init+0x260>)
 80010e0:	f7ff fc6a 	bl	80009b8 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e8:	4a16      	ldr	r2, [pc, #88]	; (8001144 <HAL_ADC_Init+0x264>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d017      	beq.n	800111e <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d013      	beq.n	800111e <HAL_ADC_Init+0x23e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010fe:	d00e      	beq.n	800111e <HAL_ADC_Init+0x23e>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001108:	d009      	beq.n	800111e <HAL_ADC_Init+0x23e>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001112:	d004      	beq.n	800111e <HAL_ADC_Init+0x23e>
 8001114:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <HAL_ADC_Init+0x260>)
 800111a:	f7ff fc4d 	bl	80009b8 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	2b00      	cmp	r3, #0
 8001124:	d110      	bne.n	8001148 <HAL_ADC_Init+0x268>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff fc82 	bl	8000a30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800113a:	e005      	b.n	8001148 <HAL_ADC_Init+0x268>
 800113c:	40012000 	.word	0x40012000
 8001140:	0800da5c 	.word	0x0800da5c
 8001144:	0f000001 	.word	0x0f000001
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	f003 0310 	and.w	r3, r3, #16
 8001150:	2b00      	cmp	r3, #0
 8001152:	d118      	bne.n	8001186 <HAL_ADC_Init+0x2a6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800115c:	f023 0302 	bic.w	r3, r3, #2
 8001160:	f043 0202 	orr.w	r2, r3, #2
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 fa57 	bl	800161c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	f023 0303 	bic.w	r3, r3, #3
 800117c:	f043 0201 	orr.w	r2, r3, #1
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	641a      	str	r2, [r3, #64]	; 0x40
 8001184:	e001      	b.n	800118a <HAL_ADC_Init+0x2aa>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7e1b      	ldrb	r3, [r3, #24]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d008      	beq.n	80011c2 <HAL_ADC_Start_IT+0x26>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	7e1b      	ldrb	r3, [r3, #24]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d004      	beq.n	80011c2 <HAL_ADC_Start_IT+0x26>
 80011b8:	f240 4113 	movw	r1, #1043	; 0x413
 80011bc:	4863      	ldr	r0, [pc, #396]	; (800134c <HAL_ADC_Start_IT+0x1b0>)
 80011be:	f7ff fbfb 	bl	80009b8 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d013      	beq.n	80011f2 <HAL_ADC_Start_IT+0x56>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011d2:	d00e      	beq.n	80011f2 <HAL_ADC_Start_IT+0x56>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011dc:	d009      	beq.n	80011f2 <HAL_ADC_Start_IT+0x56>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80011e6:	d004      	beq.n	80011f2 <HAL_ADC_Start_IT+0x56>
 80011e8:	f240 4114 	movw	r1, #1044	; 0x414
 80011ec:	4857      	ldr	r0, [pc, #348]	; (800134c <HAL_ADC_Start_IT+0x1b0>)
 80011ee:	f7ff fbe3 	bl	80009b8 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d101      	bne.n	8001200 <HAL_ADC_Start_IT+0x64>
 80011fc:	2302      	movs	r3, #2
 80011fe:	e0a1      	b.n	8001344 <HAL_ADC_Start_IT+0x1a8>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b01      	cmp	r3, #1
 8001214:	d018      	beq.n	8001248 <HAL_ADC_Start_IT+0xac>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 0201 	orr.w	r2, r2, #1
 8001224:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001226:	4b4a      	ldr	r3, [pc, #296]	; (8001350 <HAL_ADC_Start_IT+0x1b4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a4a      	ldr	r2, [pc, #296]	; (8001354 <HAL_ADC_Start_IT+0x1b8>)
 800122c:	fba2 2303 	umull	r2, r3, r2, r3
 8001230:	0c9a      	lsrs	r2, r3, #18
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800123a:	e002      	b.n	8001242 <HAL_ADC_Start_IT+0xa6>
    {
      counter--;
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	3b01      	subs	r3, #1
 8001240:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1f9      	bne.n	800123c <HAL_ADC_Start_IT+0xa0>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b01      	cmp	r3, #1
 8001254:	d169      	bne.n	800132a <HAL_ADC_Start_IT+0x18e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800125e:	f023 0301 	bic.w	r3, r3, #1
 8001262:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001274:	2b00      	cmp	r3, #0
 8001276:	d007      	beq.n	8001288 <HAL_ADC_Start_IT+0xec>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001280:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001294:	d106      	bne.n	80012a4 <HAL_ADC_Start_IT+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f023 0206 	bic.w	r2, r3, #6
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	645a      	str	r2, [r3, #68]	; 0x44
 80012a2:	e002      	b.n	80012aa <HAL_ADC_Start_IT+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012b2:	4b29      	ldr	r3, [pc, #164]	; (8001358 <HAL_ADC_Start_IT+0x1bc>)
 80012b4:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012be:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012ce:	f043 0320 	orr.w	r3, r3, #32
 80012d2:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 031f 	and.w	r3, r3, #31
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d10f      	bne.n	8001300 <HAL_ADC_Start_IT+0x164>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d129      	bne.n	8001342 <HAL_ADC_Start_IT+0x1a6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	e020      	b.n	8001342 <HAL_ADC_Start_IT+0x1a6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a15      	ldr	r2, [pc, #84]	; (800135c <HAL_ADC_Start_IT+0x1c0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d11b      	bne.n	8001342 <HAL_ADC_Start_IT+0x1a6>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d114      	bne.n	8001342 <HAL_ADC_Start_IT+0x1a6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	e00b      	b.n	8001342 <HAL_ADC_Start_IT+0x1a6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f043 0210 	orr.w	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f043 0201 	orr.w	r2, r3, #1
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	0800da5c 	.word	0x0800da5c
 8001350:	20000000 	.word	0x20000000
 8001354:	431bde83 	.word	0x431bde83
 8001358:	40012300 	.word	0x40012300
 800135c:	40012000 	.word	0x40012000

08001360 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b12      	cmp	r3, #18
 8001374:	d904      	bls.n	8001380 <HAL_ADC_ConfigChannel+0x20>
 8001376:	f240 618b 	movw	r1, #1675	; 0x68b
 800137a:	486f      	ldr	r0, [pc, #444]	; (8001538 <HAL_ADC_ConfigChannel+0x1d8>)
 800137c:	f7ff fb1c 	bl	80009b8 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_ADC_ConfigChannel+0x30>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b10      	cmp	r3, #16
 800138e:	d904      	bls.n	800139a <HAL_ADC_ConfigChannel+0x3a>
 8001390:	f240 618c 	movw	r1, #1676	; 0x68c
 8001394:	4868      	ldr	r0, [pc, #416]	; (8001538 <HAL_ADC_ConfigChannel+0x1d8>)
 8001396:	f7ff fb0f 	bl	80009b8 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d020      	beq.n	80013e4 <HAL_ADC_ConfigChannel+0x84>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d01c      	beq.n	80013e4 <HAL_ADC_ConfigChannel+0x84>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d018      	beq.n	80013e4 <HAL_ADC_ConfigChannel+0x84>
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d014      	beq.n	80013e4 <HAL_ADC_ConfigChannel+0x84>
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d010      	beq.n	80013e4 <HAL_ADC_ConfigChannel+0x84>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b05      	cmp	r3, #5
 80013c8:	d00c      	beq.n	80013e4 <HAL_ADC_ConfigChannel+0x84>
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b06      	cmp	r3, #6
 80013d0:	d008      	beq.n	80013e4 <HAL_ADC_ConfigChannel+0x84>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b07      	cmp	r3, #7
 80013d8:	d004      	beq.n	80013e4 <HAL_ADC_ConfigChannel+0x84>
 80013da:	f240 618d 	movw	r1, #1677	; 0x68d
 80013de:	4856      	ldr	r0, [pc, #344]	; (8001538 <HAL_ADC_ConfigChannel+0x1d8>)
 80013e0:	f7ff faea 	bl	80009b8 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d101      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0x92>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e107      	b.n	8001602 <HAL_ADC_ConfigChannel+0x2a2>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b09      	cmp	r3, #9
 8001400:	d925      	bls.n	800144e <HAL_ADC_ConfigChannel+0xee>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68d9      	ldr	r1, [r3, #12]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	b29b      	uxth	r3, r3
 800140e:	461a      	mov	r2, r3
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	3b1e      	subs	r3, #30
 8001418:	2207      	movs	r2, #7
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	400a      	ands	r2, r1
 8001426:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68d9      	ldr	r1, [r3, #12]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	4618      	mov	r0, r3
 800143a:	4603      	mov	r3, r0
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4403      	add	r3, r0
 8001440:	3b1e      	subs	r3, #30
 8001442:	409a      	lsls	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	e022      	b.n	8001494 <HAL_ADC_ConfigChannel+0x134>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6919      	ldr	r1, [r3, #16]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	b29b      	uxth	r3, r3
 800145a:	461a      	mov	r2, r3
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	2207      	movs	r2, #7
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43da      	mvns	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	400a      	ands	r2, r1
 8001470:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6919      	ldr	r1, [r3, #16]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	b29b      	uxth	r3, r3
 8001482:	4618      	mov	r0, r3
 8001484:	4603      	mov	r3, r0
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4403      	add	r3, r0
 800148a:	409a      	lsls	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b06      	cmp	r3, #6
 800149a:	d824      	bhi.n	80014e6 <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	3b05      	subs	r3, #5
 80014ae:	221f      	movs	r2, #31
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43da      	mvns	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	400a      	ands	r2, r1
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	3b05      	subs	r3, #5
 80014d8:	fa00 f203 	lsl.w	r2, r0, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	635a      	str	r2, [r3, #52]	; 0x34
 80014e4:	e04e      	b.n	8001584 <HAL_ADC_ConfigChannel+0x224>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b0c      	cmp	r3, #12
 80014ec:	d826      	bhi.n	800153c <HAL_ADC_ConfigChannel+0x1dc>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	3b23      	subs	r3, #35	; 0x23
 8001500:	221f      	movs	r2, #31
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	400a      	ands	r2, r1
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	b29b      	uxth	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	3b23      	subs	r3, #35	; 0x23
 800152a:	fa00 f203 	lsl.w	r2, r0, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	631a      	str	r2, [r3, #48]	; 0x30
 8001536:	e025      	b.n	8001584 <HAL_ADC_ConfigChannel+0x224>
 8001538:	0800da5c 	.word	0x0800da5c
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	3b41      	subs	r3, #65	; 0x41
 800154e:	221f      	movs	r2, #31
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43da      	mvns	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	400a      	ands	r2, r1
 800155c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	b29b      	uxth	r3, r3
 800156a:	4618      	mov	r0, r3
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	3b41      	subs	r3, #65	; 0x41
 8001578:	fa00 f203 	lsl.w	r2, r0, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <HAL_ADC_ConfigChannel+0x2ac>)
 8001586:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a20      	ldr	r2, [pc, #128]	; (8001610 <HAL_ADC_ConfigChannel+0x2b0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d109      	bne.n	80015a6 <HAL_ADC_ConfigChannel+0x246>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b12      	cmp	r3, #18
 8001598:	d105      	bne.n	80015a6 <HAL_ADC_ConfigChannel+0x246>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a19      	ldr	r2, [pc, #100]	; (8001610 <HAL_ADC_ConfigChannel+0x2b0>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d123      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x298>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b10      	cmp	r3, #16
 80015b6:	d003      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0x260>
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b11      	cmp	r3, #17
 80015be:	d11b      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x298>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b10      	cmp	r3, #16
 80015d2:	d111      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x298>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <HAL_ADC_ConfigChannel+0x2b4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <HAL_ADC_ConfigChannel+0x2b8>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	0c9a      	lsrs	r2, r3, #18
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015ea:	e002      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x292>
      {
        counter--;
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f9      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x28c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40012300 	.word	0x40012300
 8001610:	40012000 	.word	0x40012000
 8001614:	20000000 	.word	0x20000000
 8001618:	431bde83 	.word	0x431bde83

0800161c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001624:	4b7f      	ldr	r3, [pc, #508]	; (8001824 <ADC_Init+0x208>)
 8001626:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	431a      	orrs	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001650:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6859      	ldr	r1, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	021a      	lsls	r2, r3, #8
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001674:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6859      	ldr	r1, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6899      	ldr	r1, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ae:	4a5e      	ldr	r2, [pc, #376]	; (8001828 <ADC_Init+0x20c>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d022      	beq.n	80016fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6899      	ldr	r1, [r3, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6899      	ldr	r1, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	e00f      	b.n	800171a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001708:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001718:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0202 	bic.w	r2, r2, #2
 8001728:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6899      	ldr	r1, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	7e1b      	ldrb	r3, [r3, #24]
 8001734:	005a      	lsls	r2, r3, #1
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d028      	beq.n	800179a <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <ADC_Init+0x13c>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	2b08      	cmp	r3, #8
 8001756:	d904      	bls.n	8001762 <ADC_Init+0x146>
 8001758:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 800175c:	4833      	ldr	r0, [pc, #204]	; (800182c <ADC_Init+0x210>)
 800175e:	f7ff f92b 	bl	80009b8 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001770:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001780:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6859      	ldr	r1, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	3b01      	subs	r3, #1
 800178e:	035a      	lsls	r2, r3, #13
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	e007      	b.n	80017aa <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017a8:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	051a      	lsls	r2, r3, #20
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6899      	ldr	r1, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017ec:	025a      	lsls	r2, r3, #9
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001804:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6899      	ldr	r1, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	029a      	lsls	r2, r3, #10
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	609a      	str	r2, [r3, #8]
}
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40012300 	.word	0x40012300
 8001828:	0f000001 	.word	0x0f000001
 800182c:	0800da5c 	.word	0x0800da5c

08001830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800184c:	4013      	ands	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800185c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001862:	4a04      	ldr	r2, [pc, #16]	; (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	60d3      	str	r3, [r2, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <__NVIC_GetPriorityGrouping+0x18>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	f003 0307 	and.w	r3, r3, #7
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	db0b      	blt.n	80018be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	f003 021f 	and.w	r2, r3, #31
 80018ac:	4907      	ldr	r1, [pc, #28]	; (80018cc <__NVIC_EnableIRQ+0x38>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	2001      	movs	r0, #1
 80018b6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000e100 	.word	0xe000e100

080018d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db0a      	blt.n	80018fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	490c      	ldr	r1, [pc, #48]	; (800191c <__NVIC_SetPriority+0x4c>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	440b      	add	r3, r1
 80018f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f8:	e00a      	b.n	8001910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4908      	ldr	r1, [pc, #32]	; (8001920 <__NVIC_SetPriority+0x50>)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3b04      	subs	r3, #4
 8001908:	0112      	lsls	r2, r2, #4
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	440b      	add	r3, r1
 800190e:	761a      	strb	r2, [r3, #24]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f1c3 0307 	rsb	r3, r3, #7
 800193e:	2b04      	cmp	r3, #4
 8001940:	bf28      	it	cs
 8001942:	2304      	movcs	r3, #4
 8001944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3304      	adds	r3, #4
 800194a:	2b06      	cmp	r3, #6
 800194c:	d902      	bls.n	8001954 <NVIC_EncodePriority+0x30>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3b03      	subs	r3, #3
 8001952:	e000      	b.n	8001956 <NVIC_EncodePriority+0x32>
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	f04f 32ff 	mov.w	r2, #4294967295
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800196c:	f04f 31ff 	mov.w	r1, #4294967295
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43d9      	mvns	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	4313      	orrs	r3, r2
         );
}
 800197e:	4618      	mov	r0, r3
 8001980:	3724      	adds	r7, #36	; 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b07      	cmp	r3, #7
 8001998:	d00f      	beq.n	80019ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b06      	cmp	r3, #6
 800199e:	d00c      	beq.n	80019ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b05      	cmp	r3, #5
 80019a4:	d009      	beq.n	80019ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d006      	beq.n	80019ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d003      	beq.n	80019ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80019b2:	2190      	movs	r1, #144	; 0x90
 80019b4:	4804      	ldr	r0, [pc, #16]	; (80019c8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80019b6:	f7fe ffff 	bl	80009b8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ff38 	bl	8001830 <__NVIC_SetPriorityGrouping>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	0800da94 	.word	0x0800da94

080019cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d903      	bls.n	80019ec <HAL_NVIC_SetPriority+0x20>
 80019e4:	21a8      	movs	r1, #168	; 0xa8
 80019e6:	480e      	ldr	r0, [pc, #56]	; (8001a20 <HAL_NVIC_SetPriority+0x54>)
 80019e8:	f7fe ffe6 	bl	80009b8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b0f      	cmp	r3, #15
 80019f0:	d903      	bls.n	80019fa <HAL_NVIC_SetPriority+0x2e>
 80019f2:	21a9      	movs	r1, #169	; 0xa9
 80019f4:	480a      	ldr	r0, [pc, #40]	; (8001a20 <HAL_NVIC_SetPriority+0x54>)
 80019f6:	f7fe ffdf 	bl	80009b8 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019fa:	f7ff ff3d 	bl	8001878 <__NVIC_GetPriorityGrouping>
 80019fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	6978      	ldr	r0, [r7, #20]
 8001a06:	f7ff ff8d 	bl	8001924 <NVIC_EncodePriority>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a10:	4611      	mov	r1, r2
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ff5c 	bl	80018d0 <__NVIC_SetPriority>
}
 8001a18:	bf00      	nop
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	0800da94 	.word	0x0800da94

08001a24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	da03      	bge.n	8001a3e <HAL_NVIC_EnableIRQ+0x1a>
 8001a36:	21bc      	movs	r1, #188	; 0xbc
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <HAL_NVIC_EnableIRQ+0x2c>)
 8001a3a:	f7fe ffbd 	bl	80009b8 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ff26 	bl	8001894 <__NVIC_EnableIRQ>
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	0800da94 	.word	0x0800da94

08001a54 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e017      	b.n	8001a96 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a0d      	ldr	r2, [pc, #52]	; (8001aa0 <HAL_CRC_Init+0x4c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d003      	beq.n	8001a78 <HAL_CRC_Init+0x24>
 8001a70:	2168      	movs	r1, #104	; 0x68
 8001a72:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <HAL_CRC_Init+0x50>)
 8001a74:	f7fe ffa0 	bl	80009b8 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	795b      	ldrb	r3, [r3, #5]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d105      	bne.n	8001a8e <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff f815 	bl	8000ab8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023000 	.word	0x40023000
 8001aa4:	0800dad0 	.word	0x0800dad0

08001aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a33      	ldr	r2, [pc, #204]	; (8001b90 <HAL_GPIO_Init+0xe8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d017      	beq.n	8001af6 <HAL_GPIO_Init+0x4e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a32      	ldr	r2, [pc, #200]	; (8001b94 <HAL_GPIO_Init+0xec>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d013      	beq.n	8001af6 <HAL_GPIO_Init+0x4e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a31      	ldr	r2, [pc, #196]	; (8001b98 <HAL_GPIO_Init+0xf0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d00f      	beq.n	8001af6 <HAL_GPIO_Init+0x4e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a30      	ldr	r2, [pc, #192]	; (8001b9c <HAL_GPIO_Init+0xf4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00b      	beq.n	8001af6 <HAL_GPIO_Init+0x4e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a2f      	ldr	r2, [pc, #188]	; (8001ba0 <HAL_GPIO_Init+0xf8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d007      	beq.n	8001af6 <HAL_GPIO_Init+0x4e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a2e      	ldr	r2, [pc, #184]	; (8001ba4 <HAL_GPIO_Init+0xfc>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x4e>
 8001aee:	21ac      	movs	r1, #172	; 0xac
 8001af0:	482d      	ldr	r0, [pc, #180]	; (8001ba8 <HAL_GPIO_Init+0x100>)
 8001af2:	f7fe ff61 	bl	80009b8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_GPIO_Init+0x64>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	0c1b      	lsrs	r3, r3, #16
 8001b06:	041b      	lsls	r3, r3, #16
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x6c>
 8001b0c:	21ad      	movs	r1, #173	; 0xad
 8001b0e:	4826      	ldr	r0, [pc, #152]	; (8001ba8 <HAL_GPIO_Init+0x100>)
 8001b10:	f7fe ff52 	bl	80009b8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d035      	beq.n	8001b88 <HAL_GPIO_Init+0xe0>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d031      	beq.n	8001b88 <HAL_GPIO_Init+0xe0>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b11      	cmp	r3, #17
 8001b2a:	d02d      	beq.n	8001b88 <HAL_GPIO_Init+0xe0>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d029      	beq.n	8001b88 <HAL_GPIO_Init+0xe0>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b12      	cmp	r3, #18
 8001b3a:	d025      	beq.n	8001b88 <HAL_GPIO_Init+0xe0>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001b44:	d020      	beq.n	8001b88 <HAL_GPIO_Init+0xe0>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001b4e:	d01b      	beq.n	8001b88 <HAL_GPIO_Init+0xe0>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001b58:	d016      	beq.n	8001b88 <HAL_GPIO_Init+0xe0>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001b62:	d011      	beq.n	8001b88 <HAL_GPIO_Init+0xe0>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001b6c:	d00c      	beq.n	8001b88 <HAL_GPIO_Init+0xe0>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001b76:	d007      	beq.n	8001b88 <HAL_GPIO_Init+0xe0>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0xe0>
 8001b80:	21ae      	movs	r1, #174	; 0xae
 8001b82:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <HAL_GPIO_Init+0x100>)
 8001b84:	f7fe ff18 	bl	80009b8 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	e206      	b.n	8001f9c <HAL_GPIO_Init+0x4f4>
 8001b8e:	bf00      	nop
 8001b90:	40020000 	.word	0x40020000
 8001b94:	40020400 	.word	0x40020400
 8001b98:	40020800 	.word	0x40020800
 8001b9c:	40020c00 	.word	0x40020c00
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40021c00 	.word	0x40021c00
 8001ba8:	0800db08 	.word	0x0800db08
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bac:	2201      	movs	r2, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	f040 81e6 	bne.w	8001f96 <HAL_GPIO_Init+0x4ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d005      	beq.n	8001be2 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d144      	bne.n	8001c6c <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00f      	beq.n	8001c0a <HAL_GPIO_Init+0x162>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d00b      	beq.n	8001c0a <HAL_GPIO_Init+0x162>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d007      	beq.n	8001c0a <HAL_GPIO_Init+0x162>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x162>
 8001c02:	21c0      	movs	r1, #192	; 0xc0
 8001c04:	4894      	ldr	r0, [pc, #592]	; (8001e58 <HAL_GPIO_Init+0x3b0>)
 8001c06:	f7fe fed7 	bl	80009b8 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	2203      	movs	r2, #3
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c40:	2201      	movs	r2, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 0201 	and.w	r2, r3, #1
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d027      	beq.n	8001cc8 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00b      	beq.n	8001c98 <HAL_GPIO_Init+0x1f0>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d007      	beq.n	8001c98 <HAL_GPIO_Init+0x1f0>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x1f0>
 8001c90:	21d1      	movs	r1, #209	; 0xd1
 8001c92:	4871      	ldr	r0, [pc, #452]	; (8001e58 <HAL_GPIO_Init+0x3b0>)
 8001c94:	f7fe fe90 	bl	80009b8 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	f040 8098 	bne.w	8001e06 <HAL_GPIO_Init+0x35e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d06f      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	2b0c      	cmp	r3, #12
 8001ce4:	d06b      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d067      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d063      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d05f      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d05b      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d057      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d053      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d04f      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d04b      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d047      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d043      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d03f      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d03b      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d037      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d033      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d02f      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	2b05      	cmp	r3, #5
 8001d64:	d02b      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	2b05      	cmp	r3, #5
 8001d6c:	d027      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2b05      	cmp	r3, #5
 8001d74:	d023      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d01f      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	2b07      	cmp	r3, #7
 8001d84:	d01b      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b07      	cmp	r3, #7
 8001d8c:	d017      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d013      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b09      	cmp	r3, #9
 8001d9c:	d00f      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b09      	cmp	r3, #9
 8001da4:	d00b      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	d007      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b0f      	cmp	r3, #15
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x316>
 8001db6:	21de      	movs	r1, #222	; 0xde
 8001db8:	4827      	ldr	r0, [pc, #156]	; (8001e58 <HAL_GPIO_Init+0x3b0>)
 8001dba:	f7fe fdfd 	bl	80009b8 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	08da      	lsrs	r2, r3, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3208      	adds	r2, #8
 8001dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	691a      	ldr	r2, [r3, #16]
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	08da      	lsrs	r2, r3, #3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3208      	adds	r2, #8
 8001e00:	69b9      	ldr	r1, [r7, #24]
 8001e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 0203 	and.w	r2, r3, #3
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 80a7 	beq.w	8001f96 <HAL_GPIO_Init+0x4ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_GPIO_Init+0x3b4>)
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e50:	4a02      	ldr	r2, [pc, #8]	; (8001e5c <HAL_GPIO_Init+0x3b4>)
 8001e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e56:	e003      	b.n	8001e60 <HAL_GPIO_Init+0x3b8>
 8001e58:	0800db08 	.word	0x0800db08
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <HAL_GPIO_Init+0x508>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6e:	4a51      	ldr	r2, [pc, #324]	; (8001fb4 <HAL_GPIO_Init+0x50c>)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	220f      	movs	r2, #15
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a48      	ldr	r2, [pc, #288]	; (8001fb8 <HAL_GPIO_Init+0x510>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d019      	beq.n	8001ece <HAL_GPIO_Init+0x426>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a47      	ldr	r2, [pc, #284]	; (8001fbc <HAL_GPIO_Init+0x514>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0x422>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a46      	ldr	r2, [pc, #280]	; (8001fc0 <HAL_GPIO_Init+0x518>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_GPIO_Init+0x41e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a45      	ldr	r2, [pc, #276]	; (8001fc4 <HAL_GPIO_Init+0x51c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <HAL_GPIO_Init+0x41a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a44      	ldr	r2, [pc, #272]	; (8001fc8 <HAL_GPIO_Init+0x520>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_GPIO_Init+0x416>
 8001eba:	2304      	movs	r3, #4
 8001ebc:	e008      	b.n	8001ed0 <HAL_GPIO_Init+0x428>
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	e006      	b.n	8001ed0 <HAL_GPIO_Init+0x428>
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e004      	b.n	8001ed0 <HAL_GPIO_Init+0x428>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e002      	b.n	8001ed0 <HAL_GPIO_Init+0x428>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_GPIO_Init+0x428>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	f002 0203 	and.w	r2, r2, #3
 8001ed6:	0092      	lsls	r2, r2, #2
 8001ed8:	4093      	lsls	r3, r2
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee0:	4934      	ldr	r1, [pc, #208]	; (8001fb4 <HAL_GPIO_Init+0x50c>)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eee:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <HAL_GPIO_Init+0x524>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x46a>
        {
          temp |= iocurrent;
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f12:	4a2e      	ldr	r2, [pc, #184]	; (8001fcc <HAL_GPIO_Init+0x524>)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f18:	4b2c      	ldr	r3, [pc, #176]	; (8001fcc <HAL_GPIO_Init+0x524>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x494>
        {
          temp |= iocurrent;
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f3c:	4a23      	ldr	r2, [pc, #140]	; (8001fcc <HAL_GPIO_Init+0x524>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f42:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <HAL_GPIO_Init+0x524>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x4be>
        {
          temp |= iocurrent;
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f66:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <HAL_GPIO_Init+0x524>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f6c:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_GPIO_Init+0x524>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x4e8>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f90:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <HAL_GPIO_Init+0x524>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	61fb      	str	r3, [r7, #28]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	2b0f      	cmp	r3, #15
 8001fa0:	f67f ae04 	bls.w	8001bac <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40013800 	.word	0x40013800
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	40020400 	.word	0x40020400
 8001fc0:	40020800 	.word	0x40020800
 8001fc4:	40020c00 	.word	0x40020c00
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40013c00 	.word	0x40013c00

08001fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001fdc:	887b      	ldrh	r3, [r7, #2]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d004      	beq.n	8001fec <HAL_GPIO_ReadPin+0x1c>
 8001fe2:	887b      	ldrh	r3, [r7, #2]
 8001fe4:	0c1b      	lsrs	r3, r3, #16
 8001fe6:	041b      	lsls	r3, r3, #16
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d004      	beq.n	8001ff6 <HAL_GPIO_ReadPin+0x26>
 8001fec:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001ff0:	4809      	ldr	r0, [pc, #36]	; (8002018 <HAL_GPIO_ReadPin+0x48>)
 8001ff2:	f7fe fce1 	bl	80009b8 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	887b      	ldrh	r3, [r7, #2]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8002002:	2301      	movs	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
 8002006:	e001      	b.n	800200c <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800200c:	7bfb      	ldrb	r3, [r7, #15]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	0800db08 	.word	0x0800db08

0800201c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	807b      	strh	r3, [r7, #2]
 8002028:	4613      	mov	r3, r2
 800202a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800202c:	887b      	ldrh	r3, [r7, #2]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d004      	beq.n	800203c <HAL_GPIO_WritePin+0x20>
 8002032:	887b      	ldrh	r3, [r7, #2]
 8002034:	0c1b      	lsrs	r3, r3, #16
 8002036:	041b      	lsls	r3, r3, #16
 8002038:	2b00      	cmp	r3, #0
 800203a:	d004      	beq.n	8002046 <HAL_GPIO_WritePin+0x2a>
 800203c:	f240 119d 	movw	r1, #413	; 0x19d
 8002040:	480e      	ldr	r0, [pc, #56]	; (800207c <HAL_GPIO_WritePin+0x60>)
 8002042:	f7fe fcb9 	bl	80009b8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002046:	787b      	ldrb	r3, [r7, #1]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d007      	beq.n	800205c <HAL_GPIO_WritePin+0x40>
 800204c:	787b      	ldrb	r3, [r7, #1]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d004      	beq.n	800205c <HAL_GPIO_WritePin+0x40>
 8002052:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8002056:	4809      	ldr	r0, [pc, #36]	; (800207c <HAL_GPIO_WritePin+0x60>)
 8002058:	f7fe fcae 	bl	80009b8 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800205c:	787b      	ldrb	r3, [r7, #1]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002068:	e003      	b.n	8002072 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800206a:	887b      	ldrh	r3, [r7, #2]
 800206c:	041a      	lsls	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	619a      	str	r2, [r3, #24]
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	0800db08 	.word	0x0800db08

08002080 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800208c:	887b      	ldrh	r3, [r7, #2]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d004      	beq.n	800209c <HAL_GPIO_TogglePin+0x1c>
 8002092:	887b      	ldrh	r3, [r7, #2]
 8002094:	0c1b      	lsrs	r3, r3, #16
 8002096:	041b      	lsls	r3, r3, #16
 8002098:	2b00      	cmp	r3, #0
 800209a:	d004      	beq.n	80020a6 <HAL_GPIO_TogglePin+0x26>
 800209c:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80020a0:	480a      	ldr	r0, [pc, #40]	; (80020cc <HAL_GPIO_TogglePin+0x4c>)
 80020a2:	f7fe fc89 	bl	80009b8 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020ac:	887a      	ldrh	r2, [r7, #2]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4013      	ands	r3, r2
 80020b2:	041a      	lsls	r2, r3, #16
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	43d9      	mvns	r1, r3
 80020b8:	887b      	ldrh	r3, [r7, #2]
 80020ba:	400b      	ands	r3, r1
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	619a      	str	r2, [r3, #24]
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	0800db08 	.word	0x0800db08

080020d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d2:	b08f      	sub	sp, #60	; 0x3c
 80020d4:	af0a      	add	r7, sp, #40	; 0x28
 80020d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e118      	b.n	8002314 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020ea:	d003      	beq.n	80020f4 <HAL_PCD_Init+0x24>
 80020ec:	2187      	movs	r1, #135	; 0x87
 80020ee:	488b      	ldr	r0, [pc, #556]	; (800231c <HAL_PCD_Init+0x24c>)
 80020f0:	f7fe fc62 	bl	80009b8 <assert_failed>

  USBx = hpcd->Instance;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d106      	bne.n	8002114 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f009 ff4c 	bl	800bfac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2203      	movs	r2, #3
 8002118:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d102      	bne.n	800212e <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f003 fa4d 	bl	80055d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	687e      	ldr	r6, [r7, #4]
 8002140:	466d      	mov	r5, sp
 8002142:	f106 0410 	add.w	r4, r6, #16
 8002146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800214c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002152:	e885 0003 	stmia.w	r5, {r0, r1}
 8002156:	1d33      	adds	r3, r6, #4
 8002158:	cb0e      	ldmia	r3, {r1, r2, r3}
 800215a:	6838      	ldr	r0, [r7, #0]
 800215c:	f003 f924 	bl	80053a8 <USB_CoreInit>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2202      	movs	r2, #2
 800216a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e0d0      	b.n	8002314 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f003 fa3b 	bl	80055f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217e:	2300      	movs	r3, #0
 8002180:	73fb      	strb	r3, [r7, #15]
 8002182:	e04a      	b.n	800221a <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002184:	7bfa      	ldrb	r2, [r7, #15]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	333d      	adds	r3, #61	; 0x3d
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	333c      	adds	r3, #60	; 0x3c
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	b298      	uxth	r0, r3
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	3344      	adds	r3, #68	; 0x44
 80021c0:	4602      	mov	r2, r0
 80021c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	3340      	adds	r3, #64	; 0x40
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	3348      	adds	r3, #72	; 0x48
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	334c      	adds	r3, #76	; 0x4c
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002200:	7bfa      	ldrb	r2, [r7, #15]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	3354      	adds	r3, #84	; 0x54
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	3301      	adds	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	d3af      	bcc.n	8002184 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	e044      	b.n	80022b4 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800222a:	7bfa      	ldrb	r2, [r7, #15]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4413      	add	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002240:	7bfa      	ldrb	r2, [r7, #15]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002252:	7bfa      	ldrb	r2, [r7, #15]
 8002254:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4413      	add	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	3301      	adds	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d3b5      	bcc.n	800222a <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	687e      	ldr	r6, [r7, #4]
 80022c6:	466d      	mov	r5, sp
 80022c8:	f106 0410 	add.w	r4, r6, #16
 80022cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80022dc:	1d33      	adds	r3, r6, #4
 80022de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022e0:	6838      	ldr	r0, [r7, #0]
 80022e2:	f003 f9d3 	bl	800568c <USB_DevInit>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e00d      	b.n	8002314 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f004 fb22 	bl	8006956 <USB_DevDisconnect>

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800231c:	0800db44 	.word	0x0800db44

08002320 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_PCD_Start+0x1c>
 8002338:	2302      	movs	r3, #2
 800233a:	e020      	b.n	800237e <HAL_PCD_Start+0x5e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	2b01      	cmp	r3, #1
 800234a:	d109      	bne.n	8002360 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002350:	2b01      	cmp	r3, #1
 8002352:	d005      	beq.n	8002360 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002358:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f003 f923 	bl	80055b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f004 fad0 	bl	8006914 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002386:	b590      	push	{r4, r7, lr}
 8002388:	b08d      	sub	sp, #52	; 0x34
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f004 fb8e 	bl	8006abe <USB_GetMode>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f040 848a 	bne.w	8002cbe <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f004 faf2 	bl	8006998 <USB_ReadInterrupts>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 8480 	beq.w	8002cbc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f004 fadf 	bl	8006998 <USB_ReadInterrupts>
 80023da:	4603      	mov	r3, r0
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d107      	bne.n	80023f4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f002 0202 	and.w	r2, r2, #2
 80023f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f004 facd 	bl	8006998 <USB_ReadInterrupts>
 80023fe:	4603      	mov	r3, r0
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b10      	cmp	r3, #16
 8002406:	d161      	bne.n	80024cc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699a      	ldr	r2, [r3, #24]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0210 	bic.w	r2, r2, #16
 8002416:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	f003 020f 	and.w	r2, r3, #15
 8002424:	4613      	mov	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	4413      	add	r3, r2
 8002434:	3304      	adds	r3, #4
 8002436:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	0c5b      	lsrs	r3, r3, #17
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	2b02      	cmp	r3, #2
 8002442:	d124      	bne.n	800248e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d035      	beq.n	80024bc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800245a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800245e:	b29b      	uxth	r3, r3
 8002460:	461a      	mov	r2, r3
 8002462:	6a38      	ldr	r0, [r7, #32]
 8002464:	f004 f904 	bl	8006670 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002474:	441a      	add	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	6a1a      	ldr	r2, [r3, #32]
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002486:	441a      	add	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	621a      	str	r2, [r3, #32]
 800248c:	e016      	b.n	80024bc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	0c5b      	lsrs	r3, r3, #17
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	2b06      	cmp	r3, #6
 8002498:	d110      	bne.n	80024bc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024a0:	2208      	movs	r2, #8
 80024a2:	4619      	mov	r1, r3
 80024a4:	6a38      	ldr	r0, [r7, #32]
 80024a6:	f004 f8e3 	bl	8006670 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	6a1a      	ldr	r2, [r3, #32]
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024b6:	441a      	add	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699a      	ldr	r2, [r3, #24]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0210 	orr.w	r2, r2, #16
 80024ca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f004 fa61 	bl	8006998 <USB_ReadInterrupts>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024e0:	f040 80a7 	bne.w	8002632 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f004 fa66 	bl	80069be <USB_ReadDevAllOutEpInterrupt>
 80024f2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80024f4:	e099      	b.n	800262a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80024f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 808e 	beq.w	800261e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f004 fa8a 	bl	8006a26 <USB_ReadDevOutEPInterrupt>
 8002512:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00c      	beq.n	8002538 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	4413      	add	r3, r2
 8002526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800252a:	461a      	mov	r2, r3
 800252c:	2301      	movs	r3, #1
 800252e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fec2 	bl	80032bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00c      	beq.n	800255c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	4413      	add	r3, r2
 800254a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800254e:	461a      	mov	r2, r3
 8002550:	2308      	movs	r3, #8
 8002552:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 ff98 	bl	800348c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	f003 0310 	and.w	r3, r3, #16
 8002562:	2b00      	cmp	r3, #0
 8002564:	d008      	beq.n	8002578 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	4413      	add	r3, r2
 800256e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002572:	461a      	mov	r2, r3
 8002574:	2310      	movs	r3, #16
 8002576:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d030      	beq.n	80025e4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258a:	2b80      	cmp	r3, #128	; 0x80
 800258c:	d109      	bne.n	80025a2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800259c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025a0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80025a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	4413      	add	r3, r2
 80025b4:	3304      	adds	r3, #4
 80025b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	78db      	ldrb	r3, [r3, #3]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d108      	bne.n	80025d2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2200      	movs	r2, #0
 80025c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	4619      	mov	r1, r3
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f009 fde9 	bl	800c1a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025de:	461a      	mov	r2, r3
 80025e0:	2302      	movs	r3, #2
 80025e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	f003 0320 	and.w	r3, r3, #32
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025fa:	461a      	mov	r2, r3
 80025fc:	2320      	movs	r3, #32
 80025fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d009      	beq.n	800261e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	015a      	lsls	r2, r3, #5
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	4413      	add	r3, r2
 8002612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002616:	461a      	mov	r2, r3
 8002618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800261c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	3301      	adds	r3, #1
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	085b      	lsrs	r3, r3, #1
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	2b00      	cmp	r3, #0
 800262e:	f47f af62 	bne.w	80024f6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f004 f9ae 	bl	8006998 <USB_ReadInterrupts>
 800263c:	4603      	mov	r3, r0
 800263e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002642:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002646:	f040 80db 	bne.w	8002800 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f004 f9cf 	bl	80069f2 <USB_ReadDevAllInEpInterrupt>
 8002654:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800265a:	e0cd      	b.n	80027f8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 80c2 	beq.w	80027ec <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f004 f9f5 	bl	8006a62 <USB_ReadDevInEPInterrupt>
 8002678:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d057      	beq.n	8002734 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	2201      	movs	r2, #1
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	43db      	mvns	r3, r3
 800269e:	69f9      	ldr	r1, [r7, #28]
 80026a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026a4:	4013      	ands	r3, r2
 80026a6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026b4:	461a      	mov	r2, r3
 80026b6:	2301      	movs	r3, #1
 80026b8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d132      	bne.n	8002728 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	334c      	adds	r3, #76	; 0x4c
 80026d2:	6819      	ldr	r1, [r3, #0]
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d8:	4613      	mov	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4403      	add	r3, r0
 80026e2:	3348      	adds	r3, #72	; 0x48
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4419      	add	r1, r3
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4403      	add	r3, r0
 80026f6:	334c      	adds	r3, #76	; 0x4c
 80026f8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d113      	bne.n	8002728 <HAL_PCD_IRQHandler+0x3a2>
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	3354      	adds	r3, #84	; 0x54
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d108      	bne.n	8002728 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002720:	461a      	mov	r2, r3
 8002722:	2101      	movs	r1, #1
 8002724:	f004 f9fc 	bl	8006b20 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	b2db      	uxtb	r3, r3
 800272c:	4619      	mov	r1, r3
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f009 fcbd 	bl	800c0ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d008      	beq.n	8002750 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	4413      	add	r3, r2
 8002746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800274a:	461a      	mov	r2, r3
 800274c:	2308      	movs	r3, #8
 800274e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b00      	cmp	r3, #0
 8002758:	d008      	beq.n	800276c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	015a      	lsls	r2, r3, #5
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	4413      	add	r3, r2
 8002762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002766:	461a      	mov	r2, r3
 8002768:	2310      	movs	r3, #16
 800276a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	4413      	add	r3, r2
 800277e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002782:	461a      	mov	r2, r3
 8002784:	2340      	movs	r3, #64	; 0x40
 8002786:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d023      	beq.n	80027da <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002792:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002794:	6a38      	ldr	r0, [r7, #32]
 8002796:	f003 f8dd 	bl	8005954 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800279a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279c:	4613      	mov	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	3338      	adds	r3, #56	; 0x38
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	3304      	adds	r3, #4
 80027ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	78db      	ldrb	r3, [r3, #3]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d108      	bne.n	80027c8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2200      	movs	r2, #0
 80027ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	4619      	mov	r1, r3
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f009 fd00 	bl	800c1c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d4:	461a      	mov	r2, r3
 80027d6:	2302      	movs	r3, #2
 80027d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 fcdb 	bl	80031a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	3301      	adds	r3, #1
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f4:	085b      	lsrs	r3, r3, #1
 80027f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f47f af2e 	bne.w	800265c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f004 f8c7 	bl	8006998 <USB_ReadInterrupts>
 800280a:	4603      	mov	r3, r0
 800280c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002810:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002814:	d122      	bne.n	800285c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002830:	2b01      	cmp	r3, #1
 8002832:	d108      	bne.n	8002846 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800283c:	2100      	movs	r1, #0
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fec2 	bl	80035c8 <HAL_PCDEx_LPM_Callback>
 8002844:	e002      	b.n	800284c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f009 fc9e 	bl	800c188 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800285a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f004 f899 	bl	8006998 <USB_ReadInterrupts>
 8002866:	4603      	mov	r3, r0
 8002868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800286c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002870:	d112      	bne.n	8002898 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b01      	cmp	r3, #1
 8002880:	d102      	bne.n	8002888 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f009 fc5a 	bl	800c13c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002896:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f004 f87b 	bl	8006998 <USB_ReadInterrupts>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ac:	f040 80b7 	bne.w	8002a1e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2110      	movs	r1, #16
 80028ca:	4618      	mov	r0, r3
 80028cc:	f003 f842 	bl	8005954 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d0:	2300      	movs	r3, #0
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d4:	e046      	b.n	8002964 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028e2:	461a      	mov	r2, r3
 80028e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028fa:	0151      	lsls	r1, r2, #5
 80028fc:	69fa      	ldr	r2, [r7, #28]
 80028fe:	440a      	add	r2, r1
 8002900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002904:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002908:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	4413      	add	r3, r2
 8002912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002916:	461a      	mov	r2, r3
 8002918:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800291c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800291e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002920:	015a      	lsls	r2, r3, #5
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	4413      	add	r3, r2
 8002926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800292e:	0151      	lsls	r1, r2, #5
 8002930:	69fa      	ldr	r2, [r7, #28]
 8002932:	440a      	add	r2, r1
 8002934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002938:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800293c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800293e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	4413      	add	r3, r2
 8002946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800294e:	0151      	lsls	r1, r2, #5
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	440a      	add	r2, r1
 8002954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002958:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800295c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800295e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002960:	3301      	adds	r3, #1
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800296a:	429a      	cmp	r2, r3
 800296c:	d3b3      	bcc.n	80028d6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800297c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002980:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	2b00      	cmp	r3, #0
 8002988:	d016      	beq.n	80029b8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002994:	69fa      	ldr	r2, [r7, #28]
 8002996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800299a:	f043 030b 	orr.w	r3, r3, #11
 800299e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029b0:	f043 030b 	orr.w	r3, r3, #11
 80029b4:	6453      	str	r3, [r2, #68]	; 0x44
 80029b6:	e015      	b.n	80029e4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029ca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80029ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029de:	f043 030b 	orr.w	r3, r3, #11
 80029e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	69fa      	ldr	r2, [r7, #28]
 80029ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80029f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f004 f889 	bl	8006b20 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f003 ffb8 	bl	8006998 <USB_ReadInterrupts>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a32:	d124      	bne.n	8002a7e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f004 f84e 	bl	8006ada <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f003 f803 	bl	8005a4e <USB_GetDevSpeed>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681c      	ldr	r4, [r3, #0]
 8002a54:	f001 fb40 	bl	80040d8 <HAL_RCC_GetHCLKFreq>
 8002a58:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	4620      	mov	r0, r4
 8002a64:	f002 fd02 	bl	800546c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f009 fb48 	bl	800c0fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695a      	ldr	r2, [r3, #20]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f003 ff88 	bl	8006998 <USB_ReadInterrupts>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d10a      	bne.n	8002aa8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f009 fb25 	bl	800c0e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f002 0208 	and.w	r2, r2, #8
 8002aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f003 ff73 	bl	8006998 <USB_ReadInterrupts>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab8:	2b80      	cmp	r3, #128	; 0x80
 8002aba:	d122      	bne.n	8002b02 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ac8:	2301      	movs	r3, #1
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
 8002acc:	e014      	b.n	8002af8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d105      	bne.n	8002af2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	4619      	mov	r1, r3
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 fb27 	bl	8003140 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	3301      	adds	r3, #1
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d3e5      	bcc.n	8002ace <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f003 ff46 	bl	8006998 <USB_ReadInterrupts>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b16:	d13b      	bne.n	8002b90 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b18:	2301      	movs	r3, #1
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1c:	e02b      	b.n	8002b76 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3340      	adds	r3, #64	; 0x40
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d115      	bne.n	8002b70 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002b44:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	da12      	bge.n	8002b70 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	333f      	adds	r3, #63	; 0x3f
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	4619      	mov	r1, r3
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fae8 	bl	8003140 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	3301      	adds	r3, #1
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d3ce      	bcc.n	8002b1e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f003 feff 	bl	8006998 <USB_ReadInterrupts>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ba4:	d155      	bne.n	8002c52 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8002baa:	e045      	b.n	8002c38 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d12e      	bne.n	8002c32 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bd4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	da2b      	bge.n	8002c32 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002be6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d121      	bne.n	8002c32 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10a      	bne.n	8002c32 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c2e:	6053      	str	r3, [r2, #4]
            break;
 8002c30:	e007      	b.n	8002c42 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	3301      	adds	r3, #1
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d3b4      	bcc.n	8002bac <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f003 fe9e 	bl	8006998 <USB_ReadInterrupts>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c66:	d10a      	bne.n	8002c7e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f009 fabf 	bl	800c1ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f003 fe88 	bl	8006998 <USB_ReadInterrupts>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d115      	bne.n	8002cbe <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f009 faaf 	bl	800c208 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	e000      	b.n	8002cbe <HAL_PCD_IRQHandler+0x938>
      return;
 8002cbc:	bf00      	nop
    }
  }
}
 8002cbe:	3734      	adds	r7, #52	; 0x34
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd90      	pop	{r4, r7, pc}

08002cc4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d101      	bne.n	8002cde <HAL_PCD_SetAddress+0x1a>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e013      	b.n	8002d06 <HAL_PCD_SetAddress+0x42>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	78fa      	ldrb	r2, [r7, #3]
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f003 fde6 	bl	80068c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	4608      	mov	r0, r1
 8002d18:	4611      	mov	r1, r2
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	70fb      	strb	r3, [r7, #3]
 8002d20:	460b      	mov	r3, r1
 8002d22:	803b      	strh	r3, [r7, #0]
 8002d24:	4613      	mov	r3, r2
 8002d26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	da0f      	bge.n	8002d54 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	f003 020f 	and.w	r2, r3, #15
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	3338      	adds	r3, #56	; 0x38
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	3304      	adds	r3, #4
 8002d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	705a      	strb	r2, [r3, #1]
 8002d52:	e00f      	b.n	8002d74 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	f003 020f 	and.w	r2, r3, #15
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d80:	883a      	ldrh	r2, [r7, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	78ba      	ldrb	r2, [r7, #2]
 8002d8a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	785b      	ldrb	r3, [r3, #1]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d9e:	78bb      	ldrb	r3, [r7, #2]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d102      	bne.n	8002daa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_PCD_EP_Open+0xaa>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e00e      	b.n	8002dd6 <HAL_PCD_EP_Open+0xc8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68f9      	ldr	r1, [r7, #12]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f002 fe66 	bl	8005a98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002dd4:	7afb      	ldrb	r3, [r7, #11]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	da0f      	bge.n	8002e12 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	f003 020f 	and.w	r2, r3, #15
 8002df8:	4613      	mov	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	3338      	adds	r3, #56	; 0x38
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	3304      	adds	r3, #4
 8002e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	705a      	strb	r2, [r3, #1]
 8002e10:	e00f      	b.n	8002e32 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e12:	78fb      	ldrb	r3, [r7, #3]
 8002e14:	f003 020f 	and.w	r2, r3, #15
 8002e18:	4613      	mov	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	4413      	add	r3, r2
 8002e28:	3304      	adds	r3, #4
 8002e2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	f003 030f 	and.w	r3, r3, #15
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_PCD_EP_Close+0x6e>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e00e      	b.n	8002e6a <HAL_PCD_EP_Close+0x8c>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68f9      	ldr	r1, [r7, #12]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f002 fea4 	bl	8005ba8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e82:	7afb      	ldrb	r3, [r7, #11]
 8002e84:	f003 020f 	and.w	r2, r3, #15
 8002e88:	4613      	mov	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4413      	add	r3, r2
 8002e98:	3304      	adds	r3, #4
 8002e9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d102      	bne.n	8002ece <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ece:	7afb      	ldrb	r3, [r7, #11]
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d109      	bne.n	8002eec <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	6979      	ldr	r1, [r7, #20]
 8002ee6:	f003 f983 	bl	80061f0 <USB_EP0StartXfer>
 8002eea:	e008      	b.n	8002efe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	6979      	ldr	r1, [r7, #20]
 8002efa:	f002 ff31 	bl	8005d60 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	f003 020f 	and.w	r2, r3, #15
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002f2a:	681b      	ldr	r3, [r3, #0]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	460b      	mov	r3, r1
 8002f46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f48:	7afb      	ldrb	r3, [r7, #11]
 8002f4a:	f003 020f 	and.w	r2, r3, #15
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	3338      	adds	r3, #56	; 0x38
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2201      	movs	r2, #1
 8002f76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f78:	7afb      	ldrb	r3, [r7, #11]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d102      	bne.n	8002f92 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f92:	7afb      	ldrb	r3, [r7, #11]
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6818      	ldr	r0, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	6979      	ldr	r1, [r7, #20]
 8002faa:	f003 f921 	bl	80061f0 <USB_EP0StartXfer>
 8002fae:	e008      	b.n	8002fc2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6818      	ldr	r0, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	6979      	ldr	r1, [r7, #20]
 8002fbe:	f002 fecf 	bl	8005d60 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	f003 020f 	and.w	r2, r3, #15
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d901      	bls.n	8002fea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e050      	b.n	800308c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	da0f      	bge.n	8003012 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	f003 020f 	and.w	r2, r3, #15
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	3338      	adds	r3, #56	; 0x38
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	3304      	adds	r3, #4
 8003008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2201      	movs	r2, #1
 800300e:	705a      	strb	r2, [r3, #1]
 8003010:	e00d      	b.n	800302e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	4413      	add	r3, r2
 8003024:	3304      	adds	r3, #4
 8003026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2201      	movs	r2, #1
 8003032:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	b2da      	uxtb	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_PCD_EP_SetStall+0x82>
 800304a:	2302      	movs	r3, #2
 800304c:	e01e      	b.n	800308c <HAL_PCD_EP_SetStall+0xc0>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68f9      	ldr	r1, [r7, #12]
 800305c:	4618      	mov	r0, r3
 800305e:	f003 fb5f 	bl	8006720 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	b2d9      	uxtb	r1, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800307c:	461a      	mov	r2, r3
 800307e:	f003 fd4f 	bl	8006b20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	f003 020f 	and.w	r2, r3, #15
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d901      	bls.n	80030b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e042      	b.n	8003138 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	da0f      	bge.n	80030da <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	f003 020f 	and.w	r2, r3, #15
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	3338      	adds	r3, #56	; 0x38
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	3304      	adds	r3, #4
 80030d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	705a      	strb	r2, [r3, #1]
 80030d8:	e00f      	b.n	80030fa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	f003 020f 	and.w	r2, r3, #15
 80030e0:	4613      	mov	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	4413      	add	r3, r2
 80030f0:	3304      	adds	r3, #4
 80030f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	b2da      	uxtb	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_PCD_EP_ClrStall+0x86>
 8003116:	2302      	movs	r3, #2
 8003118:	e00e      	b.n	8003138 <HAL_PCD_EP_ClrStall+0xa4>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68f9      	ldr	r1, [r7, #12]
 8003128:	4618      	mov	r0, r3
 800312a:	f003 fb67 	bl	80067fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800314c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003150:	2b00      	cmp	r3, #0
 8003152:	da0c      	bge.n	800316e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	f003 020f 	and.w	r2, r3, #15
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	3338      	adds	r3, #56	; 0x38
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	4413      	add	r3, r2
 8003168:	3304      	adds	r3, #4
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	e00c      	b.n	8003188 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	f003 020f 	and.w	r2, r3, #15
 8003174:	4613      	mov	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	4413      	add	r3, r2
 8003184:	3304      	adds	r3, #4
 8003186:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68f9      	ldr	r1, [r7, #12]
 800318e:	4618      	mov	r0, r3
 8003190:	f003 f986 	bl	80064a0 <USB_EPStopXfer>
 8003194:	4603      	mov	r3, r0
 8003196:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003198:	7afb      	ldrb	r3, [r7, #11]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b08a      	sub	sp, #40	; 0x28
 80031a6:	af02      	add	r7, sp, #8
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	3338      	adds	r3, #56	; 0x38
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	3304      	adds	r3, #4
 80031c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a1a      	ldr	r2, [r3, #32]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d901      	bls.n	80031da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e06c      	b.n	80032b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d902      	bls.n	80031f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3303      	adds	r3, #3
 80031fa:	089b      	lsrs	r3, r3, #2
 80031fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031fe:	e02b      	b.n	8003258 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	699a      	ldr	r2, [r3, #24]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	429a      	cmp	r2, r3
 8003214:	d902      	bls.n	800321c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	3303      	adds	r3, #3
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6919      	ldr	r1, [r3, #16]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	b2da      	uxtb	r2, r3
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003234:	b2db      	uxtb	r3, r3
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	4603      	mov	r3, r0
 800323a:	6978      	ldr	r0, [r7, #20]
 800323c:	f003 f9da 	bl	80065f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	441a      	add	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a1a      	ldr	r2, [r3, #32]
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	441a      	add	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4413      	add	r3, r2
 8003260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	429a      	cmp	r2, r3
 800326c:	d809      	bhi.n	8003282 <PCD_WriteEmptyTxFifo+0xe0>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a1a      	ldr	r2, [r3, #32]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003276:	429a      	cmp	r2, r3
 8003278:	d203      	bcs.n	8003282 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1be      	bne.n	8003200 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	699a      	ldr	r2, [r3, #24]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	429a      	cmp	r2, r3
 800328c:	d811      	bhi.n	80032b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	2201      	movs	r2, #1
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	43db      	mvns	r3, r3
 80032a8:	6939      	ldr	r1, [r7, #16]
 80032aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032ae:	4013      	ands	r3, r2
 80032b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3720      	adds	r7, #32
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	333c      	adds	r3, #60	; 0x3c
 80032d4:	3304      	adds	r3, #4
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d17b      	bne.n	80033ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d015      	beq.n	8003328 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	4a61      	ldr	r2, [pc, #388]	; (8003484 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	f240 80b9 	bls.w	8003478 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80b3 	beq.w	8003478 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	4413      	add	r3, r2
 800331a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331e:	461a      	mov	r2, r3
 8003320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003324:	6093      	str	r3, [r2, #8]
 8003326:	e0a7      	b.n	8003478 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	015a      	lsls	r2, r3, #5
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	4413      	add	r3, r2
 800333a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800333e:	461a      	mov	r2, r3
 8003340:	2320      	movs	r3, #32
 8003342:	6093      	str	r3, [r2, #8]
 8003344:	e098      	b.n	8003478 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800334c:	2b00      	cmp	r3, #0
 800334e:	f040 8093 	bne.w	8003478 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	4a4b      	ldr	r2, [pc, #300]	; (8003484 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d90f      	bls.n	800337a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	4413      	add	r3, r2
 800336c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003370:	461a      	mov	r2, r3
 8003372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003376:	6093      	str	r3, [r2, #8]
 8003378:	e07e      	b.n	8003478 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	4413      	add	r3, r2
 800338c:	3304      	adds	r3, #4
 800338e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	69da      	ldr	r2, [r3, #28]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	0159      	lsls	r1, r3, #5
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	440b      	add	r3, r1
 800339c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a6:	1ad2      	subs	r2, r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d114      	bne.n	80033dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033c4:	461a      	mov	r2, r3
 80033c6:	2101      	movs	r1, #1
 80033c8:	f003 fbaa 	bl	8006b20 <USB_EP0_OutStart>
 80033cc:	e006      	b.n	80033dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	441a      	add	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	4619      	mov	r1, r3
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f008 fe48 	bl	800c078 <HAL_PCD_DataOutStageCallback>
 80033e8:	e046      	b.n	8003478 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	4a26      	ldr	r2, [pc, #152]	; (8003488 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d124      	bne.n	800343c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	4413      	add	r3, r2
 8003404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003408:	461a      	mov	r2, r3
 800340a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800340e:	6093      	str	r3, [r2, #8]
 8003410:	e032      	b.n	8003478 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	4413      	add	r3, r2
 8003424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003428:	461a      	mov	r2, r3
 800342a:	2320      	movs	r3, #32
 800342c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f008 fe1f 	bl	800c078 <HAL_PCD_DataOutStageCallback>
 800343a:	e01d      	b.n	8003478 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d114      	bne.n	800346c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d108      	bne.n	800346c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003464:	461a      	mov	r2, r3
 8003466:	2100      	movs	r1, #0
 8003468:	f003 fb5a 	bl	8006b20 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	4619      	mov	r1, r3
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f008 fe00 	bl	800c078 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3720      	adds	r7, #32
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	4f54300a 	.word	0x4f54300a
 8003488:	4f54310a 	.word	0x4f54310a

0800348c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	333c      	adds	r3, #60	; 0x3c
 80034a4:	3304      	adds	r3, #4
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4a15      	ldr	r2, [pc, #84]	; (8003514 <PCD_EP_OutSetupPacket_int+0x88>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d90e      	bls.n	80034e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d009      	beq.n	80034e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d8:	461a      	mov	r2, r3
 80034da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f008 fdb7 	bl	800c054 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4a0a      	ldr	r2, [pc, #40]	; (8003514 <PCD_EP_OutSetupPacket_int+0x88>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d90c      	bls.n	8003508 <PCD_EP_OutSetupPacket_int+0x7c>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d108      	bne.n	8003508 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003500:	461a      	mov	r2, r3
 8003502:	2101      	movs	r1, #1
 8003504:	f003 fb0c 	bl	8006b20 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	4f54300a 	.word	0x4f54300a

08003518 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	70fb      	strb	r3, [r7, #3]
 8003524:	4613      	mov	r3, r2
 8003526:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d107      	bne.n	8003546 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003536:	883b      	ldrh	r3, [r7, #0]
 8003538:	0419      	lsls	r1, r3, #16
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	430a      	orrs	r2, r1
 8003542:	629a      	str	r2, [r3, #40]	; 0x28
 8003544:	e028      	b.n	8003598 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	4413      	add	r3, r2
 8003552:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]
 8003558:	e00d      	b.n	8003576 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	3340      	adds	r3, #64	; 0x40
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	0c1b      	lsrs	r3, r3, #16
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	4413      	add	r3, r2
 800356e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	3301      	adds	r3, #1
 8003574:	73fb      	strb	r3, [r7, #15]
 8003576:	7bfa      	ldrb	r2, [r7, #15]
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	3b01      	subs	r3, #1
 800357c:	429a      	cmp	r2, r3
 800357e:	d3ec      	bcc.n	800355a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003580:	883b      	ldrh	r3, [r7, #0]
 8003582:	0418      	lsls	r0, r3, #16
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6819      	ldr	r1, [r3, #0]
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	3b01      	subs	r3, #1
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	4302      	orrs	r2, r0
 8003590:	3340      	adds	r3, #64	; 0x40
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	460b      	mov	r3, r1
 80035b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	887a      	ldrh	r2, [r7, #2]
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e314      	b.n	8003c1c <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b0f      	cmp	r3, #15
 80035f8:	d903      	bls.n	8003602 <HAL_RCC_OscConfig+0x22>
 80035fa:	21e6      	movs	r1, #230	; 0xe6
 80035fc:	4897      	ldr	r0, [pc, #604]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 80035fe:	f7fd f9db 	bl	80009b8 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 8088 	beq.w	8003720 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00d      	beq.n	8003634 <HAL_RCC_OscConfig+0x54>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003620:	d008      	beq.n	8003634 <HAL_RCC_OscConfig+0x54>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800362a:	d003      	beq.n	8003634 <HAL_RCC_OscConfig+0x54>
 800362c:	21eb      	movs	r1, #235	; 0xeb
 800362e:	488b      	ldr	r0, [pc, #556]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 8003630:	f7fd f9c2 	bl	80009b8 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003634:	4b8a      	ldr	r3, [pc, #552]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 030c 	and.w	r3, r3, #12
 800363c:	2b04      	cmp	r3, #4
 800363e:	d00c      	beq.n	800365a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003640:	4b87      	ldr	r3, [pc, #540]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003648:	2b08      	cmp	r3, #8
 800364a:	d112      	bne.n	8003672 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800364c:	4b84      	ldr	r3, [pc, #528]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003658:	d10b      	bne.n	8003672 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365a:	4b81      	ldr	r3, [pc, #516]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d05b      	beq.n	800371e <HAL_RCC_OscConfig+0x13e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d157      	bne.n	800371e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e2d4      	b.n	8003c1c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800367a:	d106      	bne.n	800368a <HAL_RCC_OscConfig+0xaa>
 800367c:	4b78      	ldr	r3, [pc, #480]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a77      	ldr	r2, [pc, #476]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	e01d      	b.n	80036c6 <HAL_RCC_OscConfig+0xe6>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003692:	d10c      	bne.n	80036ae <HAL_RCC_OscConfig+0xce>
 8003694:	4b72      	ldr	r3, [pc, #456]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a71      	ldr	r2, [pc, #452]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 800369a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	4b6f      	ldr	r3, [pc, #444]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a6e      	ldr	r2, [pc, #440]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80036a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	e00b      	b.n	80036c6 <HAL_RCC_OscConfig+0xe6>
 80036ae:	4b6c      	ldr	r3, [pc, #432]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a6b      	ldr	r2, [pc, #428]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80036b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	4b69      	ldr	r3, [pc, #420]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a68      	ldr	r2, [pc, #416]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80036c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d013      	beq.n	80036f6 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ce:	f7fd fbd7 	bl	8000e80 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036d6:	f7fd fbd3 	bl	8000e80 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b64      	cmp	r3, #100	; 0x64
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e299      	b.n	8003c1c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e8:	4b5d      	ldr	r3, [pc, #372]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0xf6>
 80036f4:	e014      	b.n	8003720 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f6:	f7fd fbc3 	bl	8000e80 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036fe:	f7fd fbbf 	bl	8000e80 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b64      	cmp	r3, #100	; 0x64
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e285      	b.n	8003c1c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003710:	4b53      	ldr	r3, [pc, #332]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f0      	bne.n	80036fe <HAL_RCC_OscConfig+0x11e>
 800371c:	e000      	b.n	8003720 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d079      	beq.n	8003820 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_RCC_OscConfig+0x166>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d004      	beq.n	8003746 <HAL_RCC_OscConfig+0x166>
 800373c:	f240 111d 	movw	r1, #285	; 0x11d
 8003740:	4846      	ldr	r0, [pc, #280]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 8003742:	f7fd f939 	bl	80009b8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b1f      	cmp	r3, #31
 800374c:	d904      	bls.n	8003758 <HAL_RCC_OscConfig+0x178>
 800374e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003752:	4842      	ldr	r0, [pc, #264]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 8003754:	f7fd f930 	bl	80009b8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003758:	4b41      	ldr	r3, [pc, #260]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 030c 	and.w	r3, r3, #12
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00b      	beq.n	800377c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003764:	4b3e      	ldr	r3, [pc, #248]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800376c:	2b08      	cmp	r3, #8
 800376e:	d11c      	bne.n	80037aa <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003770:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d116      	bne.n	80037aa <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377c:	4b38      	ldr	r3, [pc, #224]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_OscConfig+0x1b4>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d001      	beq.n	8003794 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e243      	b.n	8003c1c <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003794:	4b32      	ldr	r3, [pc, #200]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	492f      	ldr	r1, [pc, #188]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037a8:	e03a      	b.n	8003820 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d020      	beq.n	80037f4 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b2:	4b2c      	ldr	r3, [pc, #176]	; (8003864 <HAL_RCC_OscConfig+0x284>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fd fb62 	bl	8000e80 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037c0:	f7fd fb5e 	bl	8000e80 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e224      	b.n	8003c1c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d2:	4b23      	ldr	r3, [pc, #140]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037de:	4b20      	ldr	r3, [pc, #128]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	491c      	ldr	r1, [pc, #112]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	600b      	str	r3, [r1, #0]
 80037f2:	e015      	b.n	8003820 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037f4:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <HAL_RCC_OscConfig+0x284>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fa:	f7fd fb41 	bl	8000e80 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003802:	f7fd fb3d 	bl	8000e80 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e203      	b.n	8003c1c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003814:	4b12      	ldr	r3, [pc, #72]	; (8003860 <HAL_RCC_OscConfig+0x280>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f0      	bne.n	8003802 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d045      	beq.n	80038b8 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_RCC_OscConfig+0x266>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d004      	beq.n	8003846 <HAL_RCC_OscConfig+0x266>
 800383c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003840:	4806      	ldr	r0, [pc, #24]	; (800385c <HAL_RCC_OscConfig+0x27c>)
 8003842:	f7fd f8b9 	bl	80009b8 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01e      	beq.n	800388c <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800384e:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_RCC_OscConfig+0x288>)
 8003850:	2201      	movs	r2, #1
 8003852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003854:	f7fd fb14 	bl	8000e80 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385a:	e010      	b.n	800387e <HAL_RCC_OscConfig+0x29e>
 800385c:	0800db7c 	.word	0x0800db7c
 8003860:	40023800 	.word	0x40023800
 8003864:	42470000 	.word	0x42470000
 8003868:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800386c:	f7fd fb08 	bl	8000e80 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e1ce      	b.n	8003c1c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387e:	4b5e      	ldr	r3, [pc, #376]	; (80039f8 <HAL_RCC_OscConfig+0x418>)
 8003880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0x28c>
 800388a:	e015      	b.n	80038b8 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800388c:	4b5b      	ldr	r3, [pc, #364]	; (80039fc <HAL_RCC_OscConfig+0x41c>)
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003892:	f7fd faf5 	bl	8000e80 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800389a:	f7fd faf1 	bl	8000e80 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e1b7      	b.n	8003c1c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ac:	4b52      	ldr	r3, [pc, #328]	; (80039f8 <HAL_RCC_OscConfig+0x418>)
 80038ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f0      	bne.n	800389a <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80b0 	beq.w	8003a26 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038c6:	2300      	movs	r3, #0
 80038c8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00c      	beq.n	80038ec <HAL_RCC_OscConfig+0x30c>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d008      	beq.n	80038ec <HAL_RCC_OscConfig+0x30c>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b05      	cmp	r3, #5
 80038e0:	d004      	beq.n	80038ec <HAL_RCC_OscConfig+0x30c>
 80038e2:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80038e6:	4846      	ldr	r0, [pc, #280]	; (8003a00 <HAL_RCC_OscConfig+0x420>)
 80038e8:	f7fd f866 	bl	80009b8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ec:	4b42      	ldr	r3, [pc, #264]	; (80039f8 <HAL_RCC_OscConfig+0x418>)
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10f      	bne.n	8003918 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f8:	2300      	movs	r3, #0
 80038fa:	60bb      	str	r3, [r7, #8]
 80038fc:	4b3e      	ldr	r3, [pc, #248]	; (80039f8 <HAL_RCC_OscConfig+0x418>)
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	4a3d      	ldr	r2, [pc, #244]	; (80039f8 <HAL_RCC_OscConfig+0x418>)
 8003902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003906:	6413      	str	r3, [r2, #64]	; 0x40
 8003908:	4b3b      	ldr	r3, [pc, #236]	; (80039f8 <HAL_RCC_OscConfig+0x418>)
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003910:	60bb      	str	r3, [r7, #8]
 8003912:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003914:	2301      	movs	r3, #1
 8003916:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003918:	4b3a      	ldr	r3, [pc, #232]	; (8003a04 <HAL_RCC_OscConfig+0x424>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d118      	bne.n	8003956 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003924:	4b37      	ldr	r3, [pc, #220]	; (8003a04 <HAL_RCC_OscConfig+0x424>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a36      	ldr	r2, [pc, #216]	; (8003a04 <HAL_RCC_OscConfig+0x424>)
 800392a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003930:	f7fd faa6 	bl	8000e80 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003938:	f7fd faa2 	bl	8000e80 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e168      	b.n	8003c1c <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394a:	4b2e      	ldr	r3, [pc, #184]	; (8003a04 <HAL_RCC_OscConfig+0x424>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d106      	bne.n	800396c <HAL_RCC_OscConfig+0x38c>
 800395e:	4b26      	ldr	r3, [pc, #152]	; (80039f8 <HAL_RCC_OscConfig+0x418>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003962:	4a25      	ldr	r2, [pc, #148]	; (80039f8 <HAL_RCC_OscConfig+0x418>)
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	6713      	str	r3, [r2, #112]	; 0x70
 800396a:	e01c      	b.n	80039a6 <HAL_RCC_OscConfig+0x3c6>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b05      	cmp	r3, #5
 8003972:	d10c      	bne.n	800398e <HAL_RCC_OscConfig+0x3ae>
 8003974:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <HAL_RCC_OscConfig+0x418>)
 8003976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003978:	4a1f      	ldr	r2, [pc, #124]	; (80039f8 <HAL_RCC_OscConfig+0x418>)
 800397a:	f043 0304 	orr.w	r3, r3, #4
 800397e:	6713      	str	r3, [r2, #112]	; 0x70
 8003980:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <HAL_RCC_OscConfig+0x418>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	4a1c      	ldr	r2, [pc, #112]	; (80039f8 <HAL_RCC_OscConfig+0x418>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	6713      	str	r3, [r2, #112]	; 0x70
 800398c:	e00b      	b.n	80039a6 <HAL_RCC_OscConfig+0x3c6>
 800398e:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <HAL_RCC_OscConfig+0x418>)
 8003990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003992:	4a19      	ldr	r2, [pc, #100]	; (80039f8 <HAL_RCC_OscConfig+0x418>)
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	6713      	str	r3, [r2, #112]	; 0x70
 800399a:	4b17      	ldr	r3, [pc, #92]	; (80039f8 <HAL_RCC_OscConfig+0x418>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	4a16      	ldr	r2, [pc, #88]	; (80039f8 <HAL_RCC_OscConfig+0x418>)
 80039a0:	f023 0304 	bic.w	r3, r3, #4
 80039a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d015      	beq.n	80039da <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ae:	f7fd fa67 	bl	8000e80 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b4:	e00a      	b.n	80039cc <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7fd fa63 	bl	8000e80 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e127      	b.n	8003c1c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <HAL_RCC_OscConfig+0x418>)
 80039ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0ee      	beq.n	80039b6 <HAL_RCC_OscConfig+0x3d6>
 80039d8:	e01c      	b.n	8003a14 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039da:	f7fd fa51 	bl	8000e80 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e0:	e012      	b.n	8003a08 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e2:	f7fd fa4d 	bl	8000e80 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d909      	bls.n	8003a08 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e111      	b.n	8003c1c <HAL_RCC_OscConfig+0x63c>
 80039f8:	40023800 	.word	0x40023800
 80039fc:	42470e80 	.word	0x42470e80
 8003a00:	0800db7c 	.word	0x0800db7c
 8003a04:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a08:	4b86      	ldr	r3, [pc, #536]	; (8003c24 <HAL_RCC_OscConfig+0x644>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e6      	bne.n	80039e2 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d105      	bne.n	8003a26 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1a:	4b82      	ldr	r3, [pc, #520]	; (8003c24 <HAL_RCC_OscConfig+0x644>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	4a81      	ldr	r2, [pc, #516]	; (8003c24 <HAL_RCC_OscConfig+0x644>)
 8003a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00c      	beq.n	8003a48 <HAL_RCC_OscConfig+0x468>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d008      	beq.n	8003a48 <HAL_RCC_OscConfig+0x468>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d004      	beq.n	8003a48 <HAL_RCC_OscConfig+0x468>
 8003a3e:	f240 11cd 	movw	r1, #461	; 0x1cd
 8003a42:	4879      	ldr	r0, [pc, #484]	; (8003c28 <HAL_RCC_OscConfig+0x648>)
 8003a44:	f7fc ffb8 	bl	80009b8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 80e4 	beq.w	8003c1a <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a52:	4b74      	ldr	r3, [pc, #464]	; (8003c24 <HAL_RCC_OscConfig+0x644>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	f000 80a5 	beq.w	8003baa <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	f040 8089 	bne.w	8003b7c <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d009      	beq.n	8003a86 <HAL_RCC_OscConfig+0x4a6>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a7a:	d004      	beq.n	8003a86 <HAL_RCC_OscConfig+0x4a6>
 8003a7c:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8003a80:	4869      	ldr	r0, [pc, #420]	; (8003c28 <HAL_RCC_OscConfig+0x648>)
 8003a82:	f7fc ff99 	bl	80009b8 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	2b3f      	cmp	r3, #63	; 0x3f
 8003a8c:	d904      	bls.n	8003a98 <HAL_RCC_OscConfig+0x4b8>
 8003a8e:	f240 11d7 	movw	r1, #471	; 0x1d7
 8003a92:	4865      	ldr	r0, [pc, #404]	; (8003c28 <HAL_RCC_OscConfig+0x648>)
 8003a94:	f7fc ff90 	bl	80009b8 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	2b31      	cmp	r3, #49	; 0x31
 8003a9e:	d904      	bls.n	8003aaa <HAL_RCC_OscConfig+0x4ca>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003aa8:	d904      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x4d4>
 8003aaa:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8003aae:	485e      	ldr	r0, [pc, #376]	; (8003c28 <HAL_RCC_OscConfig+0x648>)
 8003ab0:	f7fc ff82 	bl	80009b8 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d010      	beq.n	8003ade <HAL_RCC_OscConfig+0x4fe>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d00c      	beq.n	8003ade <HAL_RCC_OscConfig+0x4fe>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	2b06      	cmp	r3, #6
 8003aca:	d008      	beq.n	8003ade <HAL_RCC_OscConfig+0x4fe>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d004      	beq.n	8003ade <HAL_RCC_OscConfig+0x4fe>
 8003ad4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003ad8:	4853      	ldr	r0, [pc, #332]	; (8003c28 <HAL_RCC_OscConfig+0x648>)
 8003ada:	f7fc ff6d 	bl	80009b8 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d903      	bls.n	8003aee <HAL_RCC_OscConfig+0x50e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	2b0f      	cmp	r3, #15
 8003aec:	d904      	bls.n	8003af8 <HAL_RCC_OscConfig+0x518>
 8003aee:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8003af2:	484d      	ldr	r0, [pc, #308]	; (8003c28 <HAL_RCC_OscConfig+0x648>)
 8003af4:	f7fc ff60 	bl	80009b8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af8:	4b4c      	ldr	r3, [pc, #304]	; (8003c2c <HAL_RCC_OscConfig+0x64c>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afe:	f7fd f9bf 	bl	8000e80 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b06:	f7fd f9bb 	bl	8000e80 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e081      	b.n	8003c1c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b18:	4b42      	ldr	r3, [pc, #264]	; (8003c24 <HAL_RCC_OscConfig+0x644>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1f0      	bne.n	8003b06 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	019b      	lsls	r3, r3, #6
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3a:	085b      	lsrs	r3, r3, #1
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	041b      	lsls	r3, r3, #16
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	061b      	lsls	r3, r3, #24
 8003b48:	4936      	ldr	r1, [pc, #216]	; (8003c24 <HAL_RCC_OscConfig+0x644>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b4e:	4b37      	ldr	r3, [pc, #220]	; (8003c2c <HAL_RCC_OscConfig+0x64c>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fd f994 	bl	8000e80 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b5c:	f7fd f990 	bl	8000e80 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e056      	b.n	8003c1c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6e:	4b2d      	ldr	r3, [pc, #180]	; (8003c24 <HAL_RCC_OscConfig+0x644>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x57c>
 8003b7a:	e04e      	b.n	8003c1a <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7c:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <HAL_RCC_OscConfig+0x64c>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b82:	f7fd f97d 	bl	8000e80 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b8a:	f7fd f979 	bl	8000e80 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e03f      	b.n	8003c1c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9c:	4b21      	ldr	r3, [pc, #132]	; (8003c24 <HAL_RCC_OscConfig+0x644>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f0      	bne.n	8003b8a <HAL_RCC_OscConfig+0x5aa>
 8003ba8:	e037      	b.n	8003c1a <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e032      	b.n	8003c1c <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bb6:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <HAL_RCC_OscConfig+0x644>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d028      	beq.n	8003c16 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d121      	bne.n	8003c16 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d11a      	bne.n	8003c16 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003be6:	4013      	ands	r3, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d111      	bne.n	8003c16 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d107      	bne.n	8003c16 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d001      	beq.n	8003c1a <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40023800 	.word	0x40023800
 8003c28:	0800db7c 	.word	0x0800db7c
 8003c2c:	42470060 	.word	0x42470060

08003c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e174      	b.n	8003f2e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x24>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b0f      	cmp	r3, #15
 8003c52:	d904      	bls.n	8003c5e <HAL_RCC_ClockConfig+0x2e>
 8003c54:	f240 215a 	movw	r1, #602	; 0x25a
 8003c58:	487b      	ldr	r0, [pc, #492]	; (8003e48 <HAL_RCC_ClockConfig+0x218>)
 8003c5a:	f7fc fead 	bl	80009b8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d019      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x68>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d016      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x68>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d013      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x68>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d010      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x68>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d00d      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x68>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b05      	cmp	r3, #5
 8003c80:	d00a      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x68>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b06      	cmp	r3, #6
 8003c86:	d007      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x68>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b07      	cmp	r3, #7
 8003c8c:	d004      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x68>
 8003c8e:	f240 215b 	movw	r1, #603	; 0x25b
 8003c92:	486d      	ldr	r0, [pc, #436]	; (8003e48 <HAL_RCC_ClockConfig+0x218>)
 8003c94:	f7fc fe90 	bl	80009b8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c98:	4b6c      	ldr	r3, [pc, #432]	; (8003e4c <HAL_RCC_ClockConfig+0x21c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d90c      	bls.n	8003cc0 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca6:	4b69      	ldr	r3, [pc, #420]	; (8003e4c <HAL_RCC_ClockConfig+0x21c>)
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cae:	4b67      	ldr	r3, [pc, #412]	; (8003e4c <HAL_RCC_ClockConfig+0x21c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d001      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e136      	b.n	8003f2e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d049      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd8:	4b5d      	ldr	r3, [pc, #372]	; (8003e50 <HAL_RCC_ClockConfig+0x220>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	4a5c      	ldr	r2, [pc, #368]	; (8003e50 <HAL_RCC_ClockConfig+0x220>)
 8003cde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cf0:	4b57      	ldr	r3, [pc, #348]	; (8003e50 <HAL_RCC_ClockConfig+0x220>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4a56      	ldr	r2, [pc, #344]	; (8003e50 <HAL_RCC_ClockConfig+0x220>)
 8003cf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d024      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x11e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b80      	cmp	r3, #128	; 0x80
 8003d0a:	d020      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x11e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	2b90      	cmp	r3, #144	; 0x90
 8003d12:	d01c      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x11e>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2ba0      	cmp	r3, #160	; 0xa0
 8003d1a:	d018      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x11e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2bb0      	cmp	r3, #176	; 0xb0
 8003d22:	d014      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x11e>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2bc0      	cmp	r3, #192	; 0xc0
 8003d2a:	d010      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x11e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2bd0      	cmp	r3, #208	; 0xd0
 8003d32:	d00c      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x11e>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2be0      	cmp	r3, #224	; 0xe0
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x11e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2bf0      	cmp	r3, #240	; 0xf0
 8003d42:	d004      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x11e>
 8003d44:	f240 217e 	movw	r1, #638	; 0x27e
 8003d48:	483f      	ldr	r0, [pc, #252]	; (8003e48 <HAL_RCC_ClockConfig+0x218>)
 8003d4a:	f7fc fe35 	bl	80009b8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d4e:	4b40      	ldr	r3, [pc, #256]	; (8003e50 <HAL_RCC_ClockConfig+0x220>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	493d      	ldr	r1, [pc, #244]	; (8003e50 <HAL_RCC_ClockConfig+0x220>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d059      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d010      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x166>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d00c      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x166>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d008      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x166>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d004      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x166>
 8003d8c:	f240 2185 	movw	r1, #645	; 0x285
 8003d90:	482d      	ldr	r0, [pc, #180]	; (8003e48 <HAL_RCC_ClockConfig+0x218>)
 8003d92:	f7fc fe11 	bl	80009b8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d107      	bne.n	8003dae <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9e:	4b2c      	ldr	r3, [pc, #176]	; (8003e50 <HAL_RCC_ClockConfig+0x220>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d119      	bne.n	8003dde <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e0bf      	b.n	8003f2e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d003      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d107      	bne.n	8003dce <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dbe:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <HAL_RCC_ClockConfig+0x220>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e0af      	b.n	8003f2e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_RCC_ClockConfig+0x220>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e0a7      	b.n	8003f2e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dde:	4b1c      	ldr	r3, [pc, #112]	; (8003e50 <HAL_RCC_ClockConfig+0x220>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f023 0203 	bic.w	r2, r3, #3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	4919      	ldr	r1, [pc, #100]	; (8003e50 <HAL_RCC_ClockConfig+0x220>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003df0:	f7fd f846 	bl	8000e80 <HAL_GetTick>
 8003df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df6:	e00a      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df8:	f7fd f842 	bl	8000e80 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e08f      	b.n	8003f2e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0e:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <HAL_RCC_ClockConfig+0x220>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 020c 	and.w	r2, r3, #12
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d1eb      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e20:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <HAL_RCC_ClockConfig+0x21c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d212      	bcs.n	8003e54 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2e:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <HAL_RCC_ClockConfig+0x21c>)
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e36:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <HAL_RCC_ClockConfig+0x21c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d007      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e072      	b.n	8003f2e <HAL_RCC_ClockConfig+0x2fe>
 8003e48:	0800db7c 	.word	0x0800db7c
 8003e4c:	40023c00 	.word	0x40023c00
 8003e50:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d025      	beq.n	8003eac <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d018      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x26a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e70:	d013      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x26a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e7a:	d00e      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x26a>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003e84:	d009      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x26a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003e8e:	d004      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x26a>
 8003e90:	f240 21c3 	movw	r1, #707	; 0x2c3
 8003e94:	4828      	ldr	r0, [pc, #160]	; (8003f38 <HAL_RCC_ClockConfig+0x308>)
 8003e96:	f7fc fd8f 	bl	80009b8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e9a:	4b28      	ldr	r3, [pc, #160]	; (8003f3c <HAL_RCC_ClockConfig+0x30c>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	4925      	ldr	r1, [pc, #148]	; (8003f3c <HAL_RCC_ClockConfig+0x30c>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d026      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d018      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x2c2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec8:	d013      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x2c2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x2c2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003edc:	d009      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x2c2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003ee6:	d004      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x2c2>
 8003ee8:	f240 21ca 	movw	r1, #714	; 0x2ca
 8003eec:	4812      	ldr	r0, [pc, #72]	; (8003f38 <HAL_RCC_ClockConfig+0x308>)
 8003eee:	f7fc fd63 	bl	80009b8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ef2:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <HAL_RCC_ClockConfig+0x30c>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	490e      	ldr	r1, [pc, #56]	; (8003f3c <HAL_RCC_ClockConfig+0x30c>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f06:	f000 f821 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <HAL_RCC_ClockConfig+0x30c>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	490a      	ldr	r1, [pc, #40]	; (8003f40 <HAL_RCC_ClockConfig+0x310>)
 8003f18:	5ccb      	ldrb	r3, [r1, r3]
 8003f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1e:	4a09      	ldr	r2, [pc, #36]	; (8003f44 <HAL_RCC_ClockConfig+0x314>)
 8003f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f22:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <HAL_RCC_ClockConfig+0x318>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fc fe14 	bl	8000b54 <HAL_InitTick>

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	0800db7c 	.word	0x0800db7c
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	0800dd68 	.word	0x0800dd68
 8003f44:	20000000 	.word	0x20000000
 8003f48:	20000004 	.word	0x20000004

08003f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f50:	b090      	sub	sp, #64	; 0x40
 8003f52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	637b      	str	r3, [r7, #52]	; 0x34
 8003f58:	2300      	movs	r3, #0
 8003f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f64:	4b59      	ldr	r3, [pc, #356]	; (80040cc <HAL_RCC_GetSysClockFreq+0x180>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 030c 	and.w	r3, r3, #12
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d00d      	beq.n	8003f8c <HAL_RCC_GetSysClockFreq+0x40>
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	f200 80a1 	bhi.w	80040b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <HAL_RCC_GetSysClockFreq+0x34>
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d003      	beq.n	8003f86 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f7e:	e09b      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f80:	4b53      	ldr	r3, [pc, #332]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f82:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003f84:	e09b      	b.n	80040be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f86:	4b53      	ldr	r3, [pc, #332]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f8a:	e098      	b.n	80040be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f8c:	4b4f      	ldr	r3, [pc, #316]	; (80040cc <HAL_RCC_GetSysClockFreq+0x180>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f94:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f96:	4b4d      	ldr	r3, [pc, #308]	; (80040cc <HAL_RCC_GetSysClockFreq+0x180>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d028      	beq.n	8003ff4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fa2:	4b4a      	ldr	r3, [pc, #296]	; (80040cc <HAL_RCC_GetSysClockFreq+0x180>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	099b      	lsrs	r3, r3, #6
 8003fa8:	2200      	movs	r2, #0
 8003faa:	623b      	str	r3, [r7, #32]
 8003fac:	627a      	str	r2, [r7, #36]	; 0x24
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4b47      	ldr	r3, [pc, #284]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fb8:	fb03 f201 	mul.w	r2, r3, r1
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	fb00 f303 	mul.w	r3, r0, r3
 8003fc2:	4413      	add	r3, r2
 8003fc4:	4a43      	ldr	r2, [pc, #268]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fc6:	fba0 1202 	umull	r1, r2, r0, r2
 8003fca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fcc:	460a      	mov	r2, r1
 8003fce:	62ba      	str	r2, [r7, #40]	; 0x28
 8003fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd2:	4413      	add	r3, r2
 8003fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd8:	2200      	movs	r2, #0
 8003fda:	61bb      	str	r3, [r7, #24]
 8003fdc:	61fa      	str	r2, [r7, #28]
 8003fde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fe2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003fe6:	f7fc f94b 	bl	8000280 <__aeabi_uldivmod>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4613      	mov	r3, r2
 8003ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ff2:	e053      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ff4:	4b35      	ldr	r3, [pc, #212]	; (80040cc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	099b      	lsrs	r3, r3, #6
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	617a      	str	r2, [r7, #20]
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004006:	f04f 0b00 	mov.w	fp, #0
 800400a:	4652      	mov	r2, sl
 800400c:	465b      	mov	r3, fp
 800400e:	f04f 0000 	mov.w	r0, #0
 8004012:	f04f 0100 	mov.w	r1, #0
 8004016:	0159      	lsls	r1, r3, #5
 8004018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800401c:	0150      	lsls	r0, r2, #5
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	ebb2 080a 	subs.w	r8, r2, sl
 8004026:	eb63 090b 	sbc.w	r9, r3, fp
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004036:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800403a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800403e:	ebb2 0408 	subs.w	r4, r2, r8
 8004042:	eb63 0509 	sbc.w	r5, r3, r9
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	00eb      	lsls	r3, r5, #3
 8004050:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004054:	00e2      	lsls	r2, r4, #3
 8004056:	4614      	mov	r4, r2
 8004058:	461d      	mov	r5, r3
 800405a:	eb14 030a 	adds.w	r3, r4, sl
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	eb45 030b 	adc.w	r3, r5, fp
 8004064:	607b      	str	r3, [r7, #4]
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004072:	4629      	mov	r1, r5
 8004074:	028b      	lsls	r3, r1, #10
 8004076:	4621      	mov	r1, r4
 8004078:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800407c:	4621      	mov	r1, r4
 800407e:	028a      	lsls	r2, r1, #10
 8004080:	4610      	mov	r0, r2
 8004082:	4619      	mov	r1, r3
 8004084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004086:	2200      	movs	r2, #0
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	60fa      	str	r2, [r7, #12]
 800408c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004090:	f7fc f8f6 	bl	8000280 <__aeabi_uldivmod>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4613      	mov	r3, r2
 800409a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800409c:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <HAL_RCC_GetSysClockFreq+0x180>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	0c1b      	lsrs	r3, r3, #16
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	3301      	adds	r3, #1
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80040ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040b6:	e002      	b.n	80040be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80040ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3740      	adds	r7, #64	; 0x40
 80040c4:	46bd      	mov	sp, r7
 80040c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800
 80040d0:	00f42400 	.word	0x00f42400
 80040d4:	017d7840 	.word	0x017d7840

080040d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <HAL_RCC_GetHCLKFreq+0x14>)
 80040de:	681b      	ldr	r3, [r3, #0]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	20000000 	.word	0x20000000

080040f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040f4:	f7ff fff0 	bl	80040d8 <HAL_RCC_GetHCLKFreq>
 80040f8:	4602      	mov	r2, r0
 80040fa:	4b05      	ldr	r3, [pc, #20]	; (8004110 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	0b5b      	lsrs	r3, r3, #13
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	4903      	ldr	r1, [pc, #12]	; (8004114 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004106:	5ccb      	ldrb	r3, [r1, r3]
 8004108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800410c:	4618      	mov	r0, r3
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40023800 	.word	0x40023800
 8004114:	0800dd78 	.word	0x0800dd78

08004118 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	220f      	movs	r2, #15
 8004126:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004128:	4b12      	ldr	r3, [pc, #72]	; (8004174 <HAL_RCC_GetClockConfig+0x5c>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 0203 	and.w	r2, r3, #3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004134:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <HAL_RCC_GetClockConfig+0x5c>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004140:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <HAL_RCC_GetClockConfig+0x5c>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800414c:	4b09      	ldr	r3, [pc, #36]	; (8004174 <HAL_RCC_GetClockConfig+0x5c>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	08db      	lsrs	r3, r3, #3
 8004152:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800415a:	4b07      	ldr	r3, [pc, #28]	; (8004178 <HAL_RCC_GetClockConfig+0x60>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0207 	and.w	r2, r3, #7
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	601a      	str	r2, [r3, #0]
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40023800 	.word	0x40023800
 8004178:	40023c00 	.word	0x40023c00

0800417c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b0f      	cmp	r3, #15
 800419a:	d904      	bls.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 800419c:	f640 11d7 	movw	r1, #2519	; 0x9d7
 80041a0:	482c      	ldr	r0, [pc, #176]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 80041a2:	f7fc fc09 	bl	80009b8 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d105      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d056      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d903      	bls.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b07      	cmp	r3, #7
 80041cc:	d904      	bls.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80041ce:	f640 11de 	movw	r1, #2526	; 0x9de
 80041d2:	4820      	ldr	r0, [pc, #128]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 80041d4:	f7fc fbf0 	bl	80009b8 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b31      	cmp	r3, #49	; 0x31
 80041de:	d904      	bls.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80041e8:	d904      	bls.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80041ea:	f640 11df 	movw	r1, #2527	; 0x9df
 80041ee:	4819      	ldr	r0, [pc, #100]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 80041f0:	f7fc fbe2 	bl	80009b8 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041f4:	4b18      	ldr	r3, [pc, #96]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdc>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041fa:	f7fc fe41 	bl	8000e80 <HAL_GetTick>
 80041fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004200:	e008      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004202:	f7fc fe3d 	bl	8000e80 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x98>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e1b0      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004214:	4b11      	ldr	r3, [pc, #68]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xe0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1f0      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	019a      	lsls	r2, r3, #6
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	071b      	lsls	r3, r3, #28
 800422c:	490b      	ldr	r1, [pc, #44]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0xe0>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004234:	4b08      	ldr	r3, [pc, #32]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdc>)
 8004236:	2201      	movs	r2, #1
 8004238:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800423a:	f7fc fe21 	bl	8000e80 <HAL_GetTick>
 800423e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004240:	e00e      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004242:	f7fc fe1d 	bl	8000e80 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d907      	bls.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e190      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004254:	0800dbb4 	.word	0x0800dbb4
 8004258:	42470068 	.word	0x42470068
 800425c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004260:	4b88      	ldr	r3, [pc, #544]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0ea      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8173 	beq.w	8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004282:	f000 80a6 	beq.w	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800428e:	f000 80a0 	beq.w	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	4a7c      	ldr	r2, [pc, #496]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	f000 809a 	beq.w	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	4a7a      	ldr	r2, [pc, #488]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	f000 8094 	beq.w	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	4a78      	ldr	r2, [pc, #480]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	f000 808e 	beq.w	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	4a76      	ldr	r2, [pc, #472]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	f000 8088 	beq.w	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	4a74      	ldr	r2, [pc, #464]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	f000 8082 	beq.w	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	4a72      	ldr	r2, [pc, #456]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d07c      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4a70      	ldr	r2, [pc, #448]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d077      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	4a6f      	ldr	r2, [pc, #444]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d072      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	4a6d      	ldr	r2, [pc, #436]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d06d      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	4a6c      	ldr	r2, [pc, #432]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d068      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4a6a      	ldr	r2, [pc, #424]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d063      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	4a69      	ldr	r2, [pc, #420]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d05e      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4a67      	ldr	r2, [pc, #412]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d059      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	4a66      	ldr	r2, [pc, #408]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d054      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4a64      	ldr	r2, [pc, #400]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d04f      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	4a63      	ldr	r2, [pc, #396]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d04a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	4a61      	ldr	r2, [pc, #388]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d045      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	4a60      	ldr	r2, [pc, #384]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d040      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4a5e      	ldr	r2, [pc, #376]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d03b      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	4a5d      	ldr	r2, [pc, #372]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d036      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4a5b      	ldr	r2, [pc, #364]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d031      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	4a5a      	ldr	r2, [pc, #360]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d02c      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	4a58      	ldr	r2, [pc, #352]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d027      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	4a57      	ldr	r2, [pc, #348]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d022      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4a55      	ldr	r2, [pc, #340]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d01d      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	4a54      	ldr	r2, [pc, #336]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d018      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4a52      	ldr	r2, [pc, #328]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	4a51      	ldr	r2, [pc, #324]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00e      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4a4f      	ldr	r2, [pc, #316]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d009      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	4a4e      	ldr	r2, [pc, #312]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x380>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d004      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80043c8:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 80043cc:	484c      	ldr	r0, [pc, #304]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80043ce:	f7fc faf3 	bl	80009b8 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	4b2b      	ldr	r3, [pc, #172]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	4a2a      	ldr	r2, [pc, #168]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e0:	6413      	str	r3, [r2, #64]	; 0x40
 80043e2:	4b28      	ldr	r3, [pc, #160]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043ee:	4b45      	ldr	r3, [pc, #276]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a44      	ldr	r2, [pc, #272]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80043f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043fa:	f7fc fd41 	bl	8000e80 <HAL_GetTick>
 80043fe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004400:	e008      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004402:	f7fc fd3d 	bl	8000e80 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x298>
      {
        return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e0b0      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004414:	4b3b      	ldr	r3, [pc, #236]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0f0      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x286>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004420:	4b18      	ldr	r3, [pc, #96]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004428:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d073      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	429a      	cmp	r2, r3
 800443c:	d06c      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800443e:	4b11      	ldr	r3, [pc, #68]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004446:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004448:	4b2f      	ldr	r3, [pc, #188]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800444e:	4b2e      	ldr	r3, [pc, #184]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004454:	4a0b      	ldr	r2, [pc, #44]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800445a:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b01      	cmp	r3, #1
 8004464:	d158      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004466:	f7fc fd0b 	bl	8000e80 <HAL_GetTick>
 800446a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446c:	e04e      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x390>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800446e:	f7fc fd07 	bl	8000e80 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f241 3288 	movw	r2, #5000	; 0x1388
 800447c:	4293      	cmp	r3, r2
 800447e:	d945      	bls.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x390>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e078      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004484:	40023800 	.word	0x40023800
 8004488:	00020300 	.word	0x00020300
 800448c:	00030300 	.word	0x00030300
 8004490:	00040300 	.word	0x00040300
 8004494:	00050300 	.word	0x00050300
 8004498:	00060300 	.word	0x00060300
 800449c:	00070300 	.word	0x00070300
 80044a0:	00080300 	.word	0x00080300
 80044a4:	00090300 	.word	0x00090300
 80044a8:	000a0300 	.word	0x000a0300
 80044ac:	000b0300 	.word	0x000b0300
 80044b0:	000c0300 	.word	0x000c0300
 80044b4:	000d0300 	.word	0x000d0300
 80044b8:	000e0300 	.word	0x000e0300
 80044bc:	000f0300 	.word	0x000f0300
 80044c0:	00100300 	.word	0x00100300
 80044c4:	00110300 	.word	0x00110300
 80044c8:	00120300 	.word	0x00120300
 80044cc:	00130300 	.word	0x00130300
 80044d0:	00140300 	.word	0x00140300
 80044d4:	00150300 	.word	0x00150300
 80044d8:	00160300 	.word	0x00160300
 80044dc:	00170300 	.word	0x00170300
 80044e0:	00180300 	.word	0x00180300
 80044e4:	00190300 	.word	0x00190300
 80044e8:	001a0300 	.word	0x001a0300
 80044ec:	001b0300 	.word	0x001b0300
 80044f0:	001c0300 	.word	0x001c0300
 80044f4:	001d0300 	.word	0x001d0300
 80044f8:	001e0300 	.word	0x001e0300
 80044fc:	001f0300 	.word	0x001f0300
 8004500:	0800dbb4 	.word	0x0800dbb4
 8004504:	40007000 	.word	0x40007000
 8004508:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450c:	4b1c      	ldr	r3, [pc, #112]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0aa      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004520:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004524:	d10d      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8004526:	4b16      	ldr	r3, [pc, #88]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800453a:	4911      	ldr	r1, [pc, #68]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 800453c:	4313      	orrs	r3, r2
 800453e:	608b      	str	r3, [r1, #8]
 8004540:	e005      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8004542:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	4a0e      	ldr	r2, [pc, #56]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8004548:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800454c:	6093      	str	r3, [r2, #8]
 800454e:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8004550:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800455a:	4909      	ldr	r1, [pc, #36]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 800455c:	4313      	orrs	r3, r2
 800455e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	7c1a      	ldrb	r2, [r3, #16]
 8004570:	4b04      	ldr	r3, [pc, #16]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8004572:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40023800 	.word	0x40023800
 8004584:	424711e0 	.word	0x424711e0

08004588 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e0c4      	b.n	8004728 <HAL_RTC_Init+0x1a0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a63      	ldr	r2, [pc, #396]	; (8004730 <HAL_RTC_Init+0x1a8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d004      	beq.n	80045b2 <HAL_RTC_Init+0x2a>
 80045a8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80045ac:	4861      	ldr	r0, [pc, #388]	; (8004734 <HAL_RTC_Init+0x1ac>)
 80045ae:	f7fc fa03 	bl	80009b8 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b40      	cmp	r3, #64	; 0x40
 80045b8:	d008      	beq.n	80045cc <HAL_RTC_Init+0x44>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d004      	beq.n	80045cc <HAL_RTC_Init+0x44>
 80045c2:	f240 1105 	movw	r1, #261	; 0x105
 80045c6:	485b      	ldr	r0, [pc, #364]	; (8004734 <HAL_RTC_Init+0x1ac>)
 80045c8:	f7fc f9f6 	bl	80009b8 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b7f      	cmp	r3, #127	; 0x7f
 80045d2:	d904      	bls.n	80045de <HAL_RTC_Init+0x56>
 80045d4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80045d8:	4856      	ldr	r0, [pc, #344]	; (8004734 <HAL_RTC_Init+0x1ac>)
 80045da:	f7fc f9ed 	bl	80009b8 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e6:	d304      	bcc.n	80045f2 <HAL_RTC_Init+0x6a>
 80045e8:	f240 1107 	movw	r1, #263	; 0x107
 80045ec:	4851      	ldr	r0, [pc, #324]	; (8004734 <HAL_RTC_Init+0x1ac>)
 80045ee:	f7fc f9e3 	bl	80009b8 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d013      	beq.n	8004622 <HAL_RTC_Init+0x9a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004602:	d00e      	beq.n	8004622 <HAL_RTC_Init+0x9a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800460c:	d009      	beq.n	8004622 <HAL_RTC_Init+0x9a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004616:	d004      	beq.n	8004622 <HAL_RTC_Init+0x9a>
 8004618:	f44f 7184 	mov.w	r1, #264	; 0x108
 800461c:	4845      	ldr	r0, [pc, #276]	; (8004734 <HAL_RTC_Init+0x1ac>)
 800461e:	f7fc f9cb 	bl	80009b8 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <HAL_RTC_Init+0xb6>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004632:	d004      	beq.n	800463e <HAL_RTC_Init+0xb6>
 8004634:	f240 1109 	movw	r1, #265	; 0x109
 8004638:	483e      	ldr	r0, [pc, #248]	; (8004734 <HAL_RTC_Init+0x1ac>)
 800463a:	f7fc f9bd 	bl	80009b8 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d009      	beq.n	800465a <HAL_RTC_Init+0xd2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800464e:	d004      	beq.n	800465a <HAL_RTC_Init+0xd2>
 8004650:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8004654:	4837      	ldr	r0, [pc, #220]	; (8004734 <HAL_RTC_Init+0x1ac>)
 8004656:	f7fc f9af 	bl	80009b8 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	7f5b      	ldrb	r3, [r3, #29]
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d105      	bne.n	8004670 <HAL_RTC_Init+0xe8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fc fa46 	bl	8000afc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	22ca      	movs	r2, #202	; 0xca
 800467c:	625a      	str	r2, [r3, #36]	; 0x24
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2253      	movs	r2, #83	; 0x53
 8004684:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fad2 	bl	8004c30 <RTC_EnterInitMode>
 800468c:	4603      	mov	r3, r0
 800468e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d12c      	bne.n	80046f0 <HAL_RTC_Init+0x168>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6812      	ldr	r2, [r2, #0]
 80046a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80046a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046a8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6899      	ldr	r1, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	68d2      	ldr	r2, [r2, #12]
 80046d0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6919      	ldr	r1, [r3, #16]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	041a      	lsls	r2, r3, #16
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fad9 	bl	8004c9e <RTC_ExitInitMode>
 80046ec:	4603      	mov	r3, r0
 80046ee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d113      	bne.n	800471e <HAL_RTC_Init+0x196>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699a      	ldr	r2, [r3, #24]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	22ff      	movs	r2, #255	; 0xff
 8004724:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004726:	7bfb      	ldrb	r3, [r7, #15]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40002800 	.word	0x40002800
 8004734:	0800dbf0 	.word	0x0800dbf0

08004738 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004738:	b590      	push	{r4, r7, lr}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d007      	beq.n	800475e <HAL_RTC_SetTime+0x26>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d004      	beq.n	800475e <HAL_RTC_SetTime+0x26>
 8004754:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8004758:	489a      	ldr	r0, [pc, #616]	; (80049c4 <HAL_RTC_SetTime+0x28c>)
 800475a:	f7fc f92d 	bl	80009b8 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004766:	d00d      	beq.n	8004784 <HAL_RTC_SetTime+0x4c>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004770:	d008      	beq.n	8004784 <HAL_RTC_SetTime+0x4c>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d004      	beq.n	8004784 <HAL_RTC_SetTime+0x4c>
 800477a:	f240 21b5 	movw	r1, #693	; 0x2b5
 800477e:	4891      	ldr	r0, [pc, #580]	; (80049c4 <HAL_RTC_SetTime+0x28c>)
 8004780:	f7fc f91a 	bl	80009b8 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d009      	beq.n	80047a0 <HAL_RTC_SetTime+0x68>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004794:	d004      	beq.n	80047a0 <HAL_RTC_SetTime+0x68>
 8004796:	f240 21b6 	movw	r1, #694	; 0x2b6
 800479a:	488a      	ldr	r0, [pc, #552]	; (80049c4 <HAL_RTC_SetTime+0x28c>)
 800479c:	f7fc f90c 	bl	80009b8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	7f1b      	ldrb	r3, [r3, #28]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_RTC_SetTime+0x74>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e107      	b.n	80049bc <HAL_RTC_SetTime+0x284>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2202      	movs	r2, #2
 80047b6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d15c      	bne.n	8004878 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01a      	beq.n	8004802 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <HAL_RTC_SetTime+0xa4>
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b0c      	cmp	r3, #12
 80047da:	d904      	bls.n	80047e6 <HAL_RTC_SetTime+0xae>
 80047dc:	f240 21c1 	movw	r1, #705	; 0x2c1
 80047e0:	4878      	ldr	r0, [pc, #480]	; (80049c4 <HAL_RTC_SetTime+0x28c>)
 80047e2:	f7fc f8e9 	bl	80009b8 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	78db      	ldrb	r3, [r3, #3]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d015      	beq.n	800481a <HAL_RTC_SetTime+0xe2>
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	78db      	ldrb	r3, [r3, #3]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d011      	beq.n	800481a <HAL_RTC_SetTime+0xe2>
 80047f6:	f240 21c2 	movw	r1, #706	; 0x2c2
 80047fa:	4872      	ldr	r0, [pc, #456]	; (80049c4 <HAL_RTC_SetTime+0x28c>)
 80047fc:	f7fc f8dc 	bl	80009b8 <assert_failed>
 8004800:	e00b      	b.n	800481a <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2200      	movs	r2, #0
 8004806:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b17      	cmp	r3, #23
 800480e:	d904      	bls.n	800481a <HAL_RTC_SetTime+0xe2>
 8004810:	f240 21c7 	movw	r1, #711	; 0x2c7
 8004814:	486b      	ldr	r0, [pc, #428]	; (80049c4 <HAL_RTC_SetTime+0x28c>)
 8004816:	f7fc f8cf 	bl	80009b8 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	785b      	ldrb	r3, [r3, #1]
 800481e:	2b3b      	cmp	r3, #59	; 0x3b
 8004820:	d904      	bls.n	800482c <HAL_RTC_SetTime+0xf4>
 8004822:	f240 21c9 	movw	r1, #713	; 0x2c9
 8004826:	4867      	ldr	r0, [pc, #412]	; (80049c4 <HAL_RTC_SetTime+0x28c>)
 8004828:	f7fc f8c6 	bl	80009b8 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	789b      	ldrb	r3, [r3, #2]
 8004830:	2b3b      	cmp	r3, #59	; 0x3b
 8004832:	d904      	bls.n	800483e <HAL_RTC_SetTime+0x106>
 8004834:	f240 21ca 	movw	r1, #714	; 0x2ca
 8004838:	4862      	ldr	r0, [pc, #392]	; (80049c4 <HAL_RTC_SetTime+0x28c>)
 800483a:	f7fc f8bd 	bl	80009b8 <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f000 fa50 	bl	8004ce8 <RTC_ByteToBcd2>
 8004848:	4603      	mov	r3, r0
 800484a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	785b      	ldrb	r3, [r3, #1]
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fa49 	bl	8004ce8 <RTC_ByteToBcd2>
 8004856:	4603      	mov	r3, r0
 8004858:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800485a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	789b      	ldrb	r3, [r3, #2]
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fa41 	bl	8004ce8 <RTC_ByteToBcd2>
 8004866:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004868:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	78db      	ldrb	r3, [r3, #3]
 8004870:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	e062      	b.n	800493e <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	d022      	beq.n	80048cc <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fa49 	bl	8004d22 <RTC_Bcd2ToByte>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d007      	beq.n	80048a6 <HAL_RTC_SetTime+0x16e>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fa41 	bl	8004d22 <RTC_Bcd2ToByte>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b0c      	cmp	r3, #12
 80048a4:	d904      	bls.n	80048b0 <HAL_RTC_SetTime+0x178>
 80048a6:	f240 21d5 	movw	r1, #725	; 0x2d5
 80048aa:	4846      	ldr	r0, [pc, #280]	; (80049c4 <HAL_RTC_SetTime+0x28c>)
 80048ac:	f7fc f884 	bl	80009b8 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	78db      	ldrb	r3, [r3, #3]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d019      	beq.n	80048ec <HAL_RTC_SetTime+0x1b4>
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	78db      	ldrb	r3, [r3, #3]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d015      	beq.n	80048ec <HAL_RTC_SetTime+0x1b4>
 80048c0:	f240 21d6 	movw	r1, #726	; 0x2d6
 80048c4:	483f      	ldr	r0, [pc, #252]	; (80049c4 <HAL_RTC_SetTime+0x28c>)
 80048c6:	f7fc f877 	bl	80009b8 <assert_failed>
 80048ca:	e00f      	b.n	80048ec <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2200      	movs	r2, #0
 80048d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fa23 	bl	8004d22 <RTC_Bcd2ToByte>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b17      	cmp	r3, #23
 80048e0:	d904      	bls.n	80048ec <HAL_RTC_SetTime+0x1b4>
 80048e2:	f240 21db 	movw	r1, #731	; 0x2db
 80048e6:	4837      	ldr	r0, [pc, #220]	; (80049c4 <HAL_RTC_SetTime+0x28c>)
 80048e8:	f7fc f866 	bl	80009b8 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	785b      	ldrb	r3, [r3, #1]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fa16 	bl	8004d22 <RTC_Bcd2ToByte>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b3b      	cmp	r3, #59	; 0x3b
 80048fa:	d904      	bls.n	8004906 <HAL_RTC_SetTime+0x1ce>
 80048fc:	f240 21dd 	movw	r1, #733	; 0x2dd
 8004900:	4830      	ldr	r0, [pc, #192]	; (80049c4 <HAL_RTC_SetTime+0x28c>)
 8004902:	f7fc f859 	bl	80009b8 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	789b      	ldrb	r3, [r3, #2]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fa09 	bl	8004d22 <RTC_Bcd2ToByte>
 8004910:	4603      	mov	r3, r0
 8004912:	2b3b      	cmp	r3, #59	; 0x3b
 8004914:	d904      	bls.n	8004920 <HAL_RTC_SetTime+0x1e8>
 8004916:	f240 21de 	movw	r1, #734	; 0x2de
 800491a:	482a      	ldr	r0, [pc, #168]	; (80049c4 <HAL_RTC_SetTime+0x28c>)
 800491c:	f7fc f84c 	bl	80009b8 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	785b      	ldrb	r3, [r3, #1]
 800492a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800492c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004932:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	78db      	ldrb	r3, [r3, #3]
 8004938:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800493a:	4313      	orrs	r3, r2
 800493c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	22ca      	movs	r2, #202	; 0xca
 8004944:	625a      	str	r2, [r3, #36]	; 0x24
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2253      	movs	r2, #83	; 0x53
 800494c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f96e 	bl	8004c30 <RTC_EnterInitMode>
 8004954:	4603      	mov	r3, r0
 8004956:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004958:	7cfb      	ldrb	r3, [r7, #19]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d120      	bne.n	80049a0 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004968:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800496c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800497c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6899      	ldr	r1, [r3, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	431a      	orrs	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 f981 	bl	8004c9e <RTC_ExitInitMode>
 800499c:	4603      	mov	r3, r0
 800499e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80049a0:	7cfb      	ldrb	r3, [r7, #19]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d102      	bne.n	80049ac <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	22ff      	movs	r2, #255	; 0xff
 80049b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	771a      	strb	r2, [r3, #28]

  return status;
 80049ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	371c      	adds	r7, #28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd90      	pop	{r4, r7, pc}
 80049c4:	0800dbf0 	.word	0x0800dbf0

080049c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80049c8:	b590      	push	{r4, r7, lr}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d007      	beq.n	80049ee <HAL_RTC_SetDate+0x26>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d004      	beq.n	80049ee <HAL_RTC_SetDate+0x26>
 80049e4:	f240 3153 	movw	r1, #851	; 0x353
 80049e8:	487c      	ldr	r0, [pc, #496]	; (8004bdc <HAL_RTC_SetDate+0x214>)
 80049ea:	f7fb ffe5 	bl	80009b8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	7f1b      	ldrb	r3, [r3, #28]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_RTC_SetDate+0x32>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e0ec      	b.n	8004bd4 <HAL_RTC_SetDate+0x20c>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2202      	movs	r2, #2
 8004a04:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10e      	bne.n	8004a2a <HAL_RTC_SetDate+0x62>
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	785b      	ldrb	r3, [r3, #1]
 8004a10:	f003 0310 	and.w	r3, r3, #16
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d008      	beq.n	8004a2a <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	785b      	ldrb	r3, [r3, #1]
 8004a1c:	f023 0310 	bic.w	r3, r3, #16
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	330a      	adds	r3, #10
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d01c      	beq.n	8004a6c <HAL_RTC_SetDate+0xa4>
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d018      	beq.n	8004a6c <HAL_RTC_SetDate+0xa4>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d014      	beq.n	8004a6c <HAL_RTC_SetDate+0xa4>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d010      	beq.n	8004a6c <HAL_RTC_SetDate+0xa4>
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2b05      	cmp	r3, #5
 8004a50:	d00c      	beq.n	8004a6c <HAL_RTC_SetDate+0xa4>
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b06      	cmp	r3, #6
 8004a58:	d008      	beq.n	8004a6c <HAL_RTC_SetDate+0xa4>
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b07      	cmp	r3, #7
 8004a60:	d004      	beq.n	8004a6c <HAL_RTC_SetDate+0xa4>
 8004a62:	f240 315f 	movw	r1, #863	; 0x35f
 8004a66:	485d      	ldr	r0, [pc, #372]	; (8004bdc <HAL_RTC_SetDate+0x214>)
 8004a68:	f7fb ffa6 	bl	80009b8 <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d13f      	bne.n	8004af2 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	78db      	ldrb	r3, [r3, #3]
 8004a76:	2b63      	cmp	r3, #99	; 0x63
 8004a78:	d904      	bls.n	8004a84 <HAL_RTC_SetDate+0xbc>
 8004a7a:	f240 3163 	movw	r1, #867	; 0x363
 8004a7e:	4857      	ldr	r0, [pc, #348]	; (8004bdc <HAL_RTC_SetDate+0x214>)
 8004a80:	f7fb ff9a 	bl	80009b8 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	785b      	ldrb	r3, [r3, #1]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <HAL_RTC_SetDate+0xcc>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	785b      	ldrb	r3, [r3, #1]
 8004a90:	2b0c      	cmp	r3, #12
 8004a92:	d904      	bls.n	8004a9e <HAL_RTC_SetDate+0xd6>
 8004a94:	f44f 7159 	mov.w	r1, #868	; 0x364
 8004a98:	4850      	ldr	r0, [pc, #320]	; (8004bdc <HAL_RTC_SetDate+0x214>)
 8004a9a:	f7fb ff8d 	bl	80009b8 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	789b      	ldrb	r3, [r3, #2]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_RTC_SetDate+0xe6>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	789b      	ldrb	r3, [r3, #2]
 8004aaa:	2b1f      	cmp	r3, #31
 8004aac:	d904      	bls.n	8004ab8 <HAL_RTC_SetDate+0xf0>
 8004aae:	f240 3165 	movw	r1, #869	; 0x365
 8004ab2:	484a      	ldr	r0, [pc, #296]	; (8004bdc <HAL_RTC_SetDate+0x214>)
 8004ab4:	f7fb ff80 	bl	80009b8 <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	78db      	ldrb	r3, [r3, #3]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 f913 	bl	8004ce8 <RTC_ByteToBcd2>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	785b      	ldrb	r3, [r3, #1]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 f90c 	bl	8004ce8 <RTC_ByteToBcd2>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ad4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	789b      	ldrb	r3, [r3, #2]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 f904 	bl	8004ce8 <RTC_ByteToBcd2>
 8004ae0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004ae2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004aec:	4313      	orrs	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	e045      	b.n	8004b7e <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	78db      	ldrb	r3, [r3, #3]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 f913 	bl	8004d22 <RTC_Bcd2ToByte>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b63      	cmp	r3, #99	; 0x63
 8004b00:	d904      	bls.n	8004b0c <HAL_RTC_SetDate+0x144>
 8004b02:	f240 316e 	movw	r1, #878	; 0x36e
 8004b06:	4835      	ldr	r0, [pc, #212]	; (8004bdc <HAL_RTC_SetDate+0x214>)
 8004b08:	f7fb ff56 	bl	80009b8 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	785b      	ldrb	r3, [r3, #1]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 f906 	bl	8004d22 <RTC_Bcd2ToByte>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d007      	beq.n	8004b2c <HAL_RTC_SetDate+0x164>
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	785b      	ldrb	r3, [r3, #1]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 f8fe 	bl	8004d22 <RTC_Bcd2ToByte>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b0c      	cmp	r3, #12
 8004b2a:	d904      	bls.n	8004b36 <HAL_RTC_SetDate+0x16e>
 8004b2c:	f240 316f 	movw	r1, #879	; 0x36f
 8004b30:	482a      	ldr	r0, [pc, #168]	; (8004bdc <HAL_RTC_SetDate+0x214>)
 8004b32:	f7fb ff41 	bl	80009b8 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	789b      	ldrb	r3, [r3, #2]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 f8f1 	bl	8004d22 <RTC_Bcd2ToByte>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d007      	beq.n	8004b56 <HAL_RTC_SetDate+0x18e>
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	789b      	ldrb	r3, [r3, #2]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 f8e9 	bl	8004d22 <RTC_Bcd2ToByte>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b1f      	cmp	r3, #31
 8004b54:	d904      	bls.n	8004b60 <HAL_RTC_SetDate+0x198>
 8004b56:	f44f 715c 	mov.w	r1, #880	; 0x370
 8004b5a:	4820      	ldr	r0, [pc, #128]	; (8004bdc <HAL_RTC_SetDate+0x214>)
 8004b5c:	f7fb ff2c 	bl	80009b8 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	78db      	ldrb	r3, [r3, #3]
 8004b64:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	785b      	ldrb	r3, [r3, #1]
 8004b6a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b6c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004b72:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	22ca      	movs	r2, #202	; 0xca
 8004b84:	625a      	str	r2, [r3, #36]	; 0x24
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2253      	movs	r2, #83	; 0x53
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 f84e 	bl	8004c30 <RTC_EnterInitMode>
 8004b94:	4603      	mov	r3, r0
 8004b96:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004b98:	7cfb      	ldrb	r3, [r7, #19]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10c      	bne.n	8004bb8 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ba8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004bac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 f875 	bl	8004c9e <RTC_ExitInitMode>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004bb8:	7cfb      	ldrb	r3, [r7, #19]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d102      	bne.n	8004bc4 <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	22ff      	movs	r2, #255	; 0xff
 8004bca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	771a      	strb	r2, [r3, #28]

  return status;
 8004bd2:	7cfb      	ldrb	r3, [r7, #19]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	371c      	adds	r7, #28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd90      	pop	{r4, r7, pc}
 8004bdc:	0800dbf0 	.word	0x0800dbf0

08004be0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bfa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bfc:	f7fc f940 	bl	8000e80 <HAL_GetTick>
 8004c00:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004c02:	e009      	b.n	8004c18 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c04:	f7fc f93c 	bl	8000e80 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c12:	d901      	bls.n	8004c18 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e007      	b.n	8004c28 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f003 0320 	and.w	r3, r3, #32
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0ee      	beq.n	8004c04 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d122      	bne.n	8004c94 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c5c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c5e:	f7fc f90f 	bl	8000e80 <HAL_GetTick>
 8004c62:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004c64:	e00c      	b.n	8004c80 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c66:	f7fc f90b 	bl	8000e80 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c74:	d904      	bls.n	8004c80 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2204      	movs	r2, #4
 8004c7a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d102      	bne.n	8004c94 <RTC_EnterInitMode+0x64>
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d1e8      	bne.n	8004c66 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cb8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 0320 	and.w	r3, r3, #32
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10a      	bne.n	8004cde <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7ff ff89 	bl	8004be0 <HAL_RTC_WaitForSynchro>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d004      	beq.n	8004cde <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004cf6:	e005      	b.n	8004d04 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004cfe:	79fb      	ldrb	r3, [r7, #7]
 8004d00:	3b0a      	subs	r3, #10
 8004d02:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004d04:	79fb      	ldrb	r3, [r7, #7]
 8004d06:	2b09      	cmp	r3, #9
 8004d08:	d8f6      	bhi.n	8004cf8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	79fb      	ldrb	r3, [r7, #7]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	b2db      	uxtb	r3, r3
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b085      	sub	sp, #20
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	4603      	mov	r3, r0
 8004d2a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004d30:	79fb      	ldrb	r3, [r7, #7]
 8004d32:	091b      	lsrs	r3, r3, #4
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	461a      	mov	r2, r3
 8004d38:	0092      	lsls	r2, r2, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8004d40:	79fb      	ldrb	r3, [r7, #7]
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	b2db      	uxtb	r3, r3
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
	...

08004d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e0a7      	b.n	8004ebe <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a55      	ldr	r2, [pc, #340]	; (8004ec8 <HAL_TIM_Base_Init+0x16c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d027      	beq.n	8004dc8 <HAL_TIM_Base_Init+0x6c>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d80:	d022      	beq.n	8004dc8 <HAL_TIM_Base_Init+0x6c>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a51      	ldr	r2, [pc, #324]	; (8004ecc <HAL_TIM_Base_Init+0x170>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d01d      	beq.n	8004dc8 <HAL_TIM_Base_Init+0x6c>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a4f      	ldr	r2, [pc, #316]	; (8004ed0 <HAL_TIM_Base_Init+0x174>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d018      	beq.n	8004dc8 <HAL_TIM_Base_Init+0x6c>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a4e      	ldr	r2, [pc, #312]	; (8004ed4 <HAL_TIM_Base_Init+0x178>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d013      	beq.n	8004dc8 <HAL_TIM_Base_Init+0x6c>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a4c      	ldr	r2, [pc, #304]	; (8004ed8 <HAL_TIM_Base_Init+0x17c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00e      	beq.n	8004dc8 <HAL_TIM_Base_Init+0x6c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a4b      	ldr	r2, [pc, #300]	; (8004edc <HAL_TIM_Base_Init+0x180>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d009      	beq.n	8004dc8 <HAL_TIM_Base_Init+0x6c>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a49      	ldr	r2, [pc, #292]	; (8004ee0 <HAL_TIM_Base_Init+0x184>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <HAL_TIM_Base_Init+0x6c>
 8004dbe:	f240 1113 	movw	r1, #275	; 0x113
 8004dc2:	4848      	ldr	r0, [pc, #288]	; (8004ee4 <HAL_TIM_Base_Init+0x188>)
 8004dc4:	f7fb fdf8 	bl	80009b8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d014      	beq.n	8004dfa <HAL_TIM_Base_Init+0x9e>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	d010      	beq.n	8004dfa <HAL_TIM_Base_Init+0x9e>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b20      	cmp	r3, #32
 8004dde:	d00c      	beq.n	8004dfa <HAL_TIM_Base_Init+0x9e>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b40      	cmp	r3, #64	; 0x40
 8004de6:	d008      	beq.n	8004dfa <HAL_TIM_Base_Init+0x9e>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b60      	cmp	r3, #96	; 0x60
 8004dee:	d004      	beq.n	8004dfa <HAL_TIM_Base_Init+0x9e>
 8004df0:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004df4:	483b      	ldr	r0, [pc, #236]	; (8004ee4 <HAL_TIM_Base_Init+0x188>)
 8004df6:	f7fb fddf 	bl	80009b8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00e      	beq.n	8004e20 <HAL_TIM_Base_Init+0xc4>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e0a:	d009      	beq.n	8004e20 <HAL_TIM_Base_Init+0xc4>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e14:	d004      	beq.n	8004e20 <HAL_TIM_Base_Init+0xc4>
 8004e16:	f240 1115 	movw	r1, #277	; 0x115
 8004e1a:	4832      	ldr	r0, [pc, #200]	; (8004ee4 <HAL_TIM_Base_Init+0x188>)
 8004e1c:	f7fb fdcc 	bl	80009b8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_TIM_Base_Init+0xde>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	2b80      	cmp	r3, #128	; 0x80
 8004e2e:	d004      	beq.n	8004e3a <HAL_TIM_Base_Init+0xde>
 8004e30:	f44f 718b 	mov.w	r1, #278	; 0x116
 8004e34:	482b      	ldr	r0, [pc, #172]	; (8004ee4 <HAL_TIM_Base_Init+0x188>)
 8004e36:	f7fb fdbf 	bl	80009b8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f84a 	bl	8004ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3304      	adds	r3, #4
 8004e64:	4619      	mov	r1, r3
 8004e66:	4610      	mov	r0, r2
 8004e68:	f000 fa0a 	bl	8005280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40010000 	.word	0x40010000
 8004ecc:	40000400 	.word	0x40000400
 8004ed0:	40000800 	.word	0x40000800
 8004ed4:	40000c00 	.word	0x40000c00
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40014400 	.word	0x40014400
 8004ee0:	40014800 	.word	0x40014800
 8004ee4:	0800dc28 	.word	0x0800dc28

08004ee8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a3d      	ldr	r2, [pc, #244]	; (8005000 <HAL_TIM_Base_Start_IT+0x104>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d027      	beq.n	8004f5e <HAL_TIM_Base_Start_IT+0x62>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f16:	d022      	beq.n	8004f5e <HAL_TIM_Base_Start_IT+0x62>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a39      	ldr	r2, [pc, #228]	; (8005004 <HAL_TIM_Base_Start_IT+0x108>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01d      	beq.n	8004f5e <HAL_TIM_Base_Start_IT+0x62>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a38      	ldr	r2, [pc, #224]	; (8005008 <HAL_TIM_Base_Start_IT+0x10c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d018      	beq.n	8004f5e <HAL_TIM_Base_Start_IT+0x62>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a36      	ldr	r2, [pc, #216]	; (800500c <HAL_TIM_Base_Start_IT+0x110>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_TIM_Base_Start_IT+0x62>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a35      	ldr	r2, [pc, #212]	; (8005010 <HAL_TIM_Base_Start_IT+0x114>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <HAL_TIM_Base_Start_IT+0x62>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a33      	ldr	r2, [pc, #204]	; (8005014 <HAL_TIM_Base_Start_IT+0x118>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <HAL_TIM_Base_Start_IT+0x62>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a32      	ldr	r2, [pc, #200]	; (8005018 <HAL_TIM_Base_Start_IT+0x11c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <HAL_TIM_Base_Start_IT+0x62>
 8004f54:	f240 11cf 	movw	r1, #463	; 0x1cf
 8004f58:	4830      	ldr	r0, [pc, #192]	; (800501c <HAL_TIM_Base_Start_IT+0x120>)
 8004f5a:	f7fb fd2d 	bl	80009b8 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d001      	beq.n	8004f6e <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e044      	b.n	8004ff8 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2202      	movs	r2, #2
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f042 0201 	orr.w	r2, r2, #1
 8004f84:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a1d      	ldr	r2, [pc, #116]	; (8005000 <HAL_TIM_Base_Start_IT+0x104>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d018      	beq.n	8004fc2 <HAL_TIM_Base_Start_IT+0xc6>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f98:	d013      	beq.n	8004fc2 <HAL_TIM_Base_Start_IT+0xc6>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a19      	ldr	r2, [pc, #100]	; (8005004 <HAL_TIM_Base_Start_IT+0x108>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00e      	beq.n	8004fc2 <HAL_TIM_Base_Start_IT+0xc6>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a17      	ldr	r2, [pc, #92]	; (8005008 <HAL_TIM_Base_Start_IT+0x10c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d009      	beq.n	8004fc2 <HAL_TIM_Base_Start_IT+0xc6>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a16      	ldr	r2, [pc, #88]	; (800500c <HAL_TIM_Base_Start_IT+0x110>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d004      	beq.n	8004fc2 <HAL_TIM_Base_Start_IT+0xc6>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a14      	ldr	r2, [pc, #80]	; (8005010 <HAL_TIM_Base_Start_IT+0x114>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d111      	bne.n	8004fe6 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b06      	cmp	r3, #6
 8004fd2:	d010      	beq.n	8004ff6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe4:	e007      	b.n	8004ff6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 0201 	orr.w	r2, r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40010000 	.word	0x40010000
 8005004:	40000400 	.word	0x40000400
 8005008:	40000800 	.word	0x40000800
 800500c:	40000c00 	.word	0x40000c00
 8005010:	40014000 	.word	0x40014000
 8005014:	40014400 	.word	0x40014400
 8005018:	40014800 	.word	0x40014800
 800501c:	0800dc28 	.word	0x0800dc28

08005020 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b02      	cmp	r3, #2
 8005034:	d122      	bne.n	800507c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b02      	cmp	r3, #2
 8005042:	d11b      	bne.n	800507c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0202 	mvn.w	r2, #2
 800504c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f8ee 	bl	8005244 <HAL_TIM_IC_CaptureCallback>
 8005068:	e005      	b.n	8005076 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f8e0 	bl	8005230 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f8f1 	bl	8005258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b04      	cmp	r3, #4
 8005088:	d122      	bne.n	80050d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b04      	cmp	r3, #4
 8005096:	d11b      	bne.n	80050d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0204 	mvn.w	r2, #4
 80050a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2202      	movs	r2, #2
 80050a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f8c4 	bl	8005244 <HAL_TIM_IC_CaptureCallback>
 80050bc:	e005      	b.n	80050ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f8b6 	bl	8005230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f8c7 	bl	8005258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b08      	cmp	r3, #8
 80050dc:	d122      	bne.n	8005124 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0308 	and.w	r3, r3, #8
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d11b      	bne.n	8005124 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0208 	mvn.w	r2, #8
 80050f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2204      	movs	r2, #4
 80050fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f89a 	bl	8005244 <HAL_TIM_IC_CaptureCallback>
 8005110:	e005      	b.n	800511e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f88c 	bl	8005230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f89d 	bl	8005258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f003 0310 	and.w	r3, r3, #16
 800512e:	2b10      	cmp	r3, #16
 8005130:	d122      	bne.n	8005178 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	2b10      	cmp	r3, #16
 800513e:	d11b      	bne.n	8005178 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0210 	mvn.w	r2, #16
 8005148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2208      	movs	r2, #8
 800514e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f870 	bl	8005244 <HAL_TIM_IC_CaptureCallback>
 8005164:	e005      	b.n	8005172 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f862 	bl	8005230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f873 	bl	8005258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b01      	cmp	r3, #1
 8005184:	d10e      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b01      	cmp	r3, #1
 8005192:	d107      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0201 	mvn.w	r2, #1
 800519c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7fb fbf2 	bl	8000988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ae:	2b80      	cmp	r3, #128	; 0x80
 80051b0:	d10e      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051bc:	2b80      	cmp	r3, #128	; 0x80
 80051be:	d107      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f8e2 	bl	8005394 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051da:	2b40      	cmp	r3, #64	; 0x40
 80051dc:	d10e      	bne.n	80051fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e8:	2b40      	cmp	r3, #64	; 0x40
 80051ea:	d107      	bne.n	80051fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f838 	bl	800526c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0320 	and.w	r3, r3, #32
 8005206:	2b20      	cmp	r3, #32
 8005208:	d10e      	bne.n	8005228 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0320 	and.w	r3, r3, #32
 8005214:	2b20      	cmp	r3, #32
 8005216:	d107      	bne.n	8005228 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0220 	mvn.w	r2, #32
 8005220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f8ac 	bl	8005380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005228:	bf00      	nop
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a34      	ldr	r2, [pc, #208]	; (8005364 <TIM_Base_SetConfig+0xe4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00f      	beq.n	80052b8 <TIM_Base_SetConfig+0x38>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529e:	d00b      	beq.n	80052b8 <TIM_Base_SetConfig+0x38>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a31      	ldr	r2, [pc, #196]	; (8005368 <TIM_Base_SetConfig+0xe8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d007      	beq.n	80052b8 <TIM_Base_SetConfig+0x38>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a30      	ldr	r2, [pc, #192]	; (800536c <TIM_Base_SetConfig+0xec>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d003      	beq.n	80052b8 <TIM_Base_SetConfig+0x38>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a2f      	ldr	r2, [pc, #188]	; (8005370 <TIM_Base_SetConfig+0xf0>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d108      	bne.n	80052ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a25      	ldr	r2, [pc, #148]	; (8005364 <TIM_Base_SetConfig+0xe4>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d01b      	beq.n	800530a <TIM_Base_SetConfig+0x8a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d8:	d017      	beq.n	800530a <TIM_Base_SetConfig+0x8a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a22      	ldr	r2, [pc, #136]	; (8005368 <TIM_Base_SetConfig+0xe8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d013      	beq.n	800530a <TIM_Base_SetConfig+0x8a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a21      	ldr	r2, [pc, #132]	; (800536c <TIM_Base_SetConfig+0xec>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00f      	beq.n	800530a <TIM_Base_SetConfig+0x8a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a20      	ldr	r2, [pc, #128]	; (8005370 <TIM_Base_SetConfig+0xf0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00b      	beq.n	800530a <TIM_Base_SetConfig+0x8a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a1f      	ldr	r2, [pc, #124]	; (8005374 <TIM_Base_SetConfig+0xf4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d007      	beq.n	800530a <TIM_Base_SetConfig+0x8a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a1e      	ldr	r2, [pc, #120]	; (8005378 <TIM_Base_SetConfig+0xf8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d003      	beq.n	800530a <TIM_Base_SetConfig+0x8a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a1d      	ldr	r2, [pc, #116]	; (800537c <TIM_Base_SetConfig+0xfc>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d108      	bne.n	800531c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a08      	ldr	r2, [pc, #32]	; (8005364 <TIM_Base_SetConfig+0xe4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d103      	bne.n	8005350 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	615a      	str	r2, [r3, #20]
}
 8005356:	bf00      	nop
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40010000 	.word	0x40010000
 8005368:	40000400 	.word	0x40000400
 800536c:	40000800 	.word	0x40000800
 8005370:	40000c00 	.word	0x40000c00
 8005374:	40014000 	.word	0x40014000
 8005378:	40014400 	.word	0x40014400
 800537c:	40014800 	.word	0x40014800

08005380 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053a8:	b084      	sub	sp, #16
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	f107 001c 	add.w	r0, r7, #28
 80053b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d122      	bne.n	8005406 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80053d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d105      	bne.n	80053fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f001 fbee 	bl	8006bdc <USB_CoreReset>
 8005400:	4603      	mov	r3, r0
 8005402:	73fb      	strb	r3, [r7, #15]
 8005404:	e01a      	b.n	800543c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f001 fbe2 	bl	8006bdc <USB_CoreReset>
 8005418:	4603      	mov	r3, r0
 800541a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800541c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005426:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	639a      	str	r2, [r3, #56]	; 0x38
 800542e:	e005      	b.n	800543c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800543c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543e:	2b01      	cmp	r3, #1
 8005440:	d10b      	bne.n	800545a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f043 0206 	orr.w	r2, r3, #6
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f043 0220 	orr.w	r2, r3, #32
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800545a:	7bfb      	ldrb	r3, [r7, #15]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005466:	b004      	add	sp, #16
 8005468:	4770      	bx	lr
	...

0800546c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	4613      	mov	r3, r2
 8005478:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	2b02      	cmp	r3, #2
 800547e:	d165      	bne.n	800554c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4a41      	ldr	r2, [pc, #260]	; (8005588 <USB_SetTurnaroundTime+0x11c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d906      	bls.n	8005496 <USB_SetTurnaroundTime+0x2a>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4a40      	ldr	r2, [pc, #256]	; (800558c <USB_SetTurnaroundTime+0x120>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d202      	bcs.n	8005496 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005490:	230f      	movs	r3, #15
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	e062      	b.n	800555c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	4a3c      	ldr	r2, [pc, #240]	; (800558c <USB_SetTurnaroundTime+0x120>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d306      	bcc.n	80054ac <USB_SetTurnaroundTime+0x40>
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	4a3b      	ldr	r2, [pc, #236]	; (8005590 <USB_SetTurnaroundTime+0x124>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d202      	bcs.n	80054ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80054a6:	230e      	movs	r3, #14
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	e057      	b.n	800555c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4a38      	ldr	r2, [pc, #224]	; (8005590 <USB_SetTurnaroundTime+0x124>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d306      	bcc.n	80054c2 <USB_SetTurnaroundTime+0x56>
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4a37      	ldr	r2, [pc, #220]	; (8005594 <USB_SetTurnaroundTime+0x128>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d202      	bcs.n	80054c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054bc:	230d      	movs	r3, #13
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	e04c      	b.n	800555c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	4a33      	ldr	r2, [pc, #204]	; (8005594 <USB_SetTurnaroundTime+0x128>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d306      	bcc.n	80054d8 <USB_SetTurnaroundTime+0x6c>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	4a32      	ldr	r2, [pc, #200]	; (8005598 <USB_SetTurnaroundTime+0x12c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d802      	bhi.n	80054d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80054d2:	230c      	movs	r3, #12
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	e041      	b.n	800555c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4a2f      	ldr	r2, [pc, #188]	; (8005598 <USB_SetTurnaroundTime+0x12c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d906      	bls.n	80054ee <USB_SetTurnaroundTime+0x82>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	4a2e      	ldr	r2, [pc, #184]	; (800559c <USB_SetTurnaroundTime+0x130>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d802      	bhi.n	80054ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054e8:	230b      	movs	r3, #11
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	e036      	b.n	800555c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	4a2a      	ldr	r2, [pc, #168]	; (800559c <USB_SetTurnaroundTime+0x130>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d906      	bls.n	8005504 <USB_SetTurnaroundTime+0x98>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	4a29      	ldr	r2, [pc, #164]	; (80055a0 <USB_SetTurnaroundTime+0x134>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d802      	bhi.n	8005504 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054fe:	230a      	movs	r3, #10
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	e02b      	b.n	800555c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4a26      	ldr	r2, [pc, #152]	; (80055a0 <USB_SetTurnaroundTime+0x134>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d906      	bls.n	800551a <USB_SetTurnaroundTime+0xae>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4a25      	ldr	r2, [pc, #148]	; (80055a4 <USB_SetTurnaroundTime+0x138>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d202      	bcs.n	800551a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005514:	2309      	movs	r3, #9
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	e020      	b.n	800555c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	4a21      	ldr	r2, [pc, #132]	; (80055a4 <USB_SetTurnaroundTime+0x138>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d306      	bcc.n	8005530 <USB_SetTurnaroundTime+0xc4>
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	4a20      	ldr	r2, [pc, #128]	; (80055a8 <USB_SetTurnaroundTime+0x13c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d802      	bhi.n	8005530 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800552a:	2308      	movs	r3, #8
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	e015      	b.n	800555c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4a1d      	ldr	r2, [pc, #116]	; (80055a8 <USB_SetTurnaroundTime+0x13c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d906      	bls.n	8005546 <USB_SetTurnaroundTime+0xda>
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4a1c      	ldr	r2, [pc, #112]	; (80055ac <USB_SetTurnaroundTime+0x140>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d202      	bcs.n	8005546 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005540:	2307      	movs	r3, #7
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	e00a      	b.n	800555c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005546:	2306      	movs	r3, #6
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	e007      	b.n	800555c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d102      	bne.n	8005558 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005552:	2309      	movs	r3, #9
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	e001      	b.n	800555c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005558:	2309      	movs	r3, #9
 800555a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	029b      	lsls	r3, r3, #10
 8005570:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005574:	431a      	orrs	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	371c      	adds	r7, #28
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	00d8acbf 	.word	0x00d8acbf
 800558c:	00e4e1c0 	.word	0x00e4e1c0
 8005590:	00f42400 	.word	0x00f42400
 8005594:	01067380 	.word	0x01067380
 8005598:	011a499f 	.word	0x011a499f
 800559c:	01312cff 	.word	0x01312cff
 80055a0:	014ca43f 	.word	0x014ca43f
 80055a4:	016e3600 	.word	0x016e3600
 80055a8:	01a6ab1f 	.word	0x01a6ab1f
 80055ac:	01e84800 	.word	0x01e84800

080055b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f043 0201 	orr.w	r2, r3, #1
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f023 0201 	bic.w	r2, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005600:	2300      	movs	r3, #0
 8005602:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005610:	78fb      	ldrb	r3, [r7, #3]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d115      	bne.n	8005642 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005622:	2001      	movs	r0, #1
 8005624:	f7fb fc38 	bl	8000e98 <HAL_Delay>
      ms++;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	3301      	adds	r3, #1
 800562c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f001 fa45 	bl	8006abe <USB_GetMode>
 8005634:	4603      	mov	r3, r0
 8005636:	2b01      	cmp	r3, #1
 8005638:	d01e      	beq.n	8005678 <USB_SetCurrentMode+0x84>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b31      	cmp	r3, #49	; 0x31
 800563e:	d9f0      	bls.n	8005622 <USB_SetCurrentMode+0x2e>
 8005640:	e01a      	b.n	8005678 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005642:	78fb      	ldrb	r3, [r7, #3]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d115      	bne.n	8005674 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005654:	2001      	movs	r0, #1
 8005656:	f7fb fc1f 	bl	8000e98 <HAL_Delay>
      ms++;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3301      	adds	r3, #1
 800565e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f001 fa2c 	bl	8006abe <USB_GetMode>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <USB_SetCurrentMode+0x84>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b31      	cmp	r3, #49	; 0x31
 8005670:	d9f0      	bls.n	8005654 <USB_SetCurrentMode+0x60>
 8005672:	e001      	b.n	8005678 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e005      	b.n	8005684 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b32      	cmp	r3, #50	; 0x32
 800567c:	d101      	bne.n	8005682 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800568c:	b084      	sub	sp, #16
 800568e:	b580      	push	{r7, lr}
 8005690:	b086      	sub	sp, #24
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800569a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056a6:	2300      	movs	r3, #0
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	e009      	b.n	80056c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	3340      	adds	r3, #64	; 0x40
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	2200      	movs	r2, #0
 80056b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	3301      	adds	r3, #1
 80056be:	613b      	str	r3, [r7, #16]
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	2b0e      	cmp	r3, #14
 80056c4:	d9f2      	bls.n	80056ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d11c      	bne.n	8005706 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056da:	f043 0302 	orr.w	r3, r3, #2
 80056de:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	639a      	str	r2, [r3, #56]	; 0x38
 8005704:	e00b      	b.n	800571e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005716:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005724:	461a      	mov	r2, r3
 8005726:	2300      	movs	r3, #0
 8005728:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005730:	4619      	mov	r1, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005738:	461a      	mov	r2, r3
 800573a:	680b      	ldr	r3, [r1, #0]
 800573c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	2b01      	cmp	r3, #1
 8005742:	d10c      	bne.n	800575e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005746:	2b00      	cmp	r3, #0
 8005748:	d104      	bne.n	8005754 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800574a:	2100      	movs	r1, #0
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f965 	bl	8005a1c <USB_SetDevSpeed>
 8005752:	e008      	b.n	8005766 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005754:	2101      	movs	r1, #1
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f960 	bl	8005a1c <USB_SetDevSpeed>
 800575c:	e003      	b.n	8005766 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800575e:	2103      	movs	r1, #3
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f95b 	bl	8005a1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005766:	2110      	movs	r1, #16
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f8f3 	bl	8005954 <USB_FlushTxFifo>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f91f 	bl	80059bc <USB_FlushRxFifo>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578e:	461a      	mov	r2, r3
 8005790:	2300      	movs	r3, #0
 8005792:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579a:	461a      	mov	r2, r3
 800579c:	2300      	movs	r3, #0
 800579e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a6:	461a      	mov	r2, r3
 80057a8:	2300      	movs	r3, #0
 80057aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057ac:	2300      	movs	r3, #0
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	e043      	b.n	800583a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057c8:	d118      	bne.n	80057fc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10a      	bne.n	80057e6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057dc:	461a      	mov	r2, r3
 80057de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	e013      	b.n	800580e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f2:	461a      	mov	r2, r3
 80057f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	e008      	b.n	800580e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005808:	461a      	mov	r2, r3
 800580a:	2300      	movs	r3, #0
 800580c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581a:	461a      	mov	r2, r3
 800581c:	2300      	movs	r3, #0
 800581e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582c:	461a      	mov	r2, r3
 800582e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005832:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	3301      	adds	r3, #1
 8005838:	613b      	str	r3, [r7, #16]
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	429a      	cmp	r2, r3
 8005840:	d3b7      	bcc.n	80057b2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005842:	2300      	movs	r3, #0
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	e043      	b.n	80058d0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800585a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800585e:	d118      	bne.n	8005892 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10a      	bne.n	800587c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005872:	461a      	mov	r2, r3
 8005874:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	e013      	b.n	80058a4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005888:	461a      	mov	r2, r3
 800588a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	e008      	b.n	80058a4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589e:	461a      	mov	r2, r3
 80058a0:	2300      	movs	r3, #0
 80058a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b0:	461a      	mov	r2, r3
 80058b2:	2300      	movs	r3, #0
 80058b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c2:	461a      	mov	r2, r3
 80058c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	3301      	adds	r3, #1
 80058ce:	613b      	str	r3, [r7, #16]
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d3b7      	bcc.n	8005848 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80058f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d105      	bne.n	800590c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	f043 0210 	orr.w	r2, r3, #16
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699a      	ldr	r2, [r3, #24]
 8005910:	4b0f      	ldr	r3, [pc, #60]	; (8005950 <USB_DevInit+0x2c4>)
 8005912:	4313      	orrs	r3, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	f043 0208 	orr.w	r2, r3, #8
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800592a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800592c:	2b01      	cmp	r3, #1
 800592e:	d107      	bne.n	8005940 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005938:	f043 0304 	orr.w	r3, r3, #4
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005940:	7dfb      	ldrb	r3, [r7, #23]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800594c:	b004      	add	sp, #16
 800594e:	4770      	bx	lr
 8005950:	803c3800 	.word	0x803c3800

08005954 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	3301      	adds	r3, #1
 8005966:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4a13      	ldr	r2, [pc, #76]	; (80059b8 <USB_FlushTxFifo+0x64>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d901      	bls.n	8005974 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e01b      	b.n	80059ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	daf2      	bge.n	8005962 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	019b      	lsls	r3, r3, #6
 8005984:	f043 0220 	orr.w	r2, r3, #32
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	3301      	adds	r3, #1
 8005990:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4a08      	ldr	r2, [pc, #32]	; (80059b8 <USB_FlushTxFifo+0x64>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d901      	bls.n	800599e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e006      	b.n	80059ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d0f0      	beq.n	800598c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	00030d40 	.word	0x00030d40

080059bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3301      	adds	r3, #1
 80059cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4a11      	ldr	r2, [pc, #68]	; (8005a18 <USB_FlushRxFifo+0x5c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d901      	bls.n	80059da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e018      	b.n	8005a0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	daf2      	bge.n	80059c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2210      	movs	r2, #16
 80059ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	3301      	adds	r3, #1
 80059f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4a08      	ldr	r2, [pc, #32]	; (8005a18 <USB_FlushRxFifo+0x5c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d901      	bls.n	80059fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e006      	b.n	8005a0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f003 0310 	and.w	r3, r3, #16
 8005a06:	2b10      	cmp	r3, #16
 8005a08:	d0f0      	beq.n	80059ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	00030d40 	.word	0x00030d40

08005a1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	68f9      	ldr	r1, [r7, #12]
 8005a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b087      	sub	sp, #28
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 0306 	and.w	r3, r3, #6
 8005a66:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d102      	bne.n	8005a74 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	75fb      	strb	r3, [r7, #23]
 8005a72:	e00a      	b.n	8005a8a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d002      	beq.n	8005a80 <USB_GetDevSpeed+0x32>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b06      	cmp	r3, #6
 8005a7e:	d102      	bne.n	8005a86 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a80:	2302      	movs	r3, #2
 8005a82:	75fb      	strb	r3, [r7, #23]
 8005a84:	e001      	b.n	8005a8a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a86:	230f      	movs	r3, #15
 8005a88:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	785b      	ldrb	r3, [r3, #1]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d13a      	bne.n	8005b2a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aba:	69da      	ldr	r2, [r3, #28]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	68f9      	ldr	r1, [r7, #12]
 8005ace:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d155      	bne.n	8005b98 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	791b      	ldrb	r3, [r3, #4]
 8005b06:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b08:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	059b      	lsls	r3, r3, #22
 8005b0e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b10:	4313      	orrs	r3, r2
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	0151      	lsls	r1, r2, #5
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	440a      	add	r2, r1
 8005b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	e036      	b.n	8005b98 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b30:	69da      	ldr	r2, [r3, #28]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b40:	041b      	lsls	r3, r3, #16
 8005b42:	68f9      	ldr	r1, [r7, #12]
 8005b44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d11a      	bne.n	8005b98 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	791b      	ldrb	r3, [r3, #4]
 8005b7c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b7e:	430b      	orrs	r3, r1
 8005b80:	4313      	orrs	r3, r2
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	0151      	lsls	r1, r2, #5
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	440a      	add	r2, r1
 8005b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b96:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
	...

08005ba8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	785b      	ldrb	r3, [r3, #1]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d161      	bne.n	8005c88 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bda:	d11f      	bne.n	8005c1c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	0151      	lsls	r1, r2, #5
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	440a      	add	r2, r1
 8005bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bfa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	0151      	lsls	r1, r2, #5
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	440a      	add	r2, r1
 8005c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	f003 030f 	and.w	r3, r3, #15
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	43db      	mvns	r3, r3
 8005c36:	68f9      	ldr	r1, [r7, #12]
 8005c38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c46:	69da      	ldr	r2, [r3, #28]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	2101      	movs	r1, #1
 8005c52:	fa01 f303 	lsl.w	r3, r1, r3
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	68f9      	ldr	r1, [r7, #12]
 8005c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c60:	4013      	ands	r3, r2
 8005c62:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	0159      	lsls	r1, r3, #5
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	440b      	add	r3, r1
 8005c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4b35      	ldr	r3, [pc, #212]	; (8005d58 <USB_DeactivateEndpoint+0x1b0>)
 8005c82:	4013      	ands	r3, r2
 8005c84:	600b      	str	r3, [r1, #0]
 8005c86:	e060      	b.n	8005d4a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c9e:	d11f      	bne.n	8005ce0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	0151      	lsls	r1, r2, #5
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	440a      	add	r2, r1
 8005cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cbe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf6:	041b      	lsls	r3, r3, #16
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	68f9      	ldr	r1, [r7, #12]
 8005cfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d00:	4013      	ands	r3, r2
 8005d02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0a:	69da      	ldr	r2, [r3, #28]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	f003 030f 	and.w	r3, r3, #15
 8005d14:	2101      	movs	r1, #1
 8005d16:	fa01 f303 	lsl.w	r3, r1, r3
 8005d1a:	041b      	lsls	r3, r3, #16
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	68f9      	ldr	r1, [r7, #12]
 8005d20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d24:	4013      	ands	r3, r2
 8005d26:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	0159      	lsls	r1, r3, #5
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	440b      	add	r3, r1
 8005d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d42:	4619      	mov	r1, r3
 8005d44:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <USB_DeactivateEndpoint+0x1b4>)
 8005d46:	4013      	ands	r3, r2
 8005d48:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	ec337800 	.word	0xec337800
 8005d5c:	eff37800 	.word	0xeff37800

08005d60 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08a      	sub	sp, #40	; 0x28
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	785b      	ldrb	r3, [r3, #1]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	f040 815c 	bne.w	800603a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d132      	bne.n	8005df0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	0151      	lsls	r1, r2, #5
 8005d9c:	69fa      	ldr	r2, [r7, #28]
 8005d9e:	440a      	add	r2, r1
 8005da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005da8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	69fa      	ldr	r2, [r7, #28]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	0151      	lsls	r1, r2, #5
 8005de0:	69fa      	ldr	r2, [r7, #28]
 8005de2:	440a      	add	r2, r1
 8005de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de8:	0cdb      	lsrs	r3, r3, #19
 8005dea:	04db      	lsls	r3, r3, #19
 8005dec:	6113      	str	r3, [r2, #16]
 8005dee:	e074      	b.n	8005eda <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e0a:	0cdb      	lsrs	r3, r3, #19
 8005e0c:	04db      	lsls	r3, r3, #19
 8005e0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	0151      	lsls	r1, r2, #5
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	440a      	add	r2, r1
 8005e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e40:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	6999      	ldr	r1, [r3, #24]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	440b      	add	r3, r1
 8005e4c:	1e59      	subs	r1, r3, #1
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e56:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e58:	4b9d      	ldr	r3, [pc, #628]	; (80060d0 <USB_EPStartXfer+0x370>)
 8005e5a:	400b      	ands	r3, r1
 8005e5c:	69b9      	ldr	r1, [r7, #24]
 8005e5e:	0148      	lsls	r0, r1, #5
 8005e60:	69f9      	ldr	r1, [r7, #28]
 8005e62:	4401      	add	r1, r0
 8005e64:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e78:	691a      	ldr	r2, [r3, #16]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e82:	69b9      	ldr	r1, [r7, #24]
 8005e84:	0148      	lsls	r0, r1, #5
 8005e86:	69f9      	ldr	r1, [r7, #28]
 8005e88:	4401      	add	r1, r0
 8005e8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	791b      	ldrb	r3, [r3, #4]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d11f      	bne.n	8005eda <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	0151      	lsls	r1, r2, #5
 8005eac:	69fa      	ldr	r2, [r7, #28]
 8005eae:	440a      	add	r2, r1
 8005eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005eb8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	0151      	lsls	r1, r2, #5
 8005ecc:	69fa      	ldr	r2, [r7, #28]
 8005ece:	440a      	add	r2, r1
 8005ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ed8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005eda:	79fb      	ldrb	r3, [r7, #7]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d14b      	bne.n	8005f78 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d009      	beq.n	8005efc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	791b      	ldrb	r3, [r3, #4]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d128      	bne.n	8005f56 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d110      	bne.n	8005f36 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	0151      	lsls	r1, r2, #5
 8005f26:	69fa      	ldr	r2, [r7, #28]
 8005f28:	440a      	add	r2, r1
 8005f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	e00f      	b.n	8005f56 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	0151      	lsls	r1, r2, #5
 8005f48:	69fa      	ldr	r2, [r7, #28]
 8005f4a:	440a      	add	r2, r1
 8005f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f54:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	69fa      	ldr	r2, [r7, #28]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	e133      	b.n	80061e0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	0151      	lsls	r1, r2, #5
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f96:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	791b      	ldrb	r3, [r3, #4]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d015      	beq.n	8005fcc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 811b 	beq.w	80061e0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	2101      	movs	r1, #1
 8005fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc0:	69f9      	ldr	r1, [r7, #28]
 8005fc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	634b      	str	r3, [r1, #52]	; 0x34
 8005fca:	e109      	b.n	80061e0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d110      	bne.n	8005ffe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	0151      	lsls	r1, r2, #5
 8005fee:	69fa      	ldr	r2, [r7, #28]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	e00f      	b.n	800601e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	0151      	lsls	r1, r2, #5
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	440a      	add	r2, r1
 8006014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800601c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	6919      	ldr	r1, [r3, #16]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	781a      	ldrb	r2, [r3, #0]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	b298      	uxth	r0, r3
 800602c:	79fb      	ldrb	r3, [r7, #7]
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	4603      	mov	r3, r0
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 fade 	bl	80065f4 <USB_WritePacket>
 8006038:	e0d2      	b.n	80061e0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	0151      	lsls	r1, r2, #5
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	440a      	add	r2, r1
 8006050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006054:	0cdb      	lsrs	r3, r3, #19
 8006056:	04db      	lsls	r3, r3, #19
 8006058:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	0151      	lsls	r1, r2, #5
 800606c:	69fa      	ldr	r2, [r7, #28]
 800606e:	440a      	add	r2, r1
 8006070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006074:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006078:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800607c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d126      	bne.n	80060d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	4413      	add	r3, r2
 800608e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006092:	691a      	ldr	r2, [r3, #16]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800609c:	69b9      	ldr	r1, [r7, #24]
 800609e:	0148      	lsls	r0, r1, #5
 80060a0:	69f9      	ldr	r1, [r7, #28]
 80060a2:	4401      	add	r1, r0
 80060a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060a8:	4313      	orrs	r3, r2
 80060aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	0151      	lsls	r1, r2, #5
 80060be:	69fa      	ldr	r2, [r7, #28]
 80060c0:	440a      	add	r2, r1
 80060c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060ca:	6113      	str	r3, [r2, #16]
 80060cc:	e03a      	b.n	8006144 <USB_EPStartXfer+0x3e4>
 80060ce:	bf00      	nop
 80060d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	699a      	ldr	r2, [r3, #24]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	4413      	add	r3, r2
 80060de:	1e5a      	subs	r2, r3, #1
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	8afa      	ldrh	r2, [r7, #22]
 80060f0:	fb03 f202 	mul.w	r2, r3, r2
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006104:	691a      	ldr	r2, [r3, #16]
 8006106:	8afb      	ldrh	r3, [r7, #22]
 8006108:	04d9      	lsls	r1, r3, #19
 800610a:	4b38      	ldr	r3, [pc, #224]	; (80061ec <USB_EPStartXfer+0x48c>)
 800610c:	400b      	ands	r3, r1
 800610e:	69b9      	ldr	r1, [r7, #24]
 8006110:	0148      	lsls	r0, r1, #5
 8006112:	69f9      	ldr	r1, [r7, #28]
 8006114:	4401      	add	r1, r0
 8006116:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800611a:	4313      	orrs	r3, r2
 800611c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612a:	691a      	ldr	r2, [r3, #16]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006134:	69b9      	ldr	r1, [r7, #24]
 8006136:	0148      	lsls	r0, r1, #5
 8006138:	69f9      	ldr	r1, [r7, #28]
 800613a:	4401      	add	r1, r0
 800613c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006140:	4313      	orrs	r3, r2
 8006142:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006144:	79fb      	ldrb	r3, [r7, #7]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d10d      	bne.n	8006166 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	6919      	ldr	r1, [r3, #16]
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	4413      	add	r3, r2
 800615e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006162:	460a      	mov	r2, r1
 8006164:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	791b      	ldrb	r3, [r3, #4]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d128      	bne.n	80061c0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617a:	2b00      	cmp	r3, #0
 800617c:	d110      	bne.n	80061a0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	0151      	lsls	r1, r2, #5
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	440a      	add	r2, r1
 8006194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006198:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	e00f      	b.n	80061c0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	0151      	lsls	r1, r2, #5
 80061b2:	69fa      	ldr	r2, [r7, #28]
 80061b4:	440a      	add	r2, r1
 80061b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	0151      	lsls	r1, r2, #5
 80061d2:	69fa      	ldr	r2, [r7, #28]
 80061d4:	440a      	add	r2, r1
 80061d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3720      	adds	r7, #32
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	1ff80000 	.word	0x1ff80000

080061f0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	4613      	mov	r3, r2
 80061fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	2b01      	cmp	r3, #1
 800620e:	f040 80ce 	bne.w	80063ae <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d132      	bne.n	8006280 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	4413      	add	r3, r2
 8006222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	0151      	lsls	r1, r2, #5
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	440a      	add	r2, r1
 8006230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006234:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006238:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800623c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	0151      	lsls	r1, r2, #5
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	440a      	add	r2, r1
 8006254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006258:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800625c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	0151      	lsls	r1, r2, #5
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	440a      	add	r2, r1
 8006274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006278:	0cdb      	lsrs	r3, r3, #19
 800627a:	04db      	lsls	r3, r3, #19
 800627c:	6113      	str	r3, [r2, #16]
 800627e:	e04e      	b.n	800631e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	440a      	add	r2, r1
 8006296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800629a:	0cdb      	lsrs	r3, r3, #19
 800629c:	04db      	lsls	r3, r3, #19
 800629e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062c2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	699a      	ldr	r2, [r3, #24]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d903      	bls.n	80062d8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	0151      	lsls	r1, r2, #5
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	440a      	add	r2, r1
 80062ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006304:	691a      	ldr	r2, [r3, #16]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800630e:	6939      	ldr	r1, [r7, #16]
 8006310:	0148      	lsls	r0, r1, #5
 8006312:	6979      	ldr	r1, [r7, #20]
 8006314:	4401      	add	r1, r0
 8006316:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800631a:	4313      	orrs	r3, r2
 800631c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800631e:	79fb      	ldrb	r3, [r7, #7]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d11e      	bne.n	8006362 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d009      	beq.n	8006340 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006338:	461a      	mov	r2, r3
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	0151      	lsls	r1, r2, #5
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	440a      	add	r2, r1
 8006356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800635a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	e097      	b.n	8006492 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	4413      	add	r3, r2
 800636a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	0151      	lsls	r1, r2, #5
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	440a      	add	r2, r1
 8006378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800637c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006380:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 8083 	beq.w	8006492 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	2101      	movs	r1, #1
 800639e:	fa01 f303 	lsl.w	r3, r1, r3
 80063a2:	6979      	ldr	r1, [r7, #20]
 80063a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063a8:	4313      	orrs	r3, r2
 80063aa:	634b      	str	r3, [r1, #52]	; 0x34
 80063ac:	e071      	b.n	8006492 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	0151      	lsls	r1, r2, #5
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	440a      	add	r2, r1
 80063c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063c8:	0cdb      	lsrs	r3, r3, #19
 80063ca:	04db      	lsls	r3, r3, #19
 80063cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	0151      	lsls	r1, r2, #5
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	440a      	add	r2, r1
 80063e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	0151      	lsls	r1, r2, #5
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	440a      	add	r2, r1
 8006420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006424:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006428:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006436:	691a      	ldr	r2, [r3, #16]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	69db      	ldr	r3, [r3, #28]
 800643c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006440:	6939      	ldr	r1, [r7, #16]
 8006442:	0148      	lsls	r0, r1, #5
 8006444:	6979      	ldr	r1, [r7, #20]
 8006446:	4401      	add	r1, r0
 8006448:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800644c:	4313      	orrs	r3, r2
 800644e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006450:	79fb      	ldrb	r3, [r7, #7]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d10d      	bne.n	8006472 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d009      	beq.n	8006472 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	6919      	ldr	r1, [r3, #16]
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646e:	460a      	mov	r2, r1
 8006470:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	0151      	lsls	r1, r2, #5
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	440a      	add	r2, r1
 8006488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800648c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006490:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	371c      	adds	r7, #28
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	785b      	ldrb	r3, [r3, #1]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d14a      	bne.n	8006554 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064d6:	f040 8086 	bne.w	80065e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	7812      	ldrb	r2, [r2, #0]
 80064ee:	0151      	lsls	r1, r2, #5
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	440a      	add	r2, r1
 80064f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	7812      	ldrb	r2, [r2, #0]
 8006512:	0151      	lsls	r1, r2, #5
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	440a      	add	r2, r1
 8006518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800651c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006520:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3301      	adds	r3, #1
 8006526:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f242 7210 	movw	r2, #10000	; 0x2710
 800652e:	4293      	cmp	r3, r2
 8006530:	d902      	bls.n	8006538 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	75fb      	strb	r3, [r7, #23]
          break;
 8006536:	e056      	b.n	80065e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	4413      	add	r3, r2
 8006542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800654c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006550:	d0e7      	beq.n	8006522 <USB_EPStopXfer+0x82>
 8006552:	e048      	b.n	80065e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006568:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800656c:	d13b      	bne.n	80065e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	7812      	ldrb	r2, [r2, #0]
 8006582:	0151      	lsls	r1, r2, #5
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	440a      	add	r2, r1
 8006588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800658c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006590:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	7812      	ldrb	r2, [r2, #0]
 80065a6:	0151      	lsls	r1, r2, #5
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	440a      	add	r2, r1
 80065ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	3301      	adds	r3, #1
 80065ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f242 7210 	movw	r2, #10000	; 0x2710
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d902      	bls.n	80065cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	75fb      	strb	r3, [r7, #23]
          break;
 80065ca:	e00c      	b.n	80065e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065e4:	d0e7      	beq.n	80065b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80065e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	371c      	adds	r7, #28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b089      	sub	sp, #36	; 0x24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	4611      	mov	r1, r2
 8006600:	461a      	mov	r2, r3
 8006602:	460b      	mov	r3, r1
 8006604:	71fb      	strb	r3, [r7, #7]
 8006606:	4613      	mov	r3, r2
 8006608:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006612:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006616:	2b00      	cmp	r3, #0
 8006618:	d123      	bne.n	8006662 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800661a:	88bb      	ldrh	r3, [r7, #4]
 800661c:	3303      	adds	r3, #3
 800661e:	089b      	lsrs	r3, r3, #2
 8006620:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006622:	2300      	movs	r3, #0
 8006624:	61bb      	str	r3, [r7, #24]
 8006626:	e018      	b.n	800665a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	031a      	lsls	r2, r3, #12
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	4413      	add	r3, r2
 8006630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006634:	461a      	mov	r2, r3
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	3301      	adds	r3, #1
 8006640:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	3301      	adds	r3, #1
 8006646:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	3301      	adds	r3, #1
 800664c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	3301      	adds	r3, #1
 8006652:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	3301      	adds	r3, #1
 8006658:	61bb      	str	r3, [r7, #24]
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	429a      	cmp	r2, r3
 8006660:	d3e2      	bcc.n	8006628 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3724      	adds	r7, #36	; 0x24
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006670:	b480      	push	{r7}
 8006672:	b08b      	sub	sp, #44	; 0x2c
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	4613      	mov	r3, r2
 800667c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006686:	88fb      	ldrh	r3, [r7, #6]
 8006688:	089b      	lsrs	r3, r3, #2
 800668a:	b29b      	uxth	r3, r3
 800668c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800668e:	88fb      	ldrh	r3, [r7, #6]
 8006690:	f003 0303 	and.w	r3, r3, #3
 8006694:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006696:	2300      	movs	r3, #0
 8006698:	623b      	str	r3, [r7, #32]
 800669a:	e014      	b.n	80066c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	3301      	adds	r3, #1
 80066ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	3301      	adds	r3, #1
 80066b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	3301      	adds	r3, #1
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	3301      	adds	r3, #1
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	3301      	adds	r3, #1
 80066c4:	623b      	str	r3, [r7, #32]
 80066c6:	6a3a      	ldr	r2, [r7, #32]
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d3e6      	bcc.n	800669c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80066ce:	8bfb      	ldrh	r3, [r7, #30]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01e      	beq.n	8006712 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066de:	461a      	mov	r2, r3
 80066e0:	f107 0310 	add.w	r3, r7, #16
 80066e4:	6812      	ldr	r2, [r2, #0]
 80066e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	fa22 f303 	lsr.w	r3, r2, r3
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	701a      	strb	r2, [r3, #0]
      i++;
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	3301      	adds	r3, #1
 80066fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	3301      	adds	r3, #1
 8006704:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006706:	8bfb      	ldrh	r3, [r7, #30]
 8006708:	3b01      	subs	r3, #1
 800670a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800670c:	8bfb      	ldrh	r3, [r7, #30]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1ea      	bne.n	80066e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006714:	4618      	mov	r0, r3
 8006716:	372c      	adds	r7, #44	; 0x2c
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	785b      	ldrb	r3, [r3, #1]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d12c      	bne.n	8006796 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	db12      	blt.n	8006774 <USB_EPSetStall+0x54>
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00f      	beq.n	8006774 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	0151      	lsls	r1, r2, #5
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	440a      	add	r2, r1
 800676a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800676e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006772:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	0151      	lsls	r1, r2, #5
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	440a      	add	r2, r1
 800678a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800678e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006792:	6013      	str	r3, [r2, #0]
 8006794:	e02b      	b.n	80067ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4413      	add	r3, r2
 800679e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	db12      	blt.n	80067ce <USB_EPSetStall+0xae>
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00f      	beq.n	80067ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	0151      	lsls	r1, r2, #5
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	440a      	add	r2, r1
 80067c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	0151      	lsls	r1, r2, #5
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	440a      	add	r2, r1
 80067e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	785b      	ldrb	r3, [r3, #1]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d128      	bne.n	800686a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	4413      	add	r3, r2
 8006820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	0151      	lsls	r1, r2, #5
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	440a      	add	r2, r1
 800682e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006832:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006836:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	791b      	ldrb	r3, [r3, #4]
 800683c:	2b03      	cmp	r3, #3
 800683e:	d003      	beq.n	8006848 <USB_EPClearStall+0x4c>
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	791b      	ldrb	r3, [r3, #4]
 8006844:	2b02      	cmp	r3, #2
 8006846:	d138      	bne.n	80068ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	0151      	lsls	r1, r2, #5
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	440a      	add	r2, r1
 800685e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006866:	6013      	str	r3, [r2, #0]
 8006868:	e027      	b.n	80068ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	0151      	lsls	r1, r2, #5
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	440a      	add	r2, r1
 8006880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006884:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006888:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	791b      	ldrb	r3, [r3, #4]
 800688e:	2b03      	cmp	r3, #3
 8006890:	d003      	beq.n	800689a <USB_EPClearStall+0x9e>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	791b      	ldrb	r3, [r3, #4]
 8006896:	2b02      	cmp	r3, #2
 8006898:	d10f      	bne.n	80068ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	0151      	lsls	r1, r2, #5
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	440a      	add	r2, r1
 80068b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	460b      	mov	r3, r1
 80068d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80068ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80068fc:	68f9      	ldr	r1, [r7, #12]
 80068fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006902:	4313      	orrs	r3, r2
 8006904:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800692e:	f023 0303 	bic.w	r3, r3, #3
 8006932:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006942:	f023 0302 	bic.w	r3, r3, #2
 8006946:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006956:	b480      	push	{r7}
 8006958:	b085      	sub	sp, #20
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006970:	f023 0303 	bic.w	r3, r3, #3
 8006974:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006984:	f043 0302 	orr.w	r3, r3, #2
 8006988:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	4013      	ands	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80069b0:	68fb      	ldr	r3, [r7, #12]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069be:	b480      	push	{r7}
 80069c0:	b085      	sub	sp, #20
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	4013      	ands	r3, r2
 80069e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	0c1b      	lsrs	r3, r3, #16
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b085      	sub	sp, #20
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	4013      	ands	r3, r2
 8006a14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	b29b      	uxth	r3, r3
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b085      	sub	sp, #20
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
 8006a2e:	460b      	mov	r3, r1
 8006a30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006a36:	78fb      	ldrb	r3, [r7, #3]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	4013      	ands	r3, r2
 8006a52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a54:	68bb      	ldr	r3, [r7, #8]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b087      	sub	sp, #28
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a84:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006a86:	78fb      	ldrb	r3, [r7, #3]
 8006a88:	f003 030f 	and.w	r3, r3, #15
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a92:	01db      	lsls	r3, r3, #7
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006a9c:	78fb      	ldrb	r3, [r7, #3]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4013      	ands	r3, r2
 8006aae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	371c      	adds	r7, #28
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	f003 0301 	and.w	r3, r3, #1
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b085      	sub	sp, #20
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006af4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006af8:	f023 0307 	bic.w	r3, r3, #7
 8006afc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	333c      	adds	r3, #60	; 0x3c
 8006b36:	3304      	adds	r3, #4
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	4a26      	ldr	r2, [pc, #152]	; (8006bd8 <USB_EP0_OutStart+0xb8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d90a      	bls.n	8006b5a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b54:	d101      	bne.n	8006b5a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	e037      	b.n	8006bca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b60:	461a      	mov	r2, r3
 8006b62:	2300      	movs	r3, #0
 8006b64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b88:	f043 0318 	orr.w	r3, r3, #24
 8006b8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b9c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ba0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ba2:	7afb      	ldrb	r3, [r7, #11]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d10f      	bne.n	8006bc8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bae:	461a      	mov	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bc2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006bc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	4f54300a 	.word	0x4f54300a

08006bdc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	3301      	adds	r3, #1
 8006bec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4a13      	ldr	r2, [pc, #76]	; (8006c40 <USB_CoreReset+0x64>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d901      	bls.n	8006bfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e01b      	b.n	8006c32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	daf2      	bge.n	8006be8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	f043 0201 	orr.w	r2, r3, #1
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3301      	adds	r3, #1
 8006c16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4a09      	ldr	r2, [pc, #36]	; (8006c40 <USB_CoreReset+0x64>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d901      	bls.n	8006c24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e006      	b.n	8006c32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d0f0      	beq.n	8006c12 <USB_CoreReset+0x36>

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	00030d40 	.word	0x00030d40

08006c44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c50:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c54:	f005 fc70 	bl	800c538 <USBD_static_malloc>
 8006c58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d109      	bne.n	8006c74 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	32b0      	adds	r2, #176	; 0xb0
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006c70:	2302      	movs	r3, #2
 8006c72:	e0d4      	b.n	8006e1e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006c74:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006c78:	2100      	movs	r1, #0
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f006 f8b6 	bl	800cdec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	32b0      	adds	r2, #176	; 0xb0
 8006c8a:	68f9      	ldr	r1, [r7, #12]
 8006c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	32b0      	adds	r2, #176	; 0xb0
 8006c9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	7c1b      	ldrb	r3, [r3, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d138      	bne.n	8006d1e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006cac:	4b5e      	ldr	r3, [pc, #376]	; (8006e28 <USBD_CDC_Init+0x1e4>)
 8006cae:	7819      	ldrb	r1, [r3, #0]
 8006cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f005 fb1b 	bl	800c2f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006cbc:	4b5a      	ldr	r3, [pc, #360]	; (8006e28 <USBD_CDC_Init+0x1e4>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	f003 020f 	and.w	r2, r3, #15
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	440b      	add	r3, r1
 8006cd0:	3324      	adds	r3, #36	; 0x24
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006cd6:	4b55      	ldr	r3, [pc, #340]	; (8006e2c <USBD_CDC_Init+0x1e8>)
 8006cd8:	7819      	ldrb	r1, [r3, #0]
 8006cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cde:	2202      	movs	r2, #2
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f005 fb06 	bl	800c2f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ce6:	4b51      	ldr	r3, [pc, #324]	; (8006e2c <USBD_CDC_Init+0x1e8>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	f003 020f 	and.w	r2, r3, #15
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	440b      	add	r3, r1
 8006cfa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006cfe:	2201      	movs	r2, #1
 8006d00:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006d02:	4b4b      	ldr	r3, [pc, #300]	; (8006e30 <USBD_CDC_Init+0x1ec>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	f003 020f 	and.w	r2, r3, #15
 8006d0a:	6879      	ldr	r1, [r7, #4]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	440b      	add	r3, r1
 8006d16:	3326      	adds	r3, #38	; 0x26
 8006d18:	2210      	movs	r2, #16
 8006d1a:	801a      	strh	r2, [r3, #0]
 8006d1c:	e035      	b.n	8006d8a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d1e:	4b42      	ldr	r3, [pc, #264]	; (8006e28 <USBD_CDC_Init+0x1e4>)
 8006d20:	7819      	ldrb	r1, [r3, #0]
 8006d22:	2340      	movs	r3, #64	; 0x40
 8006d24:	2202      	movs	r2, #2
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f005 fae3 	bl	800c2f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006d2c:	4b3e      	ldr	r3, [pc, #248]	; (8006e28 <USBD_CDC_Init+0x1e4>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	f003 020f 	and.w	r2, r3, #15
 8006d34:	6879      	ldr	r1, [r7, #4]
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	440b      	add	r3, r1
 8006d40:	3324      	adds	r3, #36	; 0x24
 8006d42:	2201      	movs	r2, #1
 8006d44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006d46:	4b39      	ldr	r3, [pc, #228]	; (8006e2c <USBD_CDC_Init+0x1e8>)
 8006d48:	7819      	ldrb	r1, [r3, #0]
 8006d4a:	2340      	movs	r3, #64	; 0x40
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f005 facf 	bl	800c2f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006d54:	4b35      	ldr	r3, [pc, #212]	; (8006e2c <USBD_CDC_Init+0x1e8>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	f003 020f 	and.w	r2, r3, #15
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	440b      	add	r3, r1
 8006d68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006d70:	4b2f      	ldr	r3, [pc, #188]	; (8006e30 <USBD_CDC_Init+0x1ec>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	f003 020f 	and.w	r2, r3, #15
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	440b      	add	r3, r1
 8006d84:	3326      	adds	r3, #38	; 0x26
 8006d86:	2210      	movs	r2, #16
 8006d88:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d8a:	4b29      	ldr	r3, [pc, #164]	; (8006e30 <USBD_CDC_Init+0x1ec>)
 8006d8c:	7819      	ldrb	r1, [r3, #0]
 8006d8e:	2308      	movs	r3, #8
 8006d90:	2203      	movs	r2, #3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f005 faad 	bl	800c2f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006d98:	4b25      	ldr	r3, [pc, #148]	; (8006e30 <USBD_CDC_Init+0x1ec>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	f003 020f 	and.w	r2, r3, #15
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	4613      	mov	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	440b      	add	r3, r1
 8006dac:	3324      	adds	r3, #36	; 0x24
 8006dae:	2201      	movs	r2, #1
 8006db0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	33b0      	adds	r3, #176	; 0xb0
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006de8:	2302      	movs	r3, #2
 8006dea:	e018      	b.n	8006e1e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	7c1b      	ldrb	r3, [r3, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10a      	bne.n	8006e0a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006df4:	4b0d      	ldr	r3, [pc, #52]	; (8006e2c <USBD_CDC_Init+0x1e8>)
 8006df6:	7819      	ldrb	r1, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f005 fb64 	bl	800c4d0 <USBD_LL_PrepareReceive>
 8006e08:	e008      	b.n	8006e1c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e0a:	4b08      	ldr	r3, [pc, #32]	; (8006e2c <USBD_CDC_Init+0x1e8>)
 8006e0c:	7819      	ldrb	r1, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e14:	2340      	movs	r3, #64	; 0x40
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f005 fb5a 	bl	800c4d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20000093 	.word	0x20000093
 8006e2c:	20000094 	.word	0x20000094
 8006e30:	20000095 	.word	0x20000095

08006e34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006e40:	4b3a      	ldr	r3, [pc, #232]	; (8006f2c <USBD_CDC_DeInit+0xf8>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	4619      	mov	r1, r3
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f005 fa79 	bl	800c33e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006e4c:	4b37      	ldr	r3, [pc, #220]	; (8006f2c <USBD_CDC_DeInit+0xf8>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	f003 020f 	and.w	r2, r3, #15
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	440b      	add	r3, r1
 8006e60:	3324      	adds	r3, #36	; 0x24
 8006e62:	2200      	movs	r2, #0
 8006e64:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006e66:	4b32      	ldr	r3, [pc, #200]	; (8006f30 <USBD_CDC_DeInit+0xfc>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f005 fa66 	bl	800c33e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006e72:	4b2f      	ldr	r3, [pc, #188]	; (8006f30 <USBD_CDC_DeInit+0xfc>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	f003 020f 	and.w	r2, r3, #15
 8006e7a:	6879      	ldr	r1, [r7, #4]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	440b      	add	r3, r1
 8006e86:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006e8e:	4b29      	ldr	r3, [pc, #164]	; (8006f34 <USBD_CDC_DeInit+0x100>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f005 fa52 	bl	800c33e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006e9a:	4b26      	ldr	r3, [pc, #152]	; (8006f34 <USBD_CDC_DeInit+0x100>)
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	f003 020f 	and.w	r2, r3, #15
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	440b      	add	r3, r1
 8006eae:	3324      	adds	r3, #36	; 0x24
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006eb4:	4b1f      	ldr	r3, [pc, #124]	; (8006f34 <USBD_CDC_DeInit+0x100>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	f003 020f 	and.w	r2, r3, #15
 8006ebc:	6879      	ldr	r1, [r7, #4]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	440b      	add	r3, r1
 8006ec8:	3326      	adds	r3, #38	; 0x26
 8006eca:	2200      	movs	r2, #0
 8006ecc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	32b0      	adds	r2, #176	; 0xb0
 8006ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d01f      	beq.n	8006f20 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	33b0      	adds	r3, #176	; 0xb0
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	32b0      	adds	r2, #176	; 0xb0
 8006efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f005 fb26 	bl	800c554 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	32b0      	adds	r2, #176	; 0xb0
 8006f12:	2100      	movs	r1, #0
 8006f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	20000093 	.word	0x20000093
 8006f30:	20000094 	.word	0x20000094
 8006f34:	20000095 	.word	0x20000095

08006f38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	32b0      	adds	r2, #176	; 0xb0
 8006f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e0bf      	b.n	80070e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d050      	beq.n	8007016 <USBD_CDC_Setup+0xde>
 8006f74:	2b20      	cmp	r3, #32
 8006f76:	f040 80af 	bne.w	80070d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	88db      	ldrh	r3, [r3, #6]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d03a      	beq.n	8006ff8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	b25b      	sxtb	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	da1b      	bge.n	8006fc4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	33b0      	adds	r3, #176	; 0xb0
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006fa2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	88d2      	ldrh	r2, [r2, #6]
 8006fa8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	88db      	ldrh	r3, [r3, #6]
 8006fae:	2b07      	cmp	r3, #7
 8006fb0:	bf28      	it	cs
 8006fb2:	2307      	movcs	r3, #7
 8006fb4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	89fa      	ldrh	r2, [r7, #14]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 fd43 	bl	8008a48 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006fc2:	e090      	b.n	80070e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	785a      	ldrb	r2, [r3, #1]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	88db      	ldrh	r3, [r3, #6]
 8006fd2:	2b3f      	cmp	r3, #63	; 0x3f
 8006fd4:	d803      	bhi.n	8006fde <USBD_CDC_Setup+0xa6>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	88db      	ldrh	r3, [r3, #6]
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	e000      	b.n	8006fe0 <USBD_CDC_Setup+0xa8>
 8006fde:	2240      	movs	r2, #64	; 0x40
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006fe6:	6939      	ldr	r1, [r7, #16]
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006fee:	461a      	mov	r2, r3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f001 fd55 	bl	8008aa0 <USBD_CtlPrepareRx>
      break;
 8006ff6:	e076      	b.n	80070e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	33b0      	adds	r3, #176	; 0xb0
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	7850      	ldrb	r0, [r2, #1]
 800700e:	2200      	movs	r2, #0
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	4798      	blx	r3
      break;
 8007014:	e067      	b.n	80070e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	785b      	ldrb	r3, [r3, #1]
 800701a:	2b0b      	cmp	r3, #11
 800701c:	d851      	bhi.n	80070c2 <USBD_CDC_Setup+0x18a>
 800701e:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <USBD_CDC_Setup+0xec>)
 8007020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007024:	08007055 	.word	0x08007055
 8007028:	080070d1 	.word	0x080070d1
 800702c:	080070c3 	.word	0x080070c3
 8007030:	080070c3 	.word	0x080070c3
 8007034:	080070c3 	.word	0x080070c3
 8007038:	080070c3 	.word	0x080070c3
 800703c:	080070c3 	.word	0x080070c3
 8007040:	080070c3 	.word	0x080070c3
 8007044:	080070c3 	.word	0x080070c3
 8007048:	080070c3 	.word	0x080070c3
 800704c:	0800707f 	.word	0x0800707f
 8007050:	080070a9 	.word	0x080070a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b03      	cmp	r3, #3
 800705e:	d107      	bne.n	8007070 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007060:	f107 030a 	add.w	r3, r7, #10
 8007064:	2202      	movs	r2, #2
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f001 fced 	bl	8008a48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800706e:	e032      	b.n	80070d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f001 fc77 	bl	8008966 <USBD_CtlError>
            ret = USBD_FAIL;
 8007078:	2303      	movs	r3, #3
 800707a:	75fb      	strb	r3, [r7, #23]
          break;
 800707c:	e02b      	b.n	80070d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b03      	cmp	r3, #3
 8007088:	d107      	bne.n	800709a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800708a:	f107 030d 	add.w	r3, r7, #13
 800708e:	2201      	movs	r2, #1
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f001 fcd8 	bl	8008a48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007098:	e01d      	b.n	80070d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 fc62 	bl	8008966 <USBD_CtlError>
            ret = USBD_FAIL;
 80070a2:	2303      	movs	r3, #3
 80070a4:	75fb      	strb	r3, [r7, #23]
          break;
 80070a6:	e016      	b.n	80070d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d00f      	beq.n	80070d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f001 fc55 	bl	8008966 <USBD_CtlError>
            ret = USBD_FAIL;
 80070bc:	2303      	movs	r3, #3
 80070be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80070c0:	e008      	b.n	80070d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 fc4e 	bl	8008966 <USBD_CtlError>
          ret = USBD_FAIL;
 80070ca:	2303      	movs	r3, #3
 80070cc:	75fb      	strb	r3, [r7, #23]
          break;
 80070ce:	e002      	b.n	80070d6 <USBD_CDC_Setup+0x19e>
          break;
 80070d0:	bf00      	nop
 80070d2:	e008      	b.n	80070e6 <USBD_CDC_Setup+0x1ae>
          break;
 80070d4:	bf00      	nop
      }
      break;
 80070d6:	e006      	b.n	80070e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f001 fc43 	bl	8008966 <USBD_CtlError>
      ret = USBD_FAIL;
 80070e0:	2303      	movs	r3, #3
 80070e2:	75fb      	strb	r3, [r7, #23]
      break;
 80070e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80070e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007102:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	32b0      	adds	r2, #176	; 0xb0
 800710e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007116:	2303      	movs	r3, #3
 8007118:	e065      	b.n	80071e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	32b0      	adds	r2, #176	; 0xb0
 8007124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007128:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800712a:	78fb      	ldrb	r3, [r7, #3]
 800712c:	f003 020f 	and.w	r2, r3, #15
 8007130:	6879      	ldr	r1, [r7, #4]
 8007132:	4613      	mov	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	440b      	add	r3, r1
 800713c:	3318      	adds	r3, #24
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d02f      	beq.n	80071a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007144:	78fb      	ldrb	r3, [r7, #3]
 8007146:	f003 020f 	and.w	r2, r3, #15
 800714a:	6879      	ldr	r1, [r7, #4]
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	440b      	add	r3, r1
 8007156:	3318      	adds	r3, #24
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	78fb      	ldrb	r3, [r7, #3]
 800715c:	f003 010f 	and.w	r1, r3, #15
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	460b      	mov	r3, r1
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	440b      	add	r3, r1
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4403      	add	r3, r0
 800716c:	3348      	adds	r3, #72	; 0x48
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	fbb2 f1f3 	udiv	r1, r2, r3
 8007174:	fb01 f303 	mul.w	r3, r1, r3
 8007178:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800717a:	2b00      	cmp	r3, #0
 800717c:	d112      	bne.n	80071a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800717e:	78fb      	ldrb	r3, [r7, #3]
 8007180:	f003 020f 	and.w	r2, r3, #15
 8007184:	6879      	ldr	r1, [r7, #4]
 8007186:	4613      	mov	r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	440b      	add	r3, r1
 8007190:	3318      	adds	r3, #24
 8007192:	2200      	movs	r2, #0
 8007194:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007196:	78f9      	ldrb	r1, [r7, #3]
 8007198:	2300      	movs	r3, #0
 800719a:	2200      	movs	r2, #0
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f005 f976 	bl	800c48e <USBD_LL_Transmit>
 80071a2:	e01f      	b.n	80071e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	33b0      	adds	r3, #176	; 0xb0
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d010      	beq.n	80071e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	33b0      	adds	r3, #176	; 0xb0
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80071e0:	78fa      	ldrb	r2, [r7, #3]
 80071e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	460b      	mov	r3, r1
 80071f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	32b0      	adds	r2, #176	; 0xb0
 8007204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007208:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	32b0      	adds	r2, #176	; 0xb0
 8007214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800721c:	2303      	movs	r3, #3
 800721e:	e01a      	b.n	8007256 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f005 f974 	bl	800c512 <USBD_LL_GetRxDataSize>
 800722a:	4602      	mov	r2, r0
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	33b0      	adds	r3, #176	; 0xb0
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007250:	4611      	mov	r1, r2
 8007252:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	32b0      	adds	r2, #176	; 0xb0
 8007270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007274:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800727c:	2303      	movs	r3, #3
 800727e:	e025      	b.n	80072cc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	33b0      	adds	r3, #176	; 0xb0
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d01a      	beq.n	80072ca <USBD_CDC_EP0_RxReady+0x6c>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800729a:	2bff      	cmp	r3, #255	; 0xff
 800729c:	d015      	beq.n	80072ca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	33b0      	adds	r3, #176	; 0xb0
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80072b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80072be:	b292      	uxth	r2, r2
 80072c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	22ff      	movs	r2, #255	; 0xff
 80072c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072dc:	2182      	movs	r1, #130	; 0x82
 80072de:	4818      	ldr	r0, [pc, #96]	; (8007340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80072e0:	f000 fd09 	bl	8007cf6 <USBD_GetEpDesc>
 80072e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072e6:	2101      	movs	r1, #1
 80072e8:	4815      	ldr	r0, [pc, #84]	; (8007340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80072ea:	f000 fd04 	bl	8007cf6 <USBD_GetEpDesc>
 80072ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072f0:	2181      	movs	r1, #129	; 0x81
 80072f2:	4813      	ldr	r0, [pc, #76]	; (8007340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80072f4:	f000 fcff 	bl	8007cf6 <USBD_GetEpDesc>
 80072f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2210      	movs	r2, #16
 8007304:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d006      	beq.n	800731a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	2200      	movs	r2, #0
 8007310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007314:	711a      	strb	r2, [r3, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d006      	beq.n	800732e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007328:	711a      	strb	r2, [r3, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2243      	movs	r2, #67	; 0x43
 8007332:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007334:	4b02      	ldr	r3, [pc, #8]	; (8007340 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007336:	4618      	mov	r0, r3
 8007338:	3718      	adds	r7, #24
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20000050 	.word	0x20000050

08007344 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800734c:	2182      	movs	r1, #130	; 0x82
 800734e:	4818      	ldr	r0, [pc, #96]	; (80073b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007350:	f000 fcd1 	bl	8007cf6 <USBD_GetEpDesc>
 8007354:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007356:	2101      	movs	r1, #1
 8007358:	4815      	ldr	r0, [pc, #84]	; (80073b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800735a:	f000 fccc 	bl	8007cf6 <USBD_GetEpDesc>
 800735e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007360:	2181      	movs	r1, #129	; 0x81
 8007362:	4813      	ldr	r0, [pc, #76]	; (80073b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007364:	f000 fcc7 	bl	8007cf6 <USBD_GetEpDesc>
 8007368:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	2210      	movs	r2, #16
 8007374:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d006      	beq.n	800738a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	2200      	movs	r2, #0
 8007380:	711a      	strb	r2, [r3, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f042 0202 	orr.w	r2, r2, #2
 8007388:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d006      	beq.n	800739e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	711a      	strb	r2, [r3, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f042 0202 	orr.w	r2, r2, #2
 800739c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2243      	movs	r2, #67	; 0x43
 80073a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073a4:	4b02      	ldr	r3, [pc, #8]	; (80073b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	20000050 	.word	0x20000050

080073b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073bc:	2182      	movs	r1, #130	; 0x82
 80073be:	4818      	ldr	r0, [pc, #96]	; (8007420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80073c0:	f000 fc99 	bl	8007cf6 <USBD_GetEpDesc>
 80073c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80073c6:	2101      	movs	r1, #1
 80073c8:	4815      	ldr	r0, [pc, #84]	; (8007420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80073ca:	f000 fc94 	bl	8007cf6 <USBD_GetEpDesc>
 80073ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80073d0:	2181      	movs	r1, #129	; 0x81
 80073d2:	4813      	ldr	r0, [pc, #76]	; (8007420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80073d4:	f000 fc8f 	bl	8007cf6 <USBD_GetEpDesc>
 80073d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2210      	movs	r2, #16
 80073e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d006      	beq.n	80073fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073f4:	711a      	strb	r2, [r3, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d006      	beq.n	800740e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007408:	711a      	strb	r2, [r3, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2243      	movs	r2, #67	; 0x43
 8007412:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007414:	4b02      	ldr	r3, [pc, #8]	; (8007420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20000050 	.word	0x20000050

08007424 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	220a      	movs	r2, #10
 8007430:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007432:	4b03      	ldr	r3, [pc, #12]	; (8007440 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	2000000c 	.word	0x2000000c

08007444 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007454:	2303      	movs	r3, #3
 8007456:	e009      	b.n	800746c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	33b0      	adds	r3, #176	; 0xb0
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	32b0      	adds	r2, #176	; 0xb0
 800748e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007492:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800749a:	2303      	movs	r3, #3
 800749c:	e008      	b.n	80074b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	371c      	adds	r7, #28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	32b0      	adds	r2, #176	; 0xb0
 80074d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80074dc:	2303      	movs	r3, #3
 80074de:	e004      	b.n	80074ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
	...

080074f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	32b0      	adds	r2, #176	; 0xb0
 800750a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	32b0      	adds	r2, #176	; 0xb0
 800751a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007522:	2303      	movs	r3, #3
 8007524:	e018      	b.n	8007558 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	7c1b      	ldrb	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10a      	bne.n	8007544 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800752e:	4b0c      	ldr	r3, [pc, #48]	; (8007560 <USBD_CDC_ReceivePacket+0x68>)
 8007530:	7819      	ldrb	r1, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f004 ffc7 	bl	800c4d0 <USBD_LL_PrepareReceive>
 8007542:	e008      	b.n	8007556 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007544:	4b06      	ldr	r3, [pc, #24]	; (8007560 <USBD_CDC_ReceivePacket+0x68>)
 8007546:	7819      	ldrb	r1, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800754e:	2340      	movs	r3, #64	; 0x40
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f004 ffbd 	bl	800c4d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	20000094 	.word	0x20000094

08007564 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	4613      	mov	r3, r2
 8007570:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007578:	2303      	movs	r3, #3
 800757a:	e01f      	b.n	80075bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	79fa      	ldrb	r2, [r7, #7]
 80075ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f004 fe37 	bl	800c224 <USBD_LL_Init>
 80075b6:	4603      	mov	r3, r0
 80075b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80075ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3718      	adds	r7, #24
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80075d8:	2303      	movs	r3, #3
 80075da:	e025      	b.n	8007628 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	32ae      	adds	r2, #174	; 0xae
 80075ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00f      	beq.n	8007618 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	32ae      	adds	r2, #174	; 0xae
 8007602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007608:	f107 020e 	add.w	r2, r7, #14
 800760c:	4610      	mov	r0, r2
 800760e:	4798      	blx	r3
 8007610:	4602      	mov	r2, r0
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f004 fe3f 	bl	800c2bc <USBD_LL_Start>
 800763e:	4603      	mov	r3, r0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007650:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007652:	4618      	mov	r0, r3
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	460b      	mov	r3, r1
 8007668:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007674:	2b00      	cmp	r3, #0
 8007676:	d009      	beq.n	800768c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	78fa      	ldrb	r2, [r7, #3]
 8007682:	4611      	mov	r1, r2
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	4798      	blx	r3
 8007688:	4603      	mov	r3, r0
 800768a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800768c:	7bfb      	ldrb	r3, [r7, #15]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b084      	sub	sp, #16
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	460b      	mov	r3, r1
 80076a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	78fa      	ldrb	r2, [r7, #3]
 80076b0:	4611      	mov	r1, r2
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	4798      	blx	r3
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80076bc:	2303      	movs	r3, #3
 80076be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	4618      	mov	r0, r3
 80076de:	f001 f908 	bl	80088f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80076f0:	461a      	mov	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076fe:	f003 031f 	and.w	r3, r3, #31
 8007702:	2b02      	cmp	r3, #2
 8007704:	d01a      	beq.n	800773c <USBD_LL_SetupStage+0x72>
 8007706:	2b02      	cmp	r3, #2
 8007708:	d822      	bhi.n	8007750 <USBD_LL_SetupStage+0x86>
 800770a:	2b00      	cmp	r3, #0
 800770c:	d002      	beq.n	8007714 <USBD_LL_SetupStage+0x4a>
 800770e:	2b01      	cmp	r3, #1
 8007710:	d00a      	beq.n	8007728 <USBD_LL_SetupStage+0x5e>
 8007712:	e01d      	b.n	8007750 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fb5f 	bl	8007de0 <USBD_StdDevReq>
 8007722:	4603      	mov	r3, r0
 8007724:	73fb      	strb	r3, [r7, #15]
      break;
 8007726:	e020      	b.n	800776a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fbc7 	bl	8007ec4 <USBD_StdItfReq>
 8007736:	4603      	mov	r3, r0
 8007738:	73fb      	strb	r3, [r7, #15]
      break;
 800773a:	e016      	b.n	800776a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fc29 	bl	8007f9c <USBD_StdEPReq>
 800774a:	4603      	mov	r3, r0
 800774c:	73fb      	strb	r3, [r7, #15]
      break;
 800774e:	e00c      	b.n	800776a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007756:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800775a:	b2db      	uxtb	r3, r3
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f004 fe0c 	bl	800c37c <USBD_LL_StallEP>
 8007764:	4603      	mov	r3, r0
 8007766:	73fb      	strb	r3, [r7, #15]
      break;
 8007768:	bf00      	nop
  }

  return ret;
 800776a:	7bfb      	ldrb	r3, [r7, #15]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	460b      	mov	r3, r1
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007786:	7afb      	ldrb	r3, [r7, #11]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d16e      	bne.n	800786a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007792:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800779a:	2b03      	cmp	r3, #3
 800779c:	f040 8098 	bne.w	80078d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d913      	bls.n	80077d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	689a      	ldr	r2, [r3, #8]
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	1ad2      	subs	r2, r2, r3
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	68da      	ldr	r2, [r3, #12]
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	4293      	cmp	r3, r2
 80077c4:	bf28      	it	cs
 80077c6:	4613      	movcs	r3, r2
 80077c8:	461a      	mov	r2, r3
 80077ca:	6879      	ldr	r1, [r7, #4]
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f001 f984 	bl	8008ada <USBD_CtlContinueRx>
 80077d2:	e07d      	b.n	80078d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80077da:	f003 031f 	and.w	r3, r3, #31
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d014      	beq.n	800780c <USBD_LL_DataOutStage+0x98>
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d81d      	bhi.n	8007822 <USBD_LL_DataOutStage+0xae>
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <USBD_LL_DataOutStage+0x7c>
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d003      	beq.n	80077f6 <USBD_LL_DataOutStage+0x82>
 80077ee:	e018      	b.n	8007822 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80077f0:	2300      	movs	r3, #0
 80077f2:	75bb      	strb	r3, [r7, #22]
            break;
 80077f4:	e018      	b.n	8007828 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	4619      	mov	r1, r3
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 fa5e 	bl	8007cc2 <USBD_CoreFindIF>
 8007806:	4603      	mov	r3, r0
 8007808:	75bb      	strb	r3, [r7, #22]
            break;
 800780a:	e00d      	b.n	8007828 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007812:	b2db      	uxtb	r3, r3
 8007814:	4619      	mov	r1, r3
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f000 fa60 	bl	8007cdc <USBD_CoreFindEP>
 800781c:	4603      	mov	r3, r0
 800781e:	75bb      	strb	r3, [r7, #22]
            break;
 8007820:	e002      	b.n	8007828 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007822:	2300      	movs	r3, #0
 8007824:	75bb      	strb	r3, [r7, #22]
            break;
 8007826:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007828:	7dbb      	ldrb	r3, [r7, #22]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d119      	bne.n	8007862 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b03      	cmp	r3, #3
 8007838:	d113      	bne.n	8007862 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800783a:	7dba      	ldrb	r2, [r7, #22]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	32ae      	adds	r2, #174	; 0xae
 8007840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00b      	beq.n	8007862 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800784a:	7dba      	ldrb	r2, [r7, #22]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007852:	7dba      	ldrb	r2, [r7, #22]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	32ae      	adds	r2, #174	; 0xae
 8007858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f001 f94a 	bl	8008afc <USBD_CtlSendStatus>
 8007868:	e032      	b.n	80078d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800786a:	7afb      	ldrb	r3, [r7, #11]
 800786c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007870:	b2db      	uxtb	r3, r3
 8007872:	4619      	mov	r1, r3
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f000 fa31 	bl	8007cdc <USBD_CoreFindEP>
 800787a:	4603      	mov	r3, r0
 800787c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800787e:	7dbb      	ldrb	r3, [r7, #22]
 8007880:	2bff      	cmp	r3, #255	; 0xff
 8007882:	d025      	beq.n	80078d0 <USBD_LL_DataOutStage+0x15c>
 8007884:	7dbb      	ldrb	r3, [r7, #22]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d122      	bne.n	80078d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b03      	cmp	r3, #3
 8007894:	d117      	bne.n	80078c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007896:	7dba      	ldrb	r2, [r7, #22]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	32ae      	adds	r2, #174	; 0xae
 800789c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00f      	beq.n	80078c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80078a6:	7dba      	ldrb	r2, [r7, #22]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80078ae:	7dba      	ldrb	r2, [r7, #22]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	32ae      	adds	r2, #174	; 0xae
 80078b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	7afa      	ldrb	r2, [r7, #11]
 80078bc:	4611      	mov	r1, r2
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	4798      	blx	r3
 80078c2:	4603      	mov	r3, r0
 80078c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80078c6:	7dfb      	ldrb	r3, [r7, #23]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80078cc:	7dfb      	ldrb	r3, [r7, #23]
 80078ce:	e000      	b.n	80078d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b086      	sub	sp, #24
 80078de:	af00      	add	r7, sp, #0
 80078e0:	60f8      	str	r0, [r7, #12]
 80078e2:	460b      	mov	r3, r1
 80078e4:	607a      	str	r2, [r7, #4]
 80078e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80078e8:	7afb      	ldrb	r3, [r7, #11]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d16f      	bne.n	80079ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3314      	adds	r3, #20
 80078f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d15a      	bne.n	80079b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	689a      	ldr	r2, [r3, #8]
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	429a      	cmp	r2, r3
 8007908:	d914      	bls.n	8007934 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	689a      	ldr	r2, [r3, #8]
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	1ad2      	subs	r2, r2, r3
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	461a      	mov	r2, r3
 800791e:	6879      	ldr	r1, [r7, #4]
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f001 f8ac 	bl	8008a7e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007926:	2300      	movs	r3, #0
 8007928:	2200      	movs	r2, #0
 800792a:	2100      	movs	r1, #0
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f004 fdcf 	bl	800c4d0 <USBD_LL_PrepareReceive>
 8007932:	e03f      	b.n	80079b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	68da      	ldr	r2, [r3, #12]
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	429a      	cmp	r2, r3
 800793e:	d11c      	bne.n	800797a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007948:	429a      	cmp	r2, r3
 800794a:	d316      	bcc.n	800797a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007956:	429a      	cmp	r2, r3
 8007958:	d20f      	bcs.n	800797a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800795a:	2200      	movs	r2, #0
 800795c:	2100      	movs	r1, #0
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f001 f88d 	bl	8008a7e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800796c:	2300      	movs	r3, #0
 800796e:	2200      	movs	r2, #0
 8007970:	2100      	movs	r1, #0
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f004 fdac 	bl	800c4d0 <USBD_LL_PrepareReceive>
 8007978:	e01c      	b.n	80079b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b03      	cmp	r3, #3
 8007984:	d10f      	bne.n	80079a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d009      	beq.n	80079a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079a6:	2180      	movs	r1, #128	; 0x80
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f004 fce7 	bl	800c37c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f001 f8b7 	bl	8008b22 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d03a      	beq.n	8007a34 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f7ff fe42 	bl	8007648 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80079cc:	e032      	b.n	8007a34 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80079ce:	7afb      	ldrb	r3, [r7, #11]
 80079d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	4619      	mov	r1, r3
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f000 f97f 	bl	8007cdc <USBD_CoreFindEP>
 80079de:	4603      	mov	r3, r0
 80079e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
 80079e4:	2bff      	cmp	r3, #255	; 0xff
 80079e6:	d025      	beq.n	8007a34 <USBD_LL_DataInStage+0x15a>
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d122      	bne.n	8007a34 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	d11c      	bne.n	8007a34 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80079fa:	7dfa      	ldrb	r2, [r7, #23]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	32ae      	adds	r2, #174	; 0xae
 8007a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d014      	beq.n	8007a34 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007a0a:	7dfa      	ldrb	r2, [r7, #23]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007a12:	7dfa      	ldrb	r2, [r7, #23]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	32ae      	adds	r2, #174	; 0xae
 8007a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	7afa      	ldrb	r2, [r7, #11]
 8007a20:	4611      	mov	r1, r2
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	4798      	blx	r3
 8007a26:	4603      	mov	r3, r0
 8007a28:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007a2a:	7dbb      	ldrb	r3, [r7, #22]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d001      	beq.n	8007a34 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007a30:	7dbb      	ldrb	r3, [r7, #22]
 8007a32:	e000      	b.n	8007a36 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d014      	beq.n	8007aa4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00e      	beq.n	8007aa4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	6852      	ldr	r2, [r2, #4]
 8007a92:	b2d2      	uxtb	r2, r2
 8007a94:	4611      	mov	r1, r2
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	4798      	blx	r3
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d001      	beq.n	8007aa4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007aa4:	2340      	movs	r3, #64	; 0x40
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f004 fc21 	bl	800c2f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2240      	movs	r2, #64	; 0x40
 8007abc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ac0:	2340      	movs	r3, #64	; 0x40
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2180      	movs	r1, #128	; 0x80
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f004 fc13 	bl	800c2f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2240      	movs	r2, #64	; 0x40
 8007ad6:	621a      	str	r2, [r3, #32]

  return ret;
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b083      	sub	sp, #12
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	460b      	mov	r3, r1
 8007aec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	78fa      	ldrb	r2, [r7, #3]
 8007af2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2204      	movs	r2, #4
 8007b1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b04      	cmp	r3, #4
 8007b40:	d106      	bne.n	8007b50 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b082      	sub	sp, #8
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d110      	bne.n	8007b94 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00b      	beq.n	8007b94 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d005      	beq.n	8007b94 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b082      	sub	sp, #8
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	32ae      	adds	r2, #174	; 0xae
 8007bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e01c      	b.n	8007bfa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d115      	bne.n	8007bf8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	32ae      	adds	r2, #174	; 0xae
 8007bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00b      	beq.n	8007bf8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	32ae      	adds	r2, #174	; 0xae
 8007bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bee:	6a1b      	ldr	r3, [r3, #32]
 8007bf0:	78fa      	ldrb	r2, [r7, #3]
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b082      	sub	sp, #8
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	32ae      	adds	r2, #174	; 0xae
 8007c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e01c      	b.n	8007c5e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d115      	bne.n	8007c5c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	32ae      	adds	r2, #174	; 0xae
 8007c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00b      	beq.n	8007c5c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	32ae      	adds	r2, #174	; 0xae
 8007c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	78fa      	ldrb	r2, [r7, #3]
 8007c56:	4611      	mov	r1, r2
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007c84:	2300      	movs	r3, #0
 8007c86:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00e      	beq.n	8007cb8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	6852      	ldr	r2, [r2, #4]
 8007ca6:	b2d2      	uxtb	r2, r2
 8007ca8:	4611      	mov	r1, r2
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	4798      	blx	r3
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d001      	beq.n	8007cb8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b083      	sub	sp, #12
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	460b      	mov	r3, r1
 8007ccc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007cce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ce8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b086      	sub	sp, #24
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	460b      	mov	r3, r1
 8007d00:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	885b      	ldrh	r3, [r3, #2]
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d920      	bls.n	8007d60 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007d26:	e013      	b.n	8007d50 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007d28:	f107 030a 	add.w	r3, r7, #10
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	6978      	ldr	r0, [r7, #20]
 8007d30:	f000 f81b 	bl	8007d6a <USBD_GetNextDesc>
 8007d34:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	785b      	ldrb	r3, [r3, #1]
 8007d3a:	2b05      	cmp	r3, #5
 8007d3c:	d108      	bne.n	8007d50 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	789b      	ldrb	r3, [r3, #2]
 8007d46:	78fa      	ldrb	r2, [r7, #3]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d008      	beq.n	8007d5e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	885b      	ldrh	r3, [r3, #2]
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	897b      	ldrh	r3, [r7, #10]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d8e5      	bhi.n	8007d28 <USBD_GetEpDesc+0x32>
 8007d5c:	e000      	b.n	8007d60 <USBD_GetEpDesc+0x6a>
          break;
 8007d5e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007d60:	693b      	ldr	r3, [r7, #16]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b085      	sub	sp, #20
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	881a      	ldrh	r2, [r3, #0]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	4413      	add	r3, r2
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4413      	add	r3, r2
 8007d94:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d96:	68fb      	ldr	r3, [r7, #12]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	3301      	adds	r3, #1
 8007dba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007dc2:	8a3b      	ldrh	r3, [r7, #16]
 8007dc4:	021b      	lsls	r3, r3, #8
 8007dc6:	b21a      	sxth	r2, r3
 8007dc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	b21b      	sxth	r3, r3
 8007dd0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007dd2:	89fb      	ldrh	r3, [r7, #14]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	371c      	adds	r7, #28
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007df6:	2b40      	cmp	r3, #64	; 0x40
 8007df8:	d005      	beq.n	8007e06 <USBD_StdDevReq+0x26>
 8007dfa:	2b40      	cmp	r3, #64	; 0x40
 8007dfc:	d857      	bhi.n	8007eae <USBD_StdDevReq+0xce>
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00f      	beq.n	8007e22 <USBD_StdDevReq+0x42>
 8007e02:	2b20      	cmp	r3, #32
 8007e04:	d153      	bne.n	8007eae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	32ae      	adds	r2, #174	; 0xae
 8007e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	4798      	blx	r3
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e20:	e04a      	b.n	8007eb8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	785b      	ldrb	r3, [r3, #1]
 8007e26:	2b09      	cmp	r3, #9
 8007e28:	d83b      	bhi.n	8007ea2 <USBD_StdDevReq+0xc2>
 8007e2a:	a201      	add	r2, pc, #4	; (adr r2, 8007e30 <USBD_StdDevReq+0x50>)
 8007e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e30:	08007e85 	.word	0x08007e85
 8007e34:	08007e99 	.word	0x08007e99
 8007e38:	08007ea3 	.word	0x08007ea3
 8007e3c:	08007e8f 	.word	0x08007e8f
 8007e40:	08007ea3 	.word	0x08007ea3
 8007e44:	08007e63 	.word	0x08007e63
 8007e48:	08007e59 	.word	0x08007e59
 8007e4c:	08007ea3 	.word	0x08007ea3
 8007e50:	08007e7b 	.word	0x08007e7b
 8007e54:	08007e6d 	.word	0x08007e6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fa3c 	bl	80082d8 <USBD_GetDescriptor>
          break;
 8007e60:	e024      	b.n	8007eac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e62:	6839      	ldr	r1, [r7, #0]
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fba1 	bl	80085ac <USBD_SetAddress>
          break;
 8007e6a:	e01f      	b.n	8007eac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fbe0 	bl	8008634 <USBD_SetConfig>
 8007e74:	4603      	mov	r3, r0
 8007e76:	73fb      	strb	r3, [r7, #15]
          break;
 8007e78:	e018      	b.n	8007eac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fc83 	bl	8008788 <USBD_GetConfig>
          break;
 8007e82:	e013      	b.n	8007eac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fcb4 	bl	80087f4 <USBD_GetStatus>
          break;
 8007e8c:	e00e      	b.n	8007eac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fce3 	bl	800885c <USBD_SetFeature>
          break;
 8007e96:	e009      	b.n	8007eac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fd07 	bl	80088ae <USBD_ClrFeature>
          break;
 8007ea0:	e004      	b.n	8007eac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fd5e 	bl	8008966 <USBD_CtlError>
          break;
 8007eaa:	bf00      	nop
      }
      break;
 8007eac:	e004      	b.n	8007eb8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fd58 	bl	8008966 <USBD_CtlError>
      break;
 8007eb6:	bf00      	nop
  }

  return ret;
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop

08007ec4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007eda:	2b40      	cmp	r3, #64	; 0x40
 8007edc:	d005      	beq.n	8007eea <USBD_StdItfReq+0x26>
 8007ede:	2b40      	cmp	r3, #64	; 0x40
 8007ee0:	d852      	bhi.n	8007f88 <USBD_StdItfReq+0xc4>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <USBD_StdItfReq+0x26>
 8007ee6:	2b20      	cmp	r3, #32
 8007ee8:	d14e      	bne.n	8007f88 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d840      	bhi.n	8007f7a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	889b      	ldrh	r3, [r3, #4]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d836      	bhi.n	8007f70 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	889b      	ldrh	r3, [r3, #4]
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7ff fed9 	bl	8007cc2 <USBD_CoreFindIF>
 8007f10:	4603      	mov	r3, r0
 8007f12:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	2bff      	cmp	r3, #255	; 0xff
 8007f18:	d01d      	beq.n	8007f56 <USBD_StdItfReq+0x92>
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d11a      	bne.n	8007f56 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007f20:	7bba      	ldrb	r2, [r7, #14]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	32ae      	adds	r2, #174	; 0xae
 8007f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00f      	beq.n	8007f50 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007f30:	7bba      	ldrb	r2, [r7, #14]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f38:	7bba      	ldrb	r2, [r7, #14]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	32ae      	adds	r2, #174	; 0xae
 8007f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	4798      	blx	r3
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f4e:	e004      	b.n	8007f5a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007f50:	2303      	movs	r3, #3
 8007f52:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f54:	e001      	b.n	8007f5a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007f56:	2303      	movs	r3, #3
 8007f58:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	88db      	ldrh	r3, [r3, #6]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d110      	bne.n	8007f84 <USBD_StdItfReq+0xc0>
 8007f62:	7bfb      	ldrb	r3, [r7, #15]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10d      	bne.n	8007f84 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fdc7 	bl	8008afc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f6e:	e009      	b.n	8007f84 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fcf7 	bl	8008966 <USBD_CtlError>
          break;
 8007f78:	e004      	b.n	8007f84 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fcf2 	bl	8008966 <USBD_CtlError>
          break;
 8007f82:	e000      	b.n	8007f86 <USBD_StdItfReq+0xc2>
          break;
 8007f84:	bf00      	nop
      }
      break;
 8007f86:	e004      	b.n	8007f92 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007f88:	6839      	ldr	r1, [r7, #0]
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fceb 	bl	8008966 <USBD_CtlError>
      break;
 8007f90:	bf00      	nop
  }

  return ret;
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	889b      	ldrh	r3, [r3, #4]
 8007fae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fb8:	2b40      	cmp	r3, #64	; 0x40
 8007fba:	d007      	beq.n	8007fcc <USBD_StdEPReq+0x30>
 8007fbc:	2b40      	cmp	r3, #64	; 0x40
 8007fbe:	f200 817f 	bhi.w	80082c0 <USBD_StdEPReq+0x324>
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d02a      	beq.n	800801c <USBD_StdEPReq+0x80>
 8007fc6:	2b20      	cmp	r3, #32
 8007fc8:	f040 817a 	bne.w	80082c0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007fcc:	7bbb      	ldrb	r3, [r7, #14]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7ff fe83 	bl	8007cdc <USBD_CoreFindEP>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fda:	7b7b      	ldrb	r3, [r7, #13]
 8007fdc:	2bff      	cmp	r3, #255	; 0xff
 8007fde:	f000 8174 	beq.w	80082ca <USBD_StdEPReq+0x32e>
 8007fe2:	7b7b      	ldrb	r3, [r7, #13]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f040 8170 	bne.w	80082ca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007fea:	7b7a      	ldrb	r2, [r7, #13]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007ff2:	7b7a      	ldrb	r2, [r7, #13]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	32ae      	adds	r2, #174	; 0xae
 8007ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f000 8163 	beq.w	80082ca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008004:	7b7a      	ldrb	r2, [r7, #13]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	32ae      	adds	r2, #174	; 0xae
 800800a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	6839      	ldr	r1, [r7, #0]
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	4798      	blx	r3
 8008016:	4603      	mov	r3, r0
 8008018:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800801a:	e156      	b.n	80082ca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	785b      	ldrb	r3, [r3, #1]
 8008020:	2b03      	cmp	r3, #3
 8008022:	d008      	beq.n	8008036 <USBD_StdEPReq+0x9a>
 8008024:	2b03      	cmp	r3, #3
 8008026:	f300 8145 	bgt.w	80082b4 <USBD_StdEPReq+0x318>
 800802a:	2b00      	cmp	r3, #0
 800802c:	f000 809b 	beq.w	8008166 <USBD_StdEPReq+0x1ca>
 8008030:	2b01      	cmp	r3, #1
 8008032:	d03c      	beq.n	80080ae <USBD_StdEPReq+0x112>
 8008034:	e13e      	b.n	80082b4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b02      	cmp	r3, #2
 8008040:	d002      	beq.n	8008048 <USBD_StdEPReq+0xac>
 8008042:	2b03      	cmp	r3, #3
 8008044:	d016      	beq.n	8008074 <USBD_StdEPReq+0xd8>
 8008046:	e02c      	b.n	80080a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008048:	7bbb      	ldrb	r3, [r7, #14]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00d      	beq.n	800806a <USBD_StdEPReq+0xce>
 800804e:	7bbb      	ldrb	r3, [r7, #14]
 8008050:	2b80      	cmp	r3, #128	; 0x80
 8008052:	d00a      	beq.n	800806a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008054:	7bbb      	ldrb	r3, [r7, #14]
 8008056:	4619      	mov	r1, r3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f004 f98f 	bl	800c37c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800805e:	2180      	movs	r1, #128	; 0x80
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f004 f98b 	bl	800c37c <USBD_LL_StallEP>
 8008066:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008068:	e020      	b.n	80080ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fc7a 	bl	8008966 <USBD_CtlError>
              break;
 8008072:	e01b      	b.n	80080ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	885b      	ldrh	r3, [r3, #2]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10e      	bne.n	800809a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800807c:	7bbb      	ldrb	r3, [r7, #14]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00b      	beq.n	800809a <USBD_StdEPReq+0xfe>
 8008082:	7bbb      	ldrb	r3, [r7, #14]
 8008084:	2b80      	cmp	r3, #128	; 0x80
 8008086:	d008      	beq.n	800809a <USBD_StdEPReq+0xfe>
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	88db      	ldrh	r3, [r3, #6]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d104      	bne.n	800809a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008090:	7bbb      	ldrb	r3, [r7, #14]
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f004 f971 	bl	800c37c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fd2e 	bl	8008afc <USBD_CtlSendStatus>

              break;
 80080a0:	e004      	b.n	80080ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fc5e 	bl	8008966 <USBD_CtlError>
              break;
 80080aa:	bf00      	nop
          }
          break;
 80080ac:	e107      	b.n	80082be <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d002      	beq.n	80080c0 <USBD_StdEPReq+0x124>
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	d016      	beq.n	80080ec <USBD_StdEPReq+0x150>
 80080be:	e04b      	b.n	8008158 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00d      	beq.n	80080e2 <USBD_StdEPReq+0x146>
 80080c6:	7bbb      	ldrb	r3, [r7, #14]
 80080c8:	2b80      	cmp	r3, #128	; 0x80
 80080ca:	d00a      	beq.n	80080e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f004 f953 	bl	800c37c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080d6:	2180      	movs	r1, #128	; 0x80
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f004 f94f 	bl	800c37c <USBD_LL_StallEP>
 80080de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080e0:	e040      	b.n	8008164 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fc3e 	bl	8008966 <USBD_CtlError>
              break;
 80080ea:	e03b      	b.n	8008164 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	885b      	ldrh	r3, [r3, #2]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d136      	bne.n	8008162 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80080f4:	7bbb      	ldrb	r3, [r7, #14]
 80080f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d004      	beq.n	8008108 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80080fe:	7bbb      	ldrb	r3, [r7, #14]
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f004 f959 	bl	800c3ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fcf7 	bl	8008afc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800810e:	7bbb      	ldrb	r3, [r7, #14]
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7ff fde2 	bl	8007cdc <USBD_CoreFindEP>
 8008118:	4603      	mov	r3, r0
 800811a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800811c:	7b7b      	ldrb	r3, [r7, #13]
 800811e:	2bff      	cmp	r3, #255	; 0xff
 8008120:	d01f      	beq.n	8008162 <USBD_StdEPReq+0x1c6>
 8008122:	7b7b      	ldrb	r3, [r7, #13]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d11c      	bne.n	8008162 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008128:	7b7a      	ldrb	r2, [r7, #13]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008130:	7b7a      	ldrb	r2, [r7, #13]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	32ae      	adds	r2, #174	; 0xae
 8008136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d010      	beq.n	8008162 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008140:	7b7a      	ldrb	r2, [r7, #13]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	32ae      	adds	r2, #174	; 0xae
 8008146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	4798      	blx	r3
 8008152:	4603      	mov	r3, r0
 8008154:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008156:	e004      	b.n	8008162 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fc03 	bl	8008966 <USBD_CtlError>
              break;
 8008160:	e000      	b.n	8008164 <USBD_StdEPReq+0x1c8>
              break;
 8008162:	bf00      	nop
          }
          break;
 8008164:	e0ab      	b.n	80082be <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b02      	cmp	r3, #2
 8008170:	d002      	beq.n	8008178 <USBD_StdEPReq+0x1dc>
 8008172:	2b03      	cmp	r3, #3
 8008174:	d032      	beq.n	80081dc <USBD_StdEPReq+0x240>
 8008176:	e097      	b.n	80082a8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008178:	7bbb      	ldrb	r3, [r7, #14]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d007      	beq.n	800818e <USBD_StdEPReq+0x1f2>
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	2b80      	cmp	r3, #128	; 0x80
 8008182:	d004      	beq.n	800818e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008184:	6839      	ldr	r1, [r7, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fbed 	bl	8008966 <USBD_CtlError>
                break;
 800818c:	e091      	b.n	80082b2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800818e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008192:	2b00      	cmp	r3, #0
 8008194:	da0b      	bge.n	80081ae <USBD_StdEPReq+0x212>
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800819c:	4613      	mov	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	3310      	adds	r3, #16
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	4413      	add	r3, r2
 80081aa:	3304      	adds	r3, #4
 80081ac:	e00b      	b.n	80081c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081ae:	7bbb      	ldrb	r3, [r7, #14]
 80081b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081b4:	4613      	mov	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	4413      	add	r3, r2
 80081c4:	3304      	adds	r3, #4
 80081c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2200      	movs	r2, #0
 80081cc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	2202      	movs	r2, #2
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fc37 	bl	8008a48 <USBD_CtlSendData>
              break;
 80081da:	e06a      	b.n	80082b2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	da11      	bge.n	8008208 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081e4:	7bbb      	ldrb	r3, [r7, #14]
 80081e6:	f003 020f 	and.w	r2, r3, #15
 80081ea:	6879      	ldr	r1, [r7, #4]
 80081ec:	4613      	mov	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4413      	add	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	440b      	add	r3, r1
 80081f6:	3324      	adds	r3, #36	; 0x24
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d117      	bne.n	800822e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fbb0 	bl	8008966 <USBD_CtlError>
                  break;
 8008206:	e054      	b.n	80082b2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008208:	7bbb      	ldrb	r3, [r7, #14]
 800820a:	f003 020f 	and.w	r2, r3, #15
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	4613      	mov	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	440b      	add	r3, r1
 800821a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800821e:	881b      	ldrh	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d104      	bne.n	800822e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fb9d 	bl	8008966 <USBD_CtlError>
                  break;
 800822c:	e041      	b.n	80082b2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800822e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008232:	2b00      	cmp	r3, #0
 8008234:	da0b      	bge.n	800824e <USBD_StdEPReq+0x2b2>
 8008236:	7bbb      	ldrb	r3, [r7, #14]
 8008238:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800823c:	4613      	mov	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	3310      	adds	r3, #16
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	4413      	add	r3, r2
 800824a:	3304      	adds	r3, #4
 800824c:	e00b      	b.n	8008266 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800824e:	7bbb      	ldrb	r3, [r7, #14]
 8008250:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008254:	4613      	mov	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4413      	add	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	4413      	add	r3, r2
 8008264:	3304      	adds	r3, #4
 8008266:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008268:	7bbb      	ldrb	r3, [r7, #14]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <USBD_StdEPReq+0x2d8>
 800826e:	7bbb      	ldrb	r3, [r7, #14]
 8008270:	2b80      	cmp	r3, #128	; 0x80
 8008272:	d103      	bne.n	800827c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2200      	movs	r2, #0
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	e00e      	b.n	800829a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800827c:	7bbb      	ldrb	r3, [r7, #14]
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f004 f8b9 	bl	800c3f8 <USBD_LL_IsStallEP>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	2201      	movs	r2, #1
 8008290:	601a      	str	r2, [r3, #0]
 8008292:	e002      	b.n	800829a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2200      	movs	r2, #0
 8008298:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	2202      	movs	r2, #2
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fbd1 	bl	8008a48 <USBD_CtlSendData>
              break;
 80082a6:	e004      	b.n	80082b2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fb5b 	bl	8008966 <USBD_CtlError>
              break;
 80082b0:	bf00      	nop
          }
          break;
 80082b2:	e004      	b.n	80082be <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fb55 	bl	8008966 <USBD_CtlError>
          break;
 80082bc:	bf00      	nop
      }
      break;
 80082be:	e005      	b.n	80082cc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fb4f 	bl	8008966 <USBD_CtlError>
      break;
 80082c8:	e000      	b.n	80082cc <USBD_StdEPReq+0x330>
      break;
 80082ca:	bf00      	nop
  }

  return ret;
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
	...

080082d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082e2:	2300      	movs	r3, #0
 80082e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082e6:	2300      	movs	r3, #0
 80082e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	885b      	ldrh	r3, [r3, #2]
 80082f2:	0a1b      	lsrs	r3, r3, #8
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	3b01      	subs	r3, #1
 80082f8:	2b06      	cmp	r3, #6
 80082fa:	f200 8128 	bhi.w	800854e <USBD_GetDescriptor+0x276>
 80082fe:	a201      	add	r2, pc, #4	; (adr r2, 8008304 <USBD_GetDescriptor+0x2c>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	08008321 	.word	0x08008321
 8008308:	08008339 	.word	0x08008339
 800830c:	08008379 	.word	0x08008379
 8008310:	0800854f 	.word	0x0800854f
 8008314:	0800854f 	.word	0x0800854f
 8008318:	080084ef 	.word	0x080084ef
 800831c:	0800851b 	.word	0x0800851b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	7c12      	ldrb	r2, [r2, #16]
 800832c:	f107 0108 	add.w	r1, r7, #8
 8008330:	4610      	mov	r0, r2
 8008332:	4798      	blx	r3
 8008334:	60f8      	str	r0, [r7, #12]
      break;
 8008336:	e112      	b.n	800855e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	7c1b      	ldrb	r3, [r3, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10d      	bne.n	800835c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008348:	f107 0208 	add.w	r2, r7, #8
 800834c:	4610      	mov	r0, r2
 800834e:	4798      	blx	r3
 8008350:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	3301      	adds	r3, #1
 8008356:	2202      	movs	r2, #2
 8008358:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800835a:	e100      	b.n	800855e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008364:	f107 0208 	add.w	r2, r7, #8
 8008368:	4610      	mov	r0, r2
 800836a:	4798      	blx	r3
 800836c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	3301      	adds	r3, #1
 8008372:	2202      	movs	r2, #2
 8008374:	701a      	strb	r2, [r3, #0]
      break;
 8008376:	e0f2      	b.n	800855e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	885b      	ldrh	r3, [r3, #2]
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b05      	cmp	r3, #5
 8008380:	f200 80ac 	bhi.w	80084dc <USBD_GetDescriptor+0x204>
 8008384:	a201      	add	r2, pc, #4	; (adr r2, 800838c <USBD_GetDescriptor+0xb4>)
 8008386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838a:	bf00      	nop
 800838c:	080083a5 	.word	0x080083a5
 8008390:	080083d9 	.word	0x080083d9
 8008394:	0800840d 	.word	0x0800840d
 8008398:	08008441 	.word	0x08008441
 800839c:	08008475 	.word	0x08008475
 80083a0:	080084a9 	.word	0x080084a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00b      	beq.n	80083c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	7c12      	ldrb	r2, [r2, #16]
 80083bc:	f107 0108 	add.w	r1, r7, #8
 80083c0:	4610      	mov	r0, r2
 80083c2:	4798      	blx	r3
 80083c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083c6:	e091      	b.n	80084ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 facb 	bl	8008966 <USBD_CtlError>
            err++;
 80083d0:	7afb      	ldrb	r3, [r7, #11]
 80083d2:	3301      	adds	r3, #1
 80083d4:	72fb      	strb	r3, [r7, #11]
          break;
 80083d6:	e089      	b.n	80084ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00b      	beq.n	80083fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	7c12      	ldrb	r2, [r2, #16]
 80083f0:	f107 0108 	add.w	r1, r7, #8
 80083f4:	4610      	mov	r0, r2
 80083f6:	4798      	blx	r3
 80083f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083fa:	e077      	b.n	80084ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fab1 	bl	8008966 <USBD_CtlError>
            err++;
 8008404:	7afb      	ldrb	r3, [r7, #11]
 8008406:	3301      	adds	r3, #1
 8008408:	72fb      	strb	r3, [r7, #11]
          break;
 800840a:	e06f      	b.n	80084ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00b      	beq.n	8008430 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	7c12      	ldrb	r2, [r2, #16]
 8008424:	f107 0108 	add.w	r1, r7, #8
 8008428:	4610      	mov	r0, r2
 800842a:	4798      	blx	r3
 800842c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800842e:	e05d      	b.n	80084ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fa97 	bl	8008966 <USBD_CtlError>
            err++;
 8008438:	7afb      	ldrb	r3, [r7, #11]
 800843a:	3301      	adds	r3, #1
 800843c:	72fb      	strb	r3, [r7, #11]
          break;
 800843e:	e055      	b.n	80084ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00b      	beq.n	8008464 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	7c12      	ldrb	r2, [r2, #16]
 8008458:	f107 0108 	add.w	r1, r7, #8
 800845c:	4610      	mov	r0, r2
 800845e:	4798      	blx	r3
 8008460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008462:	e043      	b.n	80084ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008464:	6839      	ldr	r1, [r7, #0]
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fa7d 	bl	8008966 <USBD_CtlError>
            err++;
 800846c:	7afb      	ldrb	r3, [r7, #11]
 800846e:	3301      	adds	r3, #1
 8008470:	72fb      	strb	r3, [r7, #11]
          break;
 8008472:	e03b      	b.n	80084ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00b      	beq.n	8008498 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008486:	695b      	ldr	r3, [r3, #20]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	7c12      	ldrb	r2, [r2, #16]
 800848c:	f107 0108 	add.w	r1, r7, #8
 8008490:	4610      	mov	r0, r2
 8008492:	4798      	blx	r3
 8008494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008496:	e029      	b.n	80084ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fa63 	bl	8008966 <USBD_CtlError>
            err++;
 80084a0:	7afb      	ldrb	r3, [r7, #11]
 80084a2:	3301      	adds	r3, #1
 80084a4:	72fb      	strb	r3, [r7, #11]
          break;
 80084a6:	e021      	b.n	80084ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00b      	beq.n	80084cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	7c12      	ldrb	r2, [r2, #16]
 80084c0:	f107 0108 	add.w	r1, r7, #8
 80084c4:	4610      	mov	r0, r2
 80084c6:	4798      	blx	r3
 80084c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ca:	e00f      	b.n	80084ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fa49 	bl	8008966 <USBD_CtlError>
            err++;
 80084d4:	7afb      	ldrb	r3, [r7, #11]
 80084d6:	3301      	adds	r3, #1
 80084d8:	72fb      	strb	r3, [r7, #11]
          break;
 80084da:	e007      	b.n	80084ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fa41 	bl	8008966 <USBD_CtlError>
          err++;
 80084e4:	7afb      	ldrb	r3, [r7, #11]
 80084e6:	3301      	adds	r3, #1
 80084e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80084ea:	bf00      	nop
      }
      break;
 80084ec:	e037      	b.n	800855e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	7c1b      	ldrb	r3, [r3, #16]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d109      	bne.n	800850a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fe:	f107 0208 	add.w	r2, r7, #8
 8008502:	4610      	mov	r0, r2
 8008504:	4798      	blx	r3
 8008506:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008508:	e029      	b.n	800855e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fa2a 	bl	8008966 <USBD_CtlError>
        err++;
 8008512:	7afb      	ldrb	r3, [r7, #11]
 8008514:	3301      	adds	r3, #1
 8008516:	72fb      	strb	r3, [r7, #11]
      break;
 8008518:	e021      	b.n	800855e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	7c1b      	ldrb	r3, [r3, #16]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10d      	bne.n	800853e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852a:	f107 0208 	add.w	r2, r7, #8
 800852e:	4610      	mov	r0, r2
 8008530:	4798      	blx	r3
 8008532:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	3301      	adds	r3, #1
 8008538:	2207      	movs	r2, #7
 800853a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800853c:	e00f      	b.n	800855e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fa10 	bl	8008966 <USBD_CtlError>
        err++;
 8008546:	7afb      	ldrb	r3, [r7, #11]
 8008548:	3301      	adds	r3, #1
 800854a:	72fb      	strb	r3, [r7, #11]
      break;
 800854c:	e007      	b.n	800855e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fa08 	bl	8008966 <USBD_CtlError>
      err++;
 8008556:	7afb      	ldrb	r3, [r7, #11]
 8008558:	3301      	adds	r3, #1
 800855a:	72fb      	strb	r3, [r7, #11]
      break;
 800855c:	bf00      	nop
  }

  if (err != 0U)
 800855e:	7afb      	ldrb	r3, [r7, #11]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d11e      	bne.n	80085a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	88db      	ldrh	r3, [r3, #6]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d016      	beq.n	800859a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800856c:	893b      	ldrh	r3, [r7, #8]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00e      	beq.n	8008590 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	88da      	ldrh	r2, [r3, #6]
 8008576:	893b      	ldrh	r3, [r7, #8]
 8008578:	4293      	cmp	r3, r2
 800857a:	bf28      	it	cs
 800857c:	4613      	movcs	r3, r2
 800857e:	b29b      	uxth	r3, r3
 8008580:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008582:	893b      	ldrh	r3, [r7, #8]
 8008584:	461a      	mov	r2, r3
 8008586:	68f9      	ldr	r1, [r7, #12]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 fa5d 	bl	8008a48 <USBD_CtlSendData>
 800858e:	e009      	b.n	80085a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008590:	6839      	ldr	r1, [r7, #0]
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f9e7 	bl	8008966 <USBD_CtlError>
 8008598:	e004      	b.n	80085a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 faae 	bl	8008afc <USBD_CtlSendStatus>
 80085a0:	e000      	b.n	80085a4 <USBD_GetDescriptor+0x2cc>
    return;
 80085a2:	bf00      	nop
  }
}
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop

080085ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	889b      	ldrh	r3, [r3, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d131      	bne.n	8008622 <USBD_SetAddress+0x76>
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	88db      	ldrh	r3, [r3, #6]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d12d      	bne.n	8008622 <USBD_SetAddress+0x76>
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	885b      	ldrh	r3, [r3, #2]
 80085ca:	2b7f      	cmp	r3, #127	; 0x7f
 80085cc:	d829      	bhi.n	8008622 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	885b      	ldrh	r3, [r3, #2]
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	d104      	bne.n	80085f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80085e6:	6839      	ldr	r1, [r7, #0]
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f9bc 	bl	8008966 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ee:	e01d      	b.n	800862c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	7bfa      	ldrb	r2, [r7, #15]
 80085f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f003 ff27 	bl	800c450 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fa7a 	bl	8008afc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008608:	7bfb      	ldrb	r3, [r7, #15]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d004      	beq.n	8008618 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2202      	movs	r2, #2
 8008612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008616:	e009      	b.n	800862c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008620:	e004      	b.n	800862c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f99e 	bl	8008966 <USBD_CtlError>
  }
}
 800862a:	bf00      	nop
 800862c:	bf00      	nop
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	885b      	ldrh	r3, [r3, #2]
 8008646:	b2da      	uxtb	r2, r3
 8008648:	4b4e      	ldr	r3, [pc, #312]	; (8008784 <USBD_SetConfig+0x150>)
 800864a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800864c:	4b4d      	ldr	r3, [pc, #308]	; (8008784 <USBD_SetConfig+0x150>)
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d905      	bls.n	8008660 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f985 	bl	8008966 <USBD_CtlError>
    return USBD_FAIL;
 800865c:	2303      	movs	r3, #3
 800865e:	e08c      	b.n	800877a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b02      	cmp	r3, #2
 800866a:	d002      	beq.n	8008672 <USBD_SetConfig+0x3e>
 800866c:	2b03      	cmp	r3, #3
 800866e:	d029      	beq.n	80086c4 <USBD_SetConfig+0x90>
 8008670:	e075      	b.n	800875e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008672:	4b44      	ldr	r3, [pc, #272]	; (8008784 <USBD_SetConfig+0x150>)
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d020      	beq.n	80086bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800867a:	4b42      	ldr	r3, [pc, #264]	; (8008784 <USBD_SetConfig+0x150>)
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008684:	4b3f      	ldr	r3, [pc, #252]	; (8008784 <USBD_SetConfig+0x150>)
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7fe ffe7 	bl	800765e <USBD_SetClassConfig>
 8008690:	4603      	mov	r3, r0
 8008692:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d008      	beq.n	80086ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f962 	bl	8008966 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2202      	movs	r2, #2
 80086a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80086aa:	e065      	b.n	8008778 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fa25 	bl	8008afc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2203      	movs	r2, #3
 80086b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086ba:	e05d      	b.n	8008778 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fa1d 	bl	8008afc <USBD_CtlSendStatus>
      break;
 80086c2:	e059      	b.n	8008778 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80086c4:	4b2f      	ldr	r3, [pc, #188]	; (8008784 <USBD_SetConfig+0x150>)
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d112      	bne.n	80086f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2202      	movs	r2, #2
 80086d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80086d4:	4b2b      	ldr	r3, [pc, #172]	; (8008784 <USBD_SetConfig+0x150>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	461a      	mov	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086de:	4b29      	ldr	r3, [pc, #164]	; (8008784 <USBD_SetConfig+0x150>)
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f7fe ffd6 	bl	8007696 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fa06 	bl	8008afc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80086f0:	e042      	b.n	8008778 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80086f2:	4b24      	ldr	r3, [pc, #144]	; (8008784 <USBD_SetConfig+0x150>)
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	461a      	mov	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d02a      	beq.n	8008756 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	b2db      	uxtb	r3, r3
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7fe ffc4 	bl	8007696 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800870e:	4b1d      	ldr	r3, [pc, #116]	; (8008784 <USBD_SetConfig+0x150>)
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	461a      	mov	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008718:	4b1a      	ldr	r3, [pc, #104]	; (8008784 <USBD_SetConfig+0x150>)
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7fe ff9d 	bl	800765e <USBD_SetClassConfig>
 8008724:	4603      	mov	r3, r0
 8008726:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00f      	beq.n	800874e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f918 	bl	8008966 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	b2db      	uxtb	r3, r3
 800873c:	4619      	mov	r1, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7fe ffa9 	bl	8007696 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2202      	movs	r2, #2
 8008748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800874c:	e014      	b.n	8008778 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f9d4 	bl	8008afc <USBD_CtlSendStatus>
      break;
 8008754:	e010      	b.n	8008778 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f9d0 	bl	8008afc <USBD_CtlSendStatus>
      break;
 800875c:	e00c      	b.n	8008778 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800875e:	6839      	ldr	r1, [r7, #0]
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 f900 	bl	8008966 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008766:	4b07      	ldr	r3, [pc, #28]	; (8008784 <USBD_SetConfig+0x150>)
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7fe ff92 	bl	8007696 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008772:	2303      	movs	r3, #3
 8008774:	73fb      	strb	r3, [r7, #15]
      break;
 8008776:	bf00      	nop
  }

  return ret;
 8008778:	7bfb      	ldrb	r3, [r7, #15]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	200007f8 	.word	0x200007f8

08008788 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	88db      	ldrh	r3, [r3, #6]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d004      	beq.n	80087a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f8e2 	bl	8008966 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80087a2:	e023      	b.n	80087ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	dc02      	bgt.n	80087b6 <USBD_GetConfig+0x2e>
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	dc03      	bgt.n	80087bc <USBD_GetConfig+0x34>
 80087b4:	e015      	b.n	80087e2 <USBD_GetConfig+0x5a>
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d00b      	beq.n	80087d2 <USBD_GetConfig+0x4a>
 80087ba:	e012      	b.n	80087e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	3308      	adds	r3, #8
 80087c6:	2201      	movs	r2, #1
 80087c8:	4619      	mov	r1, r3
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f93c 	bl	8008a48 <USBD_CtlSendData>
        break;
 80087d0:	e00c      	b.n	80087ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	3304      	adds	r3, #4
 80087d6:	2201      	movs	r2, #1
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f934 	bl	8008a48 <USBD_CtlSendData>
        break;
 80087e0:	e004      	b.n	80087ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 f8be 	bl	8008966 <USBD_CtlError>
        break;
 80087ea:	bf00      	nop
}
 80087ec:	bf00      	nop
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008804:	b2db      	uxtb	r3, r3
 8008806:	3b01      	subs	r3, #1
 8008808:	2b02      	cmp	r3, #2
 800880a:	d81e      	bhi.n	800884a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	88db      	ldrh	r3, [r3, #6]
 8008810:	2b02      	cmp	r3, #2
 8008812:	d004      	beq.n	800881e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008814:	6839      	ldr	r1, [r7, #0]
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f8a5 	bl	8008966 <USBD_CtlError>
        break;
 800881c:	e01a      	b.n	8008854 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800882a:	2b00      	cmp	r3, #0
 800882c:	d005      	beq.n	800883a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	f043 0202 	orr.w	r2, r3, #2
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	330c      	adds	r3, #12
 800883e:	2202      	movs	r2, #2
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f900 	bl	8008a48 <USBD_CtlSendData>
      break;
 8008848:	e004      	b.n	8008854 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f88a 	bl	8008966 <USBD_CtlError>
      break;
 8008852:	bf00      	nop
  }
}
 8008854:	bf00      	nop
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	885b      	ldrh	r3, [r3, #2]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d107      	bne.n	800887e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f940 	bl	8008afc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800887c:	e013      	b.n	80088a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	885b      	ldrh	r3, [r3, #2]
 8008882:	2b02      	cmp	r3, #2
 8008884:	d10b      	bne.n	800889e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	889b      	ldrh	r3, [r3, #4]
 800888a:	0a1b      	lsrs	r3, r3, #8
 800888c:	b29b      	uxth	r3, r3
 800888e:	b2da      	uxtb	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f930 	bl	8008afc <USBD_CtlSendStatus>
}
 800889c:	e003      	b.n	80088a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800889e:	6839      	ldr	r1, [r7, #0]
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f860 	bl	8008966 <USBD_CtlError>
}
 80088a6:	bf00      	nop
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b082      	sub	sp, #8
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	3b01      	subs	r3, #1
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d80b      	bhi.n	80088de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	885b      	ldrh	r3, [r3, #2]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d10c      	bne.n	80088e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f910 	bl	8008afc <USBD_CtlSendStatus>
      }
      break;
 80088dc:	e004      	b.n	80088e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f840 	bl	8008966 <USBD_CtlError>
      break;
 80088e6:	e000      	b.n	80088ea <USBD_ClrFeature+0x3c>
      break;
 80088e8:	bf00      	nop
  }
}
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	781a      	ldrb	r2, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	3301      	adds	r3, #1
 800890c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	781a      	ldrb	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	3301      	adds	r3, #1
 800891a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f7ff fa41 	bl	8007da4 <SWAPBYTE>
 8008922:	4603      	mov	r3, r0
 8008924:	461a      	mov	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3301      	adds	r3, #1
 800892e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	3301      	adds	r3, #1
 8008934:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f7ff fa34 	bl	8007da4 <SWAPBYTE>
 800893c:	4603      	mov	r3, r0
 800893e:	461a      	mov	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	3301      	adds	r3, #1
 8008948:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	3301      	adds	r3, #1
 800894e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f7ff fa27 	bl	8007da4 <SWAPBYTE>
 8008956:	4603      	mov	r3, r0
 8008958:	461a      	mov	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	80da      	strh	r2, [r3, #6]
}
 800895e:	bf00      	nop
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b082      	sub	sp, #8
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008970:	2180      	movs	r1, #128	; 0x80
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f003 fd02 	bl	800c37c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008978:	2100      	movs	r1, #0
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f003 fcfe 	bl	800c37c <USBD_LL_StallEP>
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b086      	sub	sp, #24
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008994:	2300      	movs	r3, #0
 8008996:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d036      	beq.n	8008a0c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80089a2:	6938      	ldr	r0, [r7, #16]
 80089a4:	f000 f836 	bl	8008a14 <USBD_GetLen>
 80089a8:	4603      	mov	r3, r0
 80089aa:	3301      	adds	r3, #1
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	005b      	lsls	r3, r3, #1
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	4413      	add	r3, r2
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	7812      	ldrb	r2, [r2, #0]
 80089c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80089c2:	7dfb      	ldrb	r3, [r7, #23]
 80089c4:	3301      	adds	r3, #1
 80089c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80089c8:	7dfb      	ldrb	r3, [r7, #23]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	4413      	add	r3, r2
 80089ce:	2203      	movs	r2, #3
 80089d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
 80089d4:	3301      	adds	r3, #1
 80089d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80089d8:	e013      	b.n	8008a02 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80089da:	7dfb      	ldrb	r3, [r7, #23]
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	4413      	add	r3, r2
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	7812      	ldrb	r2, [r2, #0]
 80089e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	3301      	adds	r3, #1
 80089ea:	613b      	str	r3, [r7, #16]
    idx++;
 80089ec:	7dfb      	ldrb	r3, [r7, #23]
 80089ee:	3301      	adds	r3, #1
 80089f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80089f2:	7dfb      	ldrb	r3, [r7, #23]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	4413      	add	r3, r2
 80089f8:	2200      	movs	r2, #0
 80089fa:	701a      	strb	r2, [r3, #0]
    idx++;
 80089fc:	7dfb      	ldrb	r3, [r7, #23]
 80089fe:	3301      	adds	r3, #1
 8008a00:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1e7      	bne.n	80089da <USBD_GetString+0x52>
 8008a0a:	e000      	b.n	8008a0e <USBD_GetString+0x86>
    return;
 8008a0c:	bf00      	nop
  }
}
 8008a0e:	3718      	adds	r7, #24
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008a24:	e005      	b.n	8008a32 <USBD_GetLen+0x1e>
  {
    len++;
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1f5      	bne.n	8008a26 <USBD_GetLen+0x12>
  }

  return len;
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2202      	movs	r2, #2
 8008a58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f003 fd0d 	bl	800c48e <USBD_LL_Transmit>

  return USBD_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	60f8      	str	r0, [r7, #12]
 8008a86:	60b9      	str	r1, [r7, #8]
 8008a88:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	2100      	movs	r1, #0
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f003 fcfc 	bl	800c48e <USBD_LL_Transmit>

  return USBD_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2203      	movs	r2, #3
 8008ab0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	2100      	movs	r1, #0
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f003 fd00 	bl	800c4d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b084      	sub	sp, #16
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	60b9      	str	r1, [r7, #8]
 8008ae4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	2100      	movs	r1, #0
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f003 fcef 	bl	800c4d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2204      	movs	r2, #4
 8008b08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	2200      	movs	r2, #0
 8008b10:	2100      	movs	r1, #0
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f003 fcbb 	bl	800c48e <USBD_LL_Transmit>

  return USBD_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b082      	sub	sp, #8
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2205      	movs	r2, #5
 8008b2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b32:	2300      	movs	r3, #0
 8008b34:	2200      	movs	r2, #0
 8008b36:	2100      	movs	r1, #0
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f003 fcc9 	bl	800c4d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <__NVIC_SetPriority>:
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	6039      	str	r1, [r7, #0]
 8008b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	db0a      	blt.n	8008b72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	490c      	ldr	r1, [pc, #48]	; (8008b94 <__NVIC_SetPriority+0x4c>)
 8008b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b66:	0112      	lsls	r2, r2, #4
 8008b68:	b2d2      	uxtb	r2, r2
 8008b6a:	440b      	add	r3, r1
 8008b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008b70:	e00a      	b.n	8008b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	b2da      	uxtb	r2, r3
 8008b76:	4908      	ldr	r1, [pc, #32]	; (8008b98 <__NVIC_SetPriority+0x50>)
 8008b78:	79fb      	ldrb	r3, [r7, #7]
 8008b7a:	f003 030f 	and.w	r3, r3, #15
 8008b7e:	3b04      	subs	r3, #4
 8008b80:	0112      	lsls	r2, r2, #4
 8008b82:	b2d2      	uxtb	r2, r2
 8008b84:	440b      	add	r3, r1
 8008b86:	761a      	strb	r2, [r3, #24]
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr
 8008b94:	e000e100 	.word	0xe000e100
 8008b98:	e000ed00 	.word	0xe000ed00

08008b9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008ba0:	4b05      	ldr	r3, [pc, #20]	; (8008bb8 <SysTick_Handler+0x1c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008ba4:	f001 ffbe 	bl	800ab24 <xTaskGetSchedulerState>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d001      	beq.n	8008bb2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008bae:	f002 fda3 	bl	800b6f8 <xPortSysTickHandler>
  }
}
 8008bb2:	bf00      	nop
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	e000e010 	.word	0xe000e010

08008bbc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	f06f 0004 	mvn.w	r0, #4
 8008bc6:	f7ff ffbf 	bl	8008b48 <__NVIC_SetPriority>
#endif
}
 8008bca:	bf00      	nop
 8008bcc:	bd80      	pop	{r7, pc}
	...

08008bd0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bd6:	f3ef 8305 	mrs	r3, IPSR
 8008bda:	603b      	str	r3, [r7, #0]
  return(result);
 8008bdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d003      	beq.n	8008bea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008be2:	f06f 0305 	mvn.w	r3, #5
 8008be6:	607b      	str	r3, [r7, #4]
 8008be8:	e00c      	b.n	8008c04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008bea:	4b0a      	ldr	r3, [pc, #40]	; (8008c14 <osKernelInitialize+0x44>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d105      	bne.n	8008bfe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008bf2:	4b08      	ldr	r3, [pc, #32]	; (8008c14 <osKernelInitialize+0x44>)
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	607b      	str	r3, [r7, #4]
 8008bfc:	e002      	b.n	8008c04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8008c02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c04:	687b      	ldr	r3, [r7, #4]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	200007fc 	.word	0x200007fc

08008c18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c1e:	f3ef 8305 	mrs	r3, IPSR
 8008c22:	603b      	str	r3, [r7, #0]
  return(result);
 8008c24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d003      	beq.n	8008c32 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008c2a:	f06f 0305 	mvn.w	r3, #5
 8008c2e:	607b      	str	r3, [r7, #4]
 8008c30:	e010      	b.n	8008c54 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008c32:	4b0b      	ldr	r3, [pc, #44]	; (8008c60 <osKernelStart+0x48>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d109      	bne.n	8008c4e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008c3a:	f7ff ffbf 	bl	8008bbc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008c3e:	4b08      	ldr	r3, [pc, #32]	; (8008c60 <osKernelStart+0x48>)
 8008c40:	2202      	movs	r2, #2
 8008c42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008c44:	f001 fb12 	bl	800a26c <vTaskStartScheduler>
      stat = osOK;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	607b      	str	r3, [r7, #4]
 8008c4c:	e002      	b.n	8008c54 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c54:	687b      	ldr	r3, [r7, #4]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	200007fc 	.word	0x200007fc

08008c64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b08e      	sub	sp, #56	; 0x38
 8008c68:	af04      	add	r7, sp, #16
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008c70:	2300      	movs	r3, #0
 8008c72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c74:	f3ef 8305 	mrs	r3, IPSR
 8008c78:	617b      	str	r3, [r7, #20]
  return(result);
 8008c7a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d17e      	bne.n	8008d7e <osThreadNew+0x11a>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d07b      	beq.n	8008d7e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008c86:	2380      	movs	r3, #128	; 0x80
 8008c88:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008c8a:	2318      	movs	r3, #24
 8008c8c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008c92:	f04f 33ff 	mov.w	r3, #4294967295
 8008c96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d045      	beq.n	8008d2a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d002      	beq.n	8008cac <osThreadNew+0x48>
        name = attr->name;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d008      	beq.n	8008cd2 <osThreadNew+0x6e>
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	2b38      	cmp	r3, #56	; 0x38
 8008cc4:	d805      	bhi.n	8008cd2 <osThreadNew+0x6e>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <osThreadNew+0x72>
        return (NULL);
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	e054      	b.n	8008d80 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	695b      	ldr	r3, [r3, #20]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d003      	beq.n	8008ce6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	089b      	lsrs	r3, r3, #2
 8008ce4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00e      	beq.n	8008d0c <osThreadNew+0xa8>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	2ba7      	cmp	r3, #167	; 0xa7
 8008cf4:	d90a      	bls.n	8008d0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d006      	beq.n	8008d0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d002      	beq.n	8008d0c <osThreadNew+0xa8>
        mem = 1;
 8008d06:	2301      	movs	r3, #1
 8008d08:	61bb      	str	r3, [r7, #24]
 8008d0a:	e010      	b.n	8008d2e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10c      	bne.n	8008d2e <osThreadNew+0xca>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d108      	bne.n	8008d2e <osThreadNew+0xca>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d104      	bne.n	8008d2e <osThreadNew+0xca>
          mem = 0;
 8008d24:	2300      	movs	r3, #0
 8008d26:	61bb      	str	r3, [r7, #24]
 8008d28:	e001      	b.n	8008d2e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d110      	bne.n	8008d56 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d3c:	9202      	str	r2, [sp, #8]
 8008d3e:	9301      	str	r3, [sp, #4]
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	6a3a      	ldr	r2, [r7, #32]
 8008d48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f001 f824 	bl	8009d98 <xTaskCreateStatic>
 8008d50:	4603      	mov	r3, r0
 8008d52:	613b      	str	r3, [r7, #16]
 8008d54:	e013      	b.n	8008d7e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d110      	bne.n	8008d7e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008d5c:	6a3b      	ldr	r3, [r7, #32]
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	f107 0310 	add.w	r3, r7, #16
 8008d64:	9301      	str	r3, [sp, #4]
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f001 f86f 	bl	8009e52 <xTaskCreate>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d001      	beq.n	8008d7e <osThreadNew+0x11a>
            hTask = NULL;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008d7e:	693b      	ldr	r3, [r7, #16]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3728      	adds	r7, #40	; 0x28
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d90:	f3ef 8305 	mrs	r3, IPSR
 8008d94:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d96:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d003      	beq.n	8008da4 <osDelay+0x1c>
    stat = osErrorISR;
 8008d9c:	f06f 0305 	mvn.w	r3, #5
 8008da0:	60fb      	str	r3, [r7, #12]
 8008da2:	e007      	b.n	8008db4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d002      	beq.n	8008db4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f001 fa28 	bl	800a204 <vTaskDelay>
    }
  }

  return (stat);
 8008db4:	68fb      	ldr	r3, [r7, #12]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b086      	sub	sp, #24
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dc6:	f3ef 8305 	mrs	r3, IPSR
 8008dca:	60fb      	str	r3, [r7, #12]
  return(result);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d003      	beq.n	8008dda <osDelayUntil+0x1c>
    stat = osErrorISR;
 8008dd2:	f06f 0305 	mvn.w	r3, #5
 8008dd6:	617b      	str	r3, [r7, #20]
 8008dd8:	e019      	b.n	8008e0e <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8008dde:	f001 fb61 	bl	800a4a4 <xTaskGetTickCount>
 8008de2:	4603      	mov	r3, r0
 8008de4:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d009      	beq.n	8008e08 <osDelayUntil+0x4a>
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	db06      	blt.n	8008e08 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8008dfa:	f107 0308 	add.w	r3, r7, #8
 8008dfe:	6939      	ldr	r1, [r7, #16]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f001 f981 	bl	800a108 <vTaskDelayUntil>
 8008e06:	e002      	b.n	8008e0e <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8008e08:	f06f 0303 	mvn.w	r3, #3
 8008e0c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008e0e:	697b      	ldr	r3, [r7, #20]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3718      	adds	r7, #24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b08a      	sub	sp, #40	; 0x28
 8008e1c:	af02      	add	r7, sp, #8
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008e24:	2300      	movs	r3, #0
 8008e26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e28:	f3ef 8305 	mrs	r3, IPSR
 8008e2c:	613b      	str	r3, [r7, #16]
  return(result);
 8008e2e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d15f      	bne.n	8008ef4 <osMessageQueueNew+0xdc>
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d05c      	beq.n	8008ef4 <osMessageQueueNew+0xdc>
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d059      	beq.n	8008ef4 <osMessageQueueNew+0xdc>
    mem = -1;
 8008e40:	f04f 33ff 	mov.w	r3, #4294967295
 8008e44:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d029      	beq.n	8008ea0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d012      	beq.n	8008e7a <osMessageQueueNew+0x62>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	2b4f      	cmp	r3, #79	; 0x4f
 8008e5a:	d90e      	bls.n	8008e7a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00a      	beq.n	8008e7a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	695a      	ldr	r2, [r3, #20]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	68b9      	ldr	r1, [r7, #8]
 8008e6c:	fb01 f303 	mul.w	r3, r1, r3
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d302      	bcc.n	8008e7a <osMessageQueueNew+0x62>
        mem = 1;
 8008e74:	2301      	movs	r3, #1
 8008e76:	61bb      	str	r3, [r7, #24]
 8008e78:	e014      	b.n	8008ea4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d110      	bne.n	8008ea4 <osMessageQueueNew+0x8c>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10c      	bne.n	8008ea4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d108      	bne.n	8008ea4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d104      	bne.n	8008ea4 <osMessageQueueNew+0x8c>
          mem = 0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	61bb      	str	r3, [r7, #24]
 8008e9e:	e001      	b.n	8008ea4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d10b      	bne.n	8008ec2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	691a      	ldr	r2, [r3, #16]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	9100      	str	r1, [sp, #0]
 8008eb6:	68b9      	ldr	r1, [r7, #8]
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 fa2f 	bl	800931c <xQueueGenericCreateStatic>
 8008ebe:	61f8      	str	r0, [r7, #28]
 8008ec0:	e008      	b.n	8008ed4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d105      	bne.n	8008ed4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008ec8:	2200      	movs	r2, #0
 8008eca:	68b9      	ldr	r1, [r7, #8]
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f000 fa9d 	bl	800940c <xQueueGenericCreate>
 8008ed2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00c      	beq.n	8008ef4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d003      	beq.n	8008ee8 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	617b      	str	r3, [r7, #20]
 8008ee6:	e001      	b.n	8008eec <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008eec:	6979      	ldr	r1, [r7, #20]
 8008eee:	69f8      	ldr	r0, [r7, #28]
 8008ef0:	f000 fef4 	bl	8009cdc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008ef4:	69fb      	ldr	r3, [r7, #28]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3720      	adds	r7, #32
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
	...

08008f00 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b088      	sub	sp, #32
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	603b      	str	r3, [r7, #0]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f18:	f3ef 8305 	mrs	r3, IPSR
 8008f1c:	617b      	str	r3, [r7, #20]
  return(result);
 8008f1e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d028      	beq.n	8008f76 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d005      	beq.n	8008f36 <osMessageQueuePut+0x36>
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d002      	beq.n	8008f36 <osMessageQueuePut+0x36>
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d003      	beq.n	8008f3e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008f36:	f06f 0303 	mvn.w	r3, #3
 8008f3a:	61fb      	str	r3, [r7, #28]
 8008f3c:	e038      	b.n	8008fb0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008f42:	f107 0210 	add.w	r2, r7, #16
 8008f46:	2300      	movs	r3, #0
 8008f48:	68b9      	ldr	r1, [r7, #8]
 8008f4a:	69b8      	ldr	r0, [r7, #24]
 8008f4c:	f000 fbba 	bl	80096c4 <xQueueGenericSendFromISR>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d003      	beq.n	8008f5e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008f56:	f06f 0302 	mvn.w	r3, #2
 8008f5a:	61fb      	str	r3, [r7, #28]
 8008f5c:	e028      	b.n	8008fb0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d025      	beq.n	8008fb0 <osMessageQueuePut+0xb0>
 8008f64:	4b15      	ldr	r3, [pc, #84]	; (8008fbc <osMessageQueuePut+0xbc>)
 8008f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f6a:	601a      	str	r2, [r3, #0]
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	e01c      	b.n	8008fb0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d002      	beq.n	8008f82 <osMessageQueuePut+0x82>
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d103      	bne.n	8008f8a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008f82:	f06f 0303 	mvn.w	r3, #3
 8008f86:	61fb      	str	r3, [r7, #28]
 8008f88:	e012      	b.n	8008fb0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	68b9      	ldr	r1, [r7, #8]
 8008f90:	69b8      	ldr	r0, [r7, #24]
 8008f92:	f000 fa99 	bl	80094c8 <xQueueGenericSend>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d009      	beq.n	8008fb0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d003      	beq.n	8008faa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008fa2:	f06f 0301 	mvn.w	r3, #1
 8008fa6:	61fb      	str	r3, [r7, #28]
 8008fa8:	e002      	b.n	8008fb0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008faa:	f06f 0302 	mvn.w	r3, #2
 8008fae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008fb0:	69fb      	ldr	r3, [r7, #28]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3720      	adds	r7, #32
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	e000ed04 	.word	0xe000ed04

08008fc0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b088      	sub	sp, #32
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
 8008fcc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fd6:	f3ef 8305 	mrs	r3, IPSR
 8008fda:	617b      	str	r3, [r7, #20]
  return(result);
 8008fdc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d028      	beq.n	8009034 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d005      	beq.n	8008ff4 <osMessageQueueGet+0x34>
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d002      	beq.n	8008ff4 <osMessageQueueGet+0x34>
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d003      	beq.n	8008ffc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008ff4:	f06f 0303 	mvn.w	r3, #3
 8008ff8:	61fb      	str	r3, [r7, #28]
 8008ffa:	e037      	b.n	800906c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009000:	f107 0310 	add.w	r3, r7, #16
 8009004:	461a      	mov	r2, r3
 8009006:	68b9      	ldr	r1, [r7, #8]
 8009008:	69b8      	ldr	r0, [r7, #24]
 800900a:	f000 fcd7 	bl	80099bc <xQueueReceiveFromISR>
 800900e:	4603      	mov	r3, r0
 8009010:	2b01      	cmp	r3, #1
 8009012:	d003      	beq.n	800901c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009014:	f06f 0302 	mvn.w	r3, #2
 8009018:	61fb      	str	r3, [r7, #28]
 800901a:	e027      	b.n	800906c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d024      	beq.n	800906c <osMessageQueueGet+0xac>
 8009022:	4b15      	ldr	r3, [pc, #84]	; (8009078 <osMessageQueueGet+0xb8>)
 8009024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009028:	601a      	str	r2, [r3, #0]
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	f3bf 8f6f 	isb	sy
 8009032:	e01b      	b.n	800906c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d002      	beq.n	8009040 <osMessageQueueGet+0x80>
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d103      	bne.n	8009048 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009040:	f06f 0303 	mvn.w	r3, #3
 8009044:	61fb      	str	r3, [r7, #28]
 8009046:	e011      	b.n	800906c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009048:	683a      	ldr	r2, [r7, #0]
 800904a:	68b9      	ldr	r1, [r7, #8]
 800904c:	69b8      	ldr	r0, [r7, #24]
 800904e:	f000 fbd5 	bl	80097fc <xQueueReceive>
 8009052:	4603      	mov	r3, r0
 8009054:	2b01      	cmp	r3, #1
 8009056:	d009      	beq.n	800906c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d003      	beq.n	8009066 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800905e:	f06f 0301 	mvn.w	r3, #1
 8009062:	61fb      	str	r3, [r7, #28]
 8009064:	e002      	b.n	800906c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009066:	f06f 0302 	mvn.w	r3, #2
 800906a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800906c:	69fb      	ldr	r3, [r7, #28]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3720      	adds	r7, #32
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	e000ed04 	.word	0xe000ed04

0800907c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	4a07      	ldr	r2, [pc, #28]	; (80090a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800908c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	4a06      	ldr	r2, [pc, #24]	; (80090ac <vApplicationGetIdleTaskMemory+0x30>)
 8009092:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2280      	movs	r2, #128	; 0x80
 8009098:	601a      	str	r2, [r3, #0]
}
 800909a:	bf00      	nop
 800909c:	3714      	adds	r7, #20
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	20000800 	.word	0x20000800
 80090ac:	200008a8 	.word	0x200008a8

080090b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4a07      	ldr	r2, [pc, #28]	; (80090dc <vApplicationGetTimerTaskMemory+0x2c>)
 80090c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	4a06      	ldr	r2, [pc, #24]	; (80090e0 <vApplicationGetTimerTaskMemory+0x30>)
 80090c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090ce:	601a      	str	r2, [r3, #0]
}
 80090d0:	bf00      	nop
 80090d2:	3714      	adds	r7, #20
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr
 80090dc:	20000aa8 	.word	0x20000aa8
 80090e0:	20000b50 	.word	0x20000b50

080090e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f103 0208 	add.w	r2, r3, #8
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f04f 32ff 	mov.w	r2, #4294967295
 80090fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f103 0208 	add.w	r2, r3, #8
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f103 0208 	add.w	r2, r3, #8
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009132:	bf00      	nop
 8009134:	370c      	adds	r7, #12
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr

0800913e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800913e:	b480      	push	{r7}
 8009140:	b085      	sub	sp, #20
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	689a      	ldr	r2, [r3, #8]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	1c5a      	adds	r2, r3, #1
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	601a      	str	r2, [r3, #0]
}
 800917a:	bf00      	nop
 800917c:	3714      	adds	r7, #20
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009186:	b480      	push	{r7}
 8009188:	b085      	sub	sp, #20
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800919c:	d103      	bne.n	80091a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	60fb      	str	r3, [r7, #12]
 80091a4:	e00c      	b.n	80091c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	3308      	adds	r3, #8
 80091aa:	60fb      	str	r3, [r7, #12]
 80091ac:	e002      	b.n	80091b4 <vListInsert+0x2e>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	60fb      	str	r3, [r7, #12]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d2f6      	bcs.n	80091ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	685a      	ldr	r2, [r3, #4]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	683a      	ldr	r2, [r7, #0]
 80091ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	1c5a      	adds	r2, r3, #1
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	601a      	str	r2, [r3, #0]
}
 80091ec:	bf00      	nop
 80091ee:	3714      	adds	r7, #20
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	6892      	ldr	r2, [r2, #8]
 800920e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	6852      	ldr	r2, [r2, #4]
 8009218:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	429a      	cmp	r2, r3
 8009222:	d103      	bne.n	800922c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	689a      	ldr	r2, [r3, #8]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	1e5a      	subs	r2, r3, #1
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10a      	bne.n	8009276 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009272:	bf00      	nop
 8009274:	e7fe      	b.n	8009274 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009276:	f002 f9ad 	bl	800b5d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009282:	68f9      	ldr	r1, [r7, #12]
 8009284:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009286:	fb01 f303 	mul.w	r3, r1, r3
 800928a:	441a      	add	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a6:	3b01      	subs	r3, #1
 80092a8:	68f9      	ldr	r1, [r7, #12]
 80092aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092ac:	fb01 f303 	mul.w	r3, r1, r3
 80092b0:	441a      	add	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	22ff      	movs	r2, #255	; 0xff
 80092ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	22ff      	movs	r2, #255	; 0xff
 80092c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d114      	bne.n	80092f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d01a      	beq.n	800930a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	3310      	adds	r3, #16
 80092d8:	4618      	mov	r0, r3
 80092da:	f001 fa61 	bl	800a7a0 <xTaskRemoveFromEventList>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d012      	beq.n	800930a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80092e4:	4b0c      	ldr	r3, [pc, #48]	; (8009318 <xQueueGenericReset+0xcc>)
 80092e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092ea:	601a      	str	r2, [r3, #0]
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	e009      	b.n	800930a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	3310      	adds	r3, #16
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7ff fef2 	bl	80090e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	3324      	adds	r3, #36	; 0x24
 8009304:	4618      	mov	r0, r3
 8009306:	f7ff feed 	bl	80090e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800930a:	f002 f993 	bl	800b634 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800930e:	2301      	movs	r3, #1
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	e000ed04 	.word	0xe000ed04

0800931c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800931c:	b580      	push	{r7, lr}
 800931e:	b08e      	sub	sp, #56	; 0x38
 8009320:	af02      	add	r7, sp, #8
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
 8009328:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10a      	bne.n	8009346 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009342:	bf00      	nop
 8009344:	e7fe      	b.n	8009344 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10a      	bne.n	8009362 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800934c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800935e:	bf00      	nop
 8009360:	e7fe      	b.n	8009360 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d002      	beq.n	800936e <xQueueGenericCreateStatic+0x52>
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d001      	beq.n	8009372 <xQueueGenericCreateStatic+0x56>
 800936e:	2301      	movs	r3, #1
 8009370:	e000      	b.n	8009374 <xQueueGenericCreateStatic+0x58>
 8009372:	2300      	movs	r3, #0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10a      	bne.n	800938e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937c:	f383 8811 	msr	BASEPRI, r3
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	623b      	str	r3, [r7, #32]
}
 800938a:	bf00      	nop
 800938c:	e7fe      	b.n	800938c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d102      	bne.n	800939a <xQueueGenericCreateStatic+0x7e>
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <xQueueGenericCreateStatic+0x82>
 800939a:	2301      	movs	r3, #1
 800939c:	e000      	b.n	80093a0 <xQueueGenericCreateStatic+0x84>
 800939e:	2300      	movs	r3, #0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	61fb      	str	r3, [r7, #28]
}
 80093b6:	bf00      	nop
 80093b8:	e7fe      	b.n	80093b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80093ba:	2350      	movs	r3, #80	; 0x50
 80093bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	2b50      	cmp	r3, #80	; 0x50
 80093c2:	d00a      	beq.n	80093da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80093c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c8:	f383 8811 	msr	BASEPRI, r3
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	61bb      	str	r3, [r7, #24]
}
 80093d6:	bf00      	nop
 80093d8:	e7fe      	b.n	80093d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80093da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80093e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00d      	beq.n	8009402 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80093e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e8:	2201      	movs	r2, #1
 80093ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80093f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	4613      	mov	r3, r2
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	68b9      	ldr	r1, [r7, #8]
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 f83f 	bl	8009480 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009404:	4618      	mov	r0, r3
 8009406:	3730      	adds	r7, #48	; 0x30
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800940c:	b580      	push	{r7, lr}
 800940e:	b08a      	sub	sp, #40	; 0x28
 8009410:	af02      	add	r7, sp, #8
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	4613      	mov	r3, r2
 8009418:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10a      	bne.n	8009436 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	613b      	str	r3, [r7, #16]
}
 8009432:	bf00      	nop
 8009434:	e7fe      	b.n	8009434 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	fb02 f303 	mul.w	r3, r2, r3
 800943e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	3350      	adds	r3, #80	; 0x50
 8009444:	4618      	mov	r0, r3
 8009446:	f002 f9e7 	bl	800b818 <pvPortMalloc>
 800944a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d011      	beq.n	8009476 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	3350      	adds	r3, #80	; 0x50
 800945a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	2200      	movs	r2, #0
 8009460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009464:	79fa      	ldrb	r2, [r7, #7]
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	4613      	mov	r3, r2
 800946c:	697a      	ldr	r2, [r7, #20]
 800946e:	68b9      	ldr	r1, [r7, #8]
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f000 f805 	bl	8009480 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009476:	69bb      	ldr	r3, [r7, #24]
	}
 8009478:	4618      	mov	r0, r3
 800947a:	3720      	adds	r7, #32
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
 800948c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d103      	bne.n	800949c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	69ba      	ldr	r2, [r7, #24]
 8009498:	601a      	str	r2, [r3, #0]
 800949a:	e002      	b.n	80094a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094ae:	2101      	movs	r1, #1
 80094b0:	69b8      	ldr	r0, [r7, #24]
 80094b2:	f7ff fecb 	bl	800924c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	78fa      	ldrb	r2, [r7, #3]
 80094ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80094be:	bf00      	nop
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b08e      	sub	sp, #56	; 0x38
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
 80094d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80094d6:	2300      	movs	r3, #0
 80094d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10a      	bne.n	80094fa <xQueueGenericSend+0x32>
	__asm volatile
 80094e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094f6:	bf00      	nop
 80094f8:	e7fe      	b.n	80094f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d103      	bne.n	8009508 <xQueueGenericSend+0x40>
 8009500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009504:	2b00      	cmp	r3, #0
 8009506:	d101      	bne.n	800950c <xQueueGenericSend+0x44>
 8009508:	2301      	movs	r3, #1
 800950a:	e000      	b.n	800950e <xQueueGenericSend+0x46>
 800950c:	2300      	movs	r3, #0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10a      	bne.n	8009528 <xQueueGenericSend+0x60>
	__asm volatile
 8009512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009516:	f383 8811 	msr	BASEPRI, r3
 800951a:	f3bf 8f6f 	isb	sy
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009524:	bf00      	nop
 8009526:	e7fe      	b.n	8009526 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	2b02      	cmp	r3, #2
 800952c:	d103      	bne.n	8009536 <xQueueGenericSend+0x6e>
 800952e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009532:	2b01      	cmp	r3, #1
 8009534:	d101      	bne.n	800953a <xQueueGenericSend+0x72>
 8009536:	2301      	movs	r3, #1
 8009538:	e000      	b.n	800953c <xQueueGenericSend+0x74>
 800953a:	2300      	movs	r3, #0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10a      	bne.n	8009556 <xQueueGenericSend+0x8e>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	623b      	str	r3, [r7, #32]
}
 8009552:	bf00      	nop
 8009554:	e7fe      	b.n	8009554 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009556:	f001 fae5 	bl	800ab24 <xTaskGetSchedulerState>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d102      	bne.n	8009566 <xQueueGenericSend+0x9e>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d101      	bne.n	800956a <xQueueGenericSend+0xa2>
 8009566:	2301      	movs	r3, #1
 8009568:	e000      	b.n	800956c <xQueueGenericSend+0xa4>
 800956a:	2300      	movs	r3, #0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10a      	bne.n	8009586 <xQueueGenericSend+0xbe>
	__asm volatile
 8009570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009574:	f383 8811 	msr	BASEPRI, r3
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	61fb      	str	r3, [r7, #28]
}
 8009582:	bf00      	nop
 8009584:	e7fe      	b.n	8009584 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009586:	f002 f825 	bl	800b5d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800958a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800958e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009592:	429a      	cmp	r2, r3
 8009594:	d302      	bcc.n	800959c <xQueueGenericSend+0xd4>
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	2b02      	cmp	r3, #2
 800959a:	d129      	bne.n	80095f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800959c:	683a      	ldr	r2, [r7, #0]
 800959e:	68b9      	ldr	r1, [r7, #8]
 80095a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095a2:	f000 fa8b 	bl	8009abc <prvCopyDataToQueue>
 80095a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d010      	beq.n	80095d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b2:	3324      	adds	r3, #36	; 0x24
 80095b4:	4618      	mov	r0, r3
 80095b6:	f001 f8f3 	bl	800a7a0 <xTaskRemoveFromEventList>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d013      	beq.n	80095e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80095c0:	4b3f      	ldr	r3, [pc, #252]	; (80096c0 <xQueueGenericSend+0x1f8>)
 80095c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095c6:	601a      	str	r2, [r3, #0]
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	e00a      	b.n	80095e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80095d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d007      	beq.n	80095e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80095d8:	4b39      	ldr	r3, [pc, #228]	; (80096c0 <xQueueGenericSend+0x1f8>)
 80095da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095de:	601a      	str	r2, [r3, #0]
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80095e8:	f002 f824 	bl	800b634 <vPortExitCritical>
				return pdPASS;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e063      	b.n	80096b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d103      	bne.n	80095fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095f6:	f002 f81d 	bl	800b634 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80095fa:	2300      	movs	r3, #0
 80095fc:	e05c      	b.n	80096b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009600:	2b00      	cmp	r3, #0
 8009602:	d106      	bne.n	8009612 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009604:	f107 0314 	add.w	r3, r7, #20
 8009608:	4618      	mov	r0, r3
 800960a:	f001 f92d 	bl	800a868 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800960e:	2301      	movs	r3, #1
 8009610:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009612:	f002 f80f 	bl	800b634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009616:	f000 fe99 	bl	800a34c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800961a:	f001 ffdb 	bl	800b5d4 <vPortEnterCritical>
 800961e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009620:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009624:	b25b      	sxtb	r3, r3
 8009626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800962a:	d103      	bne.n	8009634 <xQueueGenericSend+0x16c>
 800962c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962e:	2200      	movs	r2, #0
 8009630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009636:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800963a:	b25b      	sxtb	r3, r3
 800963c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009640:	d103      	bne.n	800964a <xQueueGenericSend+0x182>
 8009642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009644:	2200      	movs	r2, #0
 8009646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800964a:	f001 fff3 	bl	800b634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800964e:	1d3a      	adds	r2, r7, #4
 8009650:	f107 0314 	add.w	r3, r7, #20
 8009654:	4611      	mov	r1, r2
 8009656:	4618      	mov	r0, r3
 8009658:	f001 f91c 	bl	800a894 <xTaskCheckForTimeOut>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d124      	bne.n	80096ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009662:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009664:	f000 fb22 	bl	8009cac <prvIsQueueFull>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d018      	beq.n	80096a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800966e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009670:	3310      	adds	r3, #16
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	4611      	mov	r1, r2
 8009676:	4618      	mov	r0, r3
 8009678:	f001 f842 	bl	800a700 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800967c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800967e:	f000 faad 	bl	8009bdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009682:	f000 fe71 	bl	800a368 <xTaskResumeAll>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	f47f af7c 	bne.w	8009586 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800968e:	4b0c      	ldr	r3, [pc, #48]	; (80096c0 <xQueueGenericSend+0x1f8>)
 8009690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009694:	601a      	str	r2, [r3, #0]
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	e772      	b.n	8009586 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80096a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096a2:	f000 fa9b 	bl	8009bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096a6:	f000 fe5f 	bl	800a368 <xTaskResumeAll>
 80096aa:	e76c      	b.n	8009586 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80096ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096ae:	f000 fa95 	bl	8009bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096b2:	f000 fe59 	bl	800a368 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80096b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3738      	adds	r7, #56	; 0x38
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	e000ed04 	.word	0xe000ed04

080096c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b090      	sub	sp, #64	; 0x40
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
 80096d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80096d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10a      	bne.n	80096f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096ee:	bf00      	nop
 80096f0:	e7fe      	b.n	80096f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d103      	bne.n	8009700 <xQueueGenericSendFromISR+0x3c>
 80096f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <xQueueGenericSendFromISR+0x40>
 8009700:	2301      	movs	r3, #1
 8009702:	e000      	b.n	8009706 <xQueueGenericSendFromISR+0x42>
 8009704:	2300      	movs	r3, #0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10a      	bne.n	8009720 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800971c:	bf00      	nop
 800971e:	e7fe      	b.n	800971e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	2b02      	cmp	r3, #2
 8009724:	d103      	bne.n	800972e <xQueueGenericSendFromISR+0x6a>
 8009726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800972a:	2b01      	cmp	r3, #1
 800972c:	d101      	bne.n	8009732 <xQueueGenericSendFromISR+0x6e>
 800972e:	2301      	movs	r3, #1
 8009730:	e000      	b.n	8009734 <xQueueGenericSendFromISR+0x70>
 8009732:	2300      	movs	r3, #0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10a      	bne.n	800974e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	623b      	str	r3, [r7, #32]
}
 800974a:	bf00      	nop
 800974c:	e7fe      	b.n	800974c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800974e:	f002 f823 	bl	800b798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009752:	f3ef 8211 	mrs	r2, BASEPRI
 8009756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975a:	f383 8811 	msr	BASEPRI, r3
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	61fa      	str	r2, [r7, #28]
 8009768:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800976a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800976c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800976e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009776:	429a      	cmp	r2, r3
 8009778:	d302      	bcc.n	8009780 <xQueueGenericSendFromISR+0xbc>
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	2b02      	cmp	r3, #2
 800977e:	d12f      	bne.n	80097e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800978a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009790:	683a      	ldr	r2, [r7, #0]
 8009792:	68b9      	ldr	r1, [r7, #8]
 8009794:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009796:	f000 f991 	bl	8009abc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800979a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800979e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a2:	d112      	bne.n	80097ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d016      	beq.n	80097da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ae:	3324      	adds	r3, #36	; 0x24
 80097b0:	4618      	mov	r0, r3
 80097b2:	f000 fff5 	bl	800a7a0 <xTaskRemoveFromEventList>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00e      	beq.n	80097da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00b      	beq.n	80097da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	601a      	str	r2, [r3, #0]
 80097c8:	e007      	b.n	80097da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80097ce:	3301      	adds	r3, #1
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	b25a      	sxtb	r2, r3
 80097d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80097da:	2301      	movs	r3, #1
 80097dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80097de:	e001      	b.n	80097e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80097e0:	2300      	movs	r3, #0
 80097e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3740      	adds	r7, #64	; 0x40
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
	...

080097fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b08c      	sub	sp, #48	; 0x30
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009808:	2300      	movs	r3, #0
 800980a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10a      	bne.n	800982c <xQueueReceive+0x30>
	__asm volatile
 8009816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981a:	f383 8811 	msr	BASEPRI, r3
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f3bf 8f4f 	dsb	sy
 8009826:	623b      	str	r3, [r7, #32]
}
 8009828:	bf00      	nop
 800982a:	e7fe      	b.n	800982a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d103      	bne.n	800983a <xQueueReceive+0x3e>
 8009832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009836:	2b00      	cmp	r3, #0
 8009838:	d101      	bne.n	800983e <xQueueReceive+0x42>
 800983a:	2301      	movs	r3, #1
 800983c:	e000      	b.n	8009840 <xQueueReceive+0x44>
 800983e:	2300      	movs	r3, #0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10a      	bne.n	800985a <xQueueReceive+0x5e>
	__asm volatile
 8009844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	61fb      	str	r3, [r7, #28]
}
 8009856:	bf00      	nop
 8009858:	e7fe      	b.n	8009858 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800985a:	f001 f963 	bl	800ab24 <xTaskGetSchedulerState>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d102      	bne.n	800986a <xQueueReceive+0x6e>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d101      	bne.n	800986e <xQueueReceive+0x72>
 800986a:	2301      	movs	r3, #1
 800986c:	e000      	b.n	8009870 <xQueueReceive+0x74>
 800986e:	2300      	movs	r3, #0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10a      	bne.n	800988a <xQueueReceive+0x8e>
	__asm volatile
 8009874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009878:	f383 8811 	msr	BASEPRI, r3
 800987c:	f3bf 8f6f 	isb	sy
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	61bb      	str	r3, [r7, #24]
}
 8009886:	bf00      	nop
 8009888:	e7fe      	b.n	8009888 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800988a:	f001 fea3 	bl	800b5d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800988e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009892:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009896:	2b00      	cmp	r3, #0
 8009898:	d01f      	beq.n	80098da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800989a:	68b9      	ldr	r1, [r7, #8]
 800989c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800989e:	f000 f977 	bl	8009b90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a4:	1e5a      	subs	r2, r3, #1
 80098a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00f      	beq.n	80098d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b4:	3310      	adds	r3, #16
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 ff72 	bl	800a7a0 <xTaskRemoveFromEventList>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d007      	beq.n	80098d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098c2:	4b3d      	ldr	r3, [pc, #244]	; (80099b8 <xQueueReceive+0x1bc>)
 80098c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098c8:	601a      	str	r2, [r3, #0]
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098d2:	f001 feaf 	bl	800b634 <vPortExitCritical>
				return pdPASS;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e069      	b.n	80099ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d103      	bne.n	80098e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098e0:	f001 fea8 	bl	800b634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80098e4:	2300      	movs	r3, #0
 80098e6:	e062      	b.n	80099ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d106      	bne.n	80098fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098ee:	f107 0310 	add.w	r3, r7, #16
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 ffb8 	bl	800a868 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098f8:	2301      	movs	r3, #1
 80098fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098fc:	f001 fe9a 	bl	800b634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009900:	f000 fd24 	bl	800a34c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009904:	f001 fe66 	bl	800b5d4 <vPortEnterCritical>
 8009908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800990e:	b25b      	sxtb	r3, r3
 8009910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009914:	d103      	bne.n	800991e <xQueueReceive+0x122>
 8009916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009918:	2200      	movs	r2, #0
 800991a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800991e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009920:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009924:	b25b      	sxtb	r3, r3
 8009926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992a:	d103      	bne.n	8009934 <xQueueReceive+0x138>
 800992c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992e:	2200      	movs	r2, #0
 8009930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009934:	f001 fe7e 	bl	800b634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009938:	1d3a      	adds	r2, r7, #4
 800993a:	f107 0310 	add.w	r3, r7, #16
 800993e:	4611      	mov	r1, r2
 8009940:	4618      	mov	r0, r3
 8009942:	f000 ffa7 	bl	800a894 <xTaskCheckForTimeOut>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d123      	bne.n	8009994 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800994c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800994e:	f000 f997 	bl	8009c80 <prvIsQueueEmpty>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d017      	beq.n	8009988 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995a:	3324      	adds	r3, #36	; 0x24
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	4611      	mov	r1, r2
 8009960:	4618      	mov	r0, r3
 8009962:	f000 fecd 	bl	800a700 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009968:	f000 f938 	bl	8009bdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800996c:	f000 fcfc 	bl	800a368 <xTaskResumeAll>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d189      	bne.n	800988a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009976:	4b10      	ldr	r3, [pc, #64]	; (80099b8 <xQueueReceive+0x1bc>)
 8009978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800997c:	601a      	str	r2, [r3, #0]
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	e780      	b.n	800988a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800998a:	f000 f927 	bl	8009bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800998e:	f000 fceb 	bl	800a368 <xTaskResumeAll>
 8009992:	e77a      	b.n	800988a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009996:	f000 f921 	bl	8009bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800999a:	f000 fce5 	bl	800a368 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800999e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099a0:	f000 f96e 	bl	8009c80 <prvIsQueueEmpty>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f43f af6f 	beq.w	800988a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80099ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3730      	adds	r7, #48	; 0x30
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	e000ed04 	.word	0xe000ed04

080099bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b08e      	sub	sp, #56	; 0x38
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80099cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10a      	bne.n	80099e8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	623b      	str	r3, [r7, #32]
}
 80099e4:	bf00      	nop
 80099e6:	e7fe      	b.n	80099e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d103      	bne.n	80099f6 <xQueueReceiveFromISR+0x3a>
 80099ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d101      	bne.n	80099fa <xQueueReceiveFromISR+0x3e>
 80099f6:	2301      	movs	r3, #1
 80099f8:	e000      	b.n	80099fc <xQueueReceiveFromISR+0x40>
 80099fa:	2300      	movs	r3, #0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10a      	bne.n	8009a16 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	61fb      	str	r3, [r7, #28]
}
 8009a12:	bf00      	nop
 8009a14:	e7fe      	b.n	8009a14 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a16:	f001 febf 	bl	800b798 <vPortValidateInterruptPriority>
	__asm volatile
 8009a1a:	f3ef 8211 	mrs	r2, BASEPRI
 8009a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	61ba      	str	r2, [r7, #24]
 8009a30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009a32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d02f      	beq.n	8009aa2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a4c:	68b9      	ldr	r1, [r7, #8]
 8009a4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a50:	f000 f89e 	bl	8009b90 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a56:	1e5a      	subs	r2, r3, #1
 8009a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009a5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a64:	d112      	bne.n	8009a8c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d016      	beq.n	8009a9c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a70:	3310      	adds	r3, #16
 8009a72:	4618      	mov	r0, r3
 8009a74:	f000 fe94 	bl	800a7a0 <xTaskRemoveFromEventList>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00e      	beq.n	8009a9c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00b      	beq.n	8009a9c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	601a      	str	r2, [r3, #0]
 8009a8a:	e007      	b.n	8009a9c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a90:	3301      	adds	r3, #1
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	b25a      	sxtb	r2, r3
 8009a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8009aa0:	e001      	b.n	8009aa6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8009aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	f383 8811 	msr	BASEPRI, r3
}
 8009ab0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3738      	adds	r7, #56	; 0x38
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d10d      	bne.n	8009af6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d14d      	bne.n	8009b7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f001 f83a 	bl	800ab60 <xTaskPriorityDisinherit>
 8009aec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	609a      	str	r2, [r3, #8]
 8009af4:	e043      	b.n	8009b7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d119      	bne.n	8009b30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6858      	ldr	r0, [r3, #4]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b04:	461a      	mov	r2, r3
 8009b06:	68b9      	ldr	r1, [r7, #8]
 8009b08:	f003 fa40 	bl	800cf8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	685a      	ldr	r2, [r3, #4]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b14:	441a      	add	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d32b      	bcc.n	8009b7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	605a      	str	r2, [r3, #4]
 8009b2e:	e026      	b.n	8009b7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	68d8      	ldr	r0, [r3, #12]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b38:	461a      	mov	r2, r3
 8009b3a:	68b9      	ldr	r1, [r7, #8]
 8009b3c:	f003 fa26 	bl	800cf8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	68da      	ldr	r2, [r3, #12]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b48:	425b      	negs	r3, r3
 8009b4a:	441a      	add	r2, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	68da      	ldr	r2, [r3, #12]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d207      	bcs.n	8009b6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	689a      	ldr	r2, [r3, #8]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b64:	425b      	negs	r3, r3
 8009b66:	441a      	add	r2, r3
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d105      	bne.n	8009b7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d002      	beq.n	8009b7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	1c5a      	adds	r2, r3, #1
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b86:	697b      	ldr	r3, [r7, #20]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3718      	adds	r7, #24
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d018      	beq.n	8009bd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	68da      	ldr	r2, [r3, #12]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009baa:	441a      	add	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	68da      	ldr	r2, [r3, #12]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d303      	bcc.n	8009bc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	68d9      	ldr	r1, [r3, #12]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bcc:	461a      	mov	r2, r3
 8009bce:	6838      	ldr	r0, [r7, #0]
 8009bd0:	f003 f9dc 	bl	800cf8c <memcpy>
	}
}
 8009bd4:	bf00      	nop
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009be4:	f001 fcf6 	bl	800b5d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bf0:	e011      	b.n	8009c16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d012      	beq.n	8009c20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	3324      	adds	r3, #36	; 0x24
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f000 fdce 	bl	800a7a0 <xTaskRemoveFromEventList>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009c0a:	f000 fea5 	bl	800a958 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009c0e:	7bfb      	ldrb	r3, [r7, #15]
 8009c10:	3b01      	subs	r3, #1
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	dce9      	bgt.n	8009bf2 <prvUnlockQueue+0x16>
 8009c1e:	e000      	b.n	8009c22 <prvUnlockQueue+0x46>
					break;
 8009c20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	22ff      	movs	r2, #255	; 0xff
 8009c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009c2a:	f001 fd03 	bl	800b634 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009c2e:	f001 fcd1 	bl	800b5d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c3a:	e011      	b.n	8009c60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d012      	beq.n	8009c6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	3310      	adds	r3, #16
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f000 fda9 	bl	800a7a0 <xTaskRemoveFromEventList>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d001      	beq.n	8009c58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009c54:	f000 fe80 	bl	800a958 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c58:	7bbb      	ldrb	r3, [r7, #14]
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	dce9      	bgt.n	8009c3c <prvUnlockQueue+0x60>
 8009c68:	e000      	b.n	8009c6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	22ff      	movs	r2, #255	; 0xff
 8009c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009c74:	f001 fcde 	bl	800b634 <vPortExitCritical>
}
 8009c78:	bf00      	nop
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c88:	f001 fca4 	bl	800b5d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d102      	bne.n	8009c9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c94:	2301      	movs	r3, #1
 8009c96:	60fb      	str	r3, [r7, #12]
 8009c98:	e001      	b.n	8009c9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c9e:	f001 fcc9 	bl	800b634 <vPortExitCritical>

	return xReturn;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009cb4:	f001 fc8e 	bl	800b5d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d102      	bne.n	8009cca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	60fb      	str	r3, [r7, #12]
 8009cc8:	e001      	b.n	8009cce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009cce:	f001 fcb1 	bl	800b634 <vPortExitCritical>

	return xReturn;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	60fb      	str	r3, [r7, #12]
 8009cea:	e014      	b.n	8009d16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009cec:	4a0f      	ldr	r2, [pc, #60]	; (8009d2c <vQueueAddToRegistry+0x50>)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10b      	bne.n	8009d10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009cf8:	490c      	ldr	r1, [pc, #48]	; (8009d2c <vQueueAddToRegistry+0x50>)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	683a      	ldr	r2, [r7, #0]
 8009cfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009d02:	4a0a      	ldr	r2, [pc, #40]	; (8009d2c <vQueueAddToRegistry+0x50>)
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	00db      	lsls	r3, r3, #3
 8009d08:	4413      	add	r3, r2
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009d0e:	e006      	b.n	8009d1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	3301      	adds	r3, #1
 8009d14:	60fb      	str	r3, [r7, #12]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2b07      	cmp	r3, #7
 8009d1a:	d9e7      	bls.n	8009cec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009d1c:	bf00      	nop
 8009d1e:	bf00      	nop
 8009d20:	3714      	adds	r7, #20
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	20000f50 	.word	0x20000f50

08009d30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009d40:	f001 fc48 	bl	800b5d4 <vPortEnterCritical>
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d4a:	b25b      	sxtb	r3, r3
 8009d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d50:	d103      	bne.n	8009d5a <vQueueWaitForMessageRestricted+0x2a>
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d60:	b25b      	sxtb	r3, r3
 8009d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d66:	d103      	bne.n	8009d70 <vQueueWaitForMessageRestricted+0x40>
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d70:	f001 fc60 	bl	800b634 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d106      	bne.n	8009d8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	3324      	adds	r3, #36	; 0x24
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	68b9      	ldr	r1, [r7, #8]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f000 fcdf 	bl	800a748 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009d8a:	6978      	ldr	r0, [r7, #20]
 8009d8c:	f7ff ff26 	bl	8009bdc <prvUnlockQueue>
	}
 8009d90:	bf00      	nop
 8009d92:	3718      	adds	r7, #24
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b08e      	sub	sp, #56	; 0x38
 8009d9c:	af04      	add	r7, sp, #16
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
 8009da4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10a      	bne.n	8009dc2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	623b      	str	r3, [r7, #32]
}
 8009dbe:	bf00      	nop
 8009dc0:	e7fe      	b.n	8009dc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10a      	bne.n	8009dde <xTaskCreateStatic+0x46>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	61fb      	str	r3, [r7, #28]
}
 8009dda:	bf00      	nop
 8009ddc:	e7fe      	b.n	8009ddc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009dde:	23a8      	movs	r3, #168	; 0xa8
 8009de0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	2ba8      	cmp	r3, #168	; 0xa8
 8009de6:	d00a      	beq.n	8009dfe <xTaskCreateStatic+0x66>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	61bb      	str	r3, [r7, #24]
}
 8009dfa:	bf00      	nop
 8009dfc:	e7fe      	b.n	8009dfc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009dfe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d01e      	beq.n	8009e44 <xTaskCreateStatic+0xac>
 8009e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d01b      	beq.n	8009e44 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e18:	2202      	movs	r2, #2
 8009e1a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009e1e:	2300      	movs	r3, #0
 8009e20:	9303      	str	r3, [sp, #12]
 8009e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e24:	9302      	str	r3, [sp, #8]
 8009e26:	f107 0314 	add.w	r3, r7, #20
 8009e2a:	9301      	str	r3, [sp, #4]
 8009e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	68b9      	ldr	r1, [r7, #8]
 8009e36:	68f8      	ldr	r0, [r7, #12]
 8009e38:	f000 f850 	bl	8009edc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e3e:	f000 f8f3 	bl	800a028 <prvAddNewTaskToReadyList>
 8009e42:	e001      	b.n	8009e48 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009e44:	2300      	movs	r3, #0
 8009e46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009e48:	697b      	ldr	r3, [r7, #20]
	}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3728      	adds	r7, #40	; 0x28
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b08c      	sub	sp, #48	; 0x30
 8009e56:	af04      	add	r7, sp, #16
 8009e58:	60f8      	str	r0, [r7, #12]
 8009e5a:	60b9      	str	r1, [r7, #8]
 8009e5c:	603b      	str	r3, [r7, #0]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e62:	88fb      	ldrh	r3, [r7, #6]
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4618      	mov	r0, r3
 8009e68:	f001 fcd6 	bl	800b818 <pvPortMalloc>
 8009e6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00e      	beq.n	8009e92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009e74:	20a8      	movs	r0, #168	; 0xa8
 8009e76:	f001 fccf 	bl	800b818 <pvPortMalloc>
 8009e7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d003      	beq.n	8009e8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	697a      	ldr	r2, [r7, #20]
 8009e86:	631a      	str	r2, [r3, #48]	; 0x30
 8009e88:	e005      	b.n	8009e96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009e8a:	6978      	ldr	r0, [r7, #20]
 8009e8c:	f001 fd90 	bl	800b9b0 <vPortFree>
 8009e90:	e001      	b.n	8009e96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009e92:	2300      	movs	r3, #0
 8009e94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d017      	beq.n	8009ecc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009ea4:	88fa      	ldrh	r2, [r7, #6]
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	9303      	str	r3, [sp, #12]
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	9302      	str	r3, [sp, #8]
 8009eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	68b9      	ldr	r1, [r7, #8]
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f000 f80e 	bl	8009edc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ec0:	69f8      	ldr	r0, [r7, #28]
 8009ec2:	f000 f8b1 	bl	800a028 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	61bb      	str	r3, [r7, #24]
 8009eca:	e002      	b.n	8009ed2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009ed2:	69bb      	ldr	r3, [r7, #24]
	}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3720      	adds	r7, #32
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b088      	sub	sp, #32
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
 8009ee8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	21a5      	movs	r1, #165	; 0xa5
 8009ef6:	f002 ff79 	bl	800cdec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009f04:	3b01      	subs	r3, #1
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	f023 0307 	bic.w	r3, r3, #7
 8009f12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	f003 0307 	and.w	r3, r3, #7
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00a      	beq.n	8009f34 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	617b      	str	r3, [r7, #20]
}
 8009f30:	bf00      	nop
 8009f32:	e7fe      	b.n	8009f32 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d01f      	beq.n	8009f7a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	61fb      	str	r3, [r7, #28]
 8009f3e:	e012      	b.n	8009f66 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	4413      	add	r3, r2
 8009f46:	7819      	ldrb	r1, [r3, #0]
 8009f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	3334      	adds	r3, #52	; 0x34
 8009f50:	460a      	mov	r2, r1
 8009f52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f54:	68ba      	ldr	r2, [r7, #8]
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	4413      	add	r3, r2
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d006      	beq.n	8009f6e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	3301      	adds	r3, #1
 8009f64:	61fb      	str	r3, [r7, #28]
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	2b0f      	cmp	r3, #15
 8009f6a:	d9e9      	bls.n	8009f40 <prvInitialiseNewTask+0x64>
 8009f6c:	e000      	b.n	8009f70 <prvInitialiseNewTask+0x94>
			{
				break;
 8009f6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f72:	2200      	movs	r2, #0
 8009f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f78:	e003      	b.n	8009f82 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f84:	2b37      	cmp	r3, #55	; 0x37
 8009f86:	d901      	bls.n	8009f8c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009f88:	2337      	movs	r3, #55	; 0x37
 8009f8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f96:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7ff f8be 	bl	8009124 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009faa:	3318      	adds	r3, #24
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7ff f8b9 	bl	8009124 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fc6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fda:	3354      	adds	r3, #84	; 0x54
 8009fdc:	224c      	movs	r2, #76	; 0x4c
 8009fde:	2100      	movs	r1, #0
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f002 ff03 	bl	800cdec <memset>
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe8:	4a0c      	ldr	r2, [pc, #48]	; (800a01c <prvInitialiseNewTask+0x140>)
 8009fea:	659a      	str	r2, [r3, #88]	; 0x58
 8009fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fee:	4a0c      	ldr	r2, [pc, #48]	; (800a020 <prvInitialiseNewTask+0x144>)
 8009ff0:	65da      	str	r2, [r3, #92]	; 0x5c
 8009ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff4:	4a0b      	ldr	r2, [pc, #44]	; (800a024 <prvInitialiseNewTask+0x148>)
 8009ff6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	68f9      	ldr	r1, [r7, #12]
 8009ffc:	69b8      	ldr	r0, [r7, #24]
 8009ffe:	f001 f9bf 	bl	800b380 <pxPortInitialiseStack>
 800a002:	4602      	mov	r2, r0
 800a004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a006:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a012:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a014:	bf00      	nop
 800a016:	3720      	adds	r7, #32
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	20006aa4 	.word	0x20006aa4
 800a020:	20006b0c 	.word	0x20006b0c
 800a024:	20006b74 	.word	0x20006b74

0800a028 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a030:	f001 fad0 	bl	800b5d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a034:	4b2d      	ldr	r3, [pc, #180]	; (800a0ec <prvAddNewTaskToReadyList+0xc4>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	3301      	adds	r3, #1
 800a03a:	4a2c      	ldr	r2, [pc, #176]	; (800a0ec <prvAddNewTaskToReadyList+0xc4>)
 800a03c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a03e:	4b2c      	ldr	r3, [pc, #176]	; (800a0f0 <prvAddNewTaskToReadyList+0xc8>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d109      	bne.n	800a05a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a046:	4a2a      	ldr	r2, [pc, #168]	; (800a0f0 <prvAddNewTaskToReadyList+0xc8>)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a04c:	4b27      	ldr	r3, [pc, #156]	; (800a0ec <prvAddNewTaskToReadyList+0xc4>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d110      	bne.n	800a076 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a054:	f000 fca4 	bl	800a9a0 <prvInitialiseTaskLists>
 800a058:	e00d      	b.n	800a076 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a05a:	4b26      	ldr	r3, [pc, #152]	; (800a0f4 <prvAddNewTaskToReadyList+0xcc>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d109      	bne.n	800a076 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a062:	4b23      	ldr	r3, [pc, #140]	; (800a0f0 <prvAddNewTaskToReadyList+0xc8>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d802      	bhi.n	800a076 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a070:	4a1f      	ldr	r2, [pc, #124]	; (800a0f0 <prvAddNewTaskToReadyList+0xc8>)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a076:	4b20      	ldr	r3, [pc, #128]	; (800a0f8 <prvAddNewTaskToReadyList+0xd0>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	3301      	adds	r3, #1
 800a07c:	4a1e      	ldr	r2, [pc, #120]	; (800a0f8 <prvAddNewTaskToReadyList+0xd0>)
 800a07e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a080:	4b1d      	ldr	r3, [pc, #116]	; (800a0f8 <prvAddNewTaskToReadyList+0xd0>)
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a08c:	4b1b      	ldr	r3, [pc, #108]	; (800a0fc <prvAddNewTaskToReadyList+0xd4>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	429a      	cmp	r2, r3
 800a092:	d903      	bls.n	800a09c <prvAddNewTaskToReadyList+0x74>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a098:	4a18      	ldr	r2, [pc, #96]	; (800a0fc <prvAddNewTaskToReadyList+0xd4>)
 800a09a:	6013      	str	r3, [r2, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	4413      	add	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	4a15      	ldr	r2, [pc, #84]	; (800a100 <prvAddNewTaskToReadyList+0xd8>)
 800a0aa:	441a      	add	r2, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	f7ff f843 	bl	800913e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a0b8:	f001 fabc 	bl	800b634 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a0bc:	4b0d      	ldr	r3, [pc, #52]	; (800a0f4 <prvAddNewTaskToReadyList+0xcc>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d00e      	beq.n	800a0e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a0c4:	4b0a      	ldr	r3, [pc, #40]	; (800a0f0 <prvAddNewTaskToReadyList+0xc8>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d207      	bcs.n	800a0e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a0d2:	4b0c      	ldr	r3, [pc, #48]	; (800a104 <prvAddNewTaskToReadyList+0xdc>)
 800a0d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0d8:	601a      	str	r2, [r3, #0]
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0e2:	bf00      	nop
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	20001464 	.word	0x20001464
 800a0f0:	20000f90 	.word	0x20000f90
 800a0f4:	20001470 	.word	0x20001470
 800a0f8:	20001480 	.word	0x20001480
 800a0fc:	2000146c 	.word	0x2000146c
 800a100:	20000f94 	.word	0x20000f94
 800a104:	e000ed04 	.word	0xe000ed04

0800a108 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b08a      	sub	sp, #40	; 0x28
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a112:	2300      	movs	r3, #0
 800a114:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d10a      	bne.n	800a132 <vTaskDelayUntil+0x2a>
	__asm volatile
 800a11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a120:	f383 8811 	msr	BASEPRI, r3
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	f3bf 8f4f 	dsb	sy
 800a12c:	617b      	str	r3, [r7, #20]
}
 800a12e:	bf00      	nop
 800a130:	e7fe      	b.n	800a130 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d10a      	bne.n	800a14e <vTaskDelayUntil+0x46>
	__asm volatile
 800a138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13c:	f383 8811 	msr	BASEPRI, r3
 800a140:	f3bf 8f6f 	isb	sy
 800a144:	f3bf 8f4f 	dsb	sy
 800a148:	613b      	str	r3, [r7, #16]
}
 800a14a:	bf00      	nop
 800a14c:	e7fe      	b.n	800a14c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a14e:	4b2a      	ldr	r3, [pc, #168]	; (800a1f8 <vTaskDelayUntil+0xf0>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00a      	beq.n	800a16c <vTaskDelayUntil+0x64>
	__asm volatile
 800a156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15a:	f383 8811 	msr	BASEPRI, r3
 800a15e:	f3bf 8f6f 	isb	sy
 800a162:	f3bf 8f4f 	dsb	sy
 800a166:	60fb      	str	r3, [r7, #12]
}
 800a168:	bf00      	nop
 800a16a:	e7fe      	b.n	800a16a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a16c:	f000 f8ee 	bl	800a34c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a170:	4b22      	ldr	r3, [pc, #136]	; (800a1fc <vTaskDelayUntil+0xf4>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	4413      	add	r3, r2
 800a17e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	6a3a      	ldr	r2, [r7, #32]
 800a186:	429a      	cmp	r2, r3
 800a188:	d20b      	bcs.n	800a1a2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	69fa      	ldr	r2, [r7, #28]
 800a190:	429a      	cmp	r2, r3
 800a192:	d211      	bcs.n	800a1b8 <vTaskDelayUntil+0xb0>
 800a194:	69fa      	ldr	r2, [r7, #28]
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d90d      	bls.n	800a1b8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a19c:	2301      	movs	r3, #1
 800a19e:	627b      	str	r3, [r7, #36]	; 0x24
 800a1a0:	e00a      	b.n	800a1b8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	69fa      	ldr	r2, [r7, #28]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d303      	bcc.n	800a1b4 <vTaskDelayUntil+0xac>
 800a1ac:	69fa      	ldr	r2, [r7, #28]
 800a1ae:	6a3b      	ldr	r3, [r7, #32]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d901      	bls.n	800a1b8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	69fa      	ldr	r2, [r7, #28]
 800a1bc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d006      	beq.n	800a1d2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a1c4:	69fa      	ldr	r2, [r7, #28]
 800a1c6:	6a3b      	ldr	r3, [r7, #32]
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f000 fd35 	bl	800ac3c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a1d2:	f000 f8c9 	bl	800a368 <xTaskResumeAll>
 800a1d6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d107      	bne.n	800a1ee <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a1de:	4b08      	ldr	r3, [pc, #32]	; (800a200 <vTaskDelayUntil+0xf8>)
 800a1e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1e4:	601a      	str	r2, [r3, #0]
 800a1e6:	f3bf 8f4f 	dsb	sy
 800a1ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1ee:	bf00      	nop
 800a1f0:	3728      	adds	r7, #40	; 0x28
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	2000148c 	.word	0x2000148c
 800a1fc:	20001468 	.word	0x20001468
 800a200:	e000ed04 	.word	0xe000ed04

0800a204 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a20c:	2300      	movs	r3, #0
 800a20e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d017      	beq.n	800a246 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a216:	4b13      	ldr	r3, [pc, #76]	; (800a264 <vTaskDelay+0x60>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00a      	beq.n	800a234 <vTaskDelay+0x30>
	__asm volatile
 800a21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	60bb      	str	r3, [r7, #8]
}
 800a230:	bf00      	nop
 800a232:	e7fe      	b.n	800a232 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a234:	f000 f88a 	bl	800a34c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a238:	2100      	movs	r1, #0
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 fcfe 	bl	800ac3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a240:	f000 f892 	bl	800a368 <xTaskResumeAll>
 800a244:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d107      	bne.n	800a25c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a24c:	4b06      	ldr	r3, [pc, #24]	; (800a268 <vTaskDelay+0x64>)
 800a24e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a252:	601a      	str	r2, [r3, #0]
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a25c:	bf00      	nop
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	2000148c 	.word	0x2000148c
 800a268:	e000ed04 	.word	0xe000ed04

0800a26c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b08a      	sub	sp, #40	; 0x28
 800a270:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a272:	2300      	movs	r3, #0
 800a274:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a276:	2300      	movs	r3, #0
 800a278:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a27a:	463a      	mov	r2, r7
 800a27c:	1d39      	adds	r1, r7, #4
 800a27e:	f107 0308 	add.w	r3, r7, #8
 800a282:	4618      	mov	r0, r3
 800a284:	f7fe fefa 	bl	800907c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a288:	6839      	ldr	r1, [r7, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	9202      	str	r2, [sp, #8]
 800a290:	9301      	str	r3, [sp, #4]
 800a292:	2300      	movs	r3, #0
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	2300      	movs	r3, #0
 800a298:	460a      	mov	r2, r1
 800a29a:	4924      	ldr	r1, [pc, #144]	; (800a32c <vTaskStartScheduler+0xc0>)
 800a29c:	4824      	ldr	r0, [pc, #144]	; (800a330 <vTaskStartScheduler+0xc4>)
 800a29e:	f7ff fd7b 	bl	8009d98 <xTaskCreateStatic>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	4a23      	ldr	r2, [pc, #140]	; (800a334 <vTaskStartScheduler+0xc8>)
 800a2a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a2a8:	4b22      	ldr	r3, [pc, #136]	; (800a334 <vTaskStartScheduler+0xc8>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d002      	beq.n	800a2b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	617b      	str	r3, [r7, #20]
 800a2b4:	e001      	b.n	800a2ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d102      	bne.n	800a2c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a2c0:	f000 fd10 	bl	800ace4 <xTimerCreateTimerTask>
 800a2c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d11b      	bne.n	800a304 <vTaskStartScheduler+0x98>
	__asm volatile
 800a2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d0:	f383 8811 	msr	BASEPRI, r3
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	f3bf 8f4f 	dsb	sy
 800a2dc:	613b      	str	r3, [r7, #16]
}
 800a2de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a2e0:	4b15      	ldr	r3, [pc, #84]	; (800a338 <vTaskStartScheduler+0xcc>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	3354      	adds	r3, #84	; 0x54
 800a2e6:	4a15      	ldr	r2, [pc, #84]	; (800a33c <vTaskStartScheduler+0xd0>)
 800a2e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a2ea:	4b15      	ldr	r3, [pc, #84]	; (800a340 <vTaskStartScheduler+0xd4>)
 800a2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a2f2:	4b14      	ldr	r3, [pc, #80]	; (800a344 <vTaskStartScheduler+0xd8>)
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a2f8:	4b13      	ldr	r3, [pc, #76]	; (800a348 <vTaskStartScheduler+0xdc>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a2fe:	f001 f8c7 	bl	800b490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a302:	e00e      	b.n	800a322 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a30a:	d10a      	bne.n	800a322 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a310:	f383 8811 	msr	BASEPRI, r3
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	60fb      	str	r3, [r7, #12]
}
 800a31e:	bf00      	nop
 800a320:	e7fe      	b.n	800a320 <vTaskStartScheduler+0xb4>
}
 800a322:	bf00      	nop
 800a324:	3718      	adds	r7, #24
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	0800dc60 	.word	0x0800dc60
 800a330:	0800a971 	.word	0x0800a971
 800a334:	20001488 	.word	0x20001488
 800a338:	20000f90 	.word	0x20000f90
 800a33c:	20000158 	.word	0x20000158
 800a340:	20001484 	.word	0x20001484
 800a344:	20001470 	.word	0x20001470
 800a348:	20001468 	.word	0x20001468

0800a34c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a34c:	b480      	push	{r7}
 800a34e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a350:	4b04      	ldr	r3, [pc, #16]	; (800a364 <vTaskSuspendAll+0x18>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3301      	adds	r3, #1
 800a356:	4a03      	ldr	r2, [pc, #12]	; (800a364 <vTaskSuspendAll+0x18>)
 800a358:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a35a:	bf00      	nop
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr
 800a364:	2000148c 	.word	0x2000148c

0800a368 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a36e:	2300      	movs	r3, #0
 800a370:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a372:	2300      	movs	r3, #0
 800a374:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a376:	4b42      	ldr	r3, [pc, #264]	; (800a480 <xTaskResumeAll+0x118>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d10a      	bne.n	800a394 <xTaskResumeAll+0x2c>
	__asm volatile
 800a37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a382:	f383 8811 	msr	BASEPRI, r3
 800a386:	f3bf 8f6f 	isb	sy
 800a38a:	f3bf 8f4f 	dsb	sy
 800a38e:	603b      	str	r3, [r7, #0]
}
 800a390:	bf00      	nop
 800a392:	e7fe      	b.n	800a392 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a394:	f001 f91e 	bl	800b5d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a398:	4b39      	ldr	r3, [pc, #228]	; (800a480 <xTaskResumeAll+0x118>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	3b01      	subs	r3, #1
 800a39e:	4a38      	ldr	r2, [pc, #224]	; (800a480 <xTaskResumeAll+0x118>)
 800a3a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3a2:	4b37      	ldr	r3, [pc, #220]	; (800a480 <xTaskResumeAll+0x118>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d162      	bne.n	800a470 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a3aa:	4b36      	ldr	r3, [pc, #216]	; (800a484 <xTaskResumeAll+0x11c>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d05e      	beq.n	800a470 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3b2:	e02f      	b.n	800a414 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3b4:	4b34      	ldr	r3, [pc, #208]	; (800a488 <xTaskResumeAll+0x120>)
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3318      	adds	r3, #24
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7fe ff19 	bl	80091f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	3304      	adds	r3, #4
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fe ff14 	bl	80091f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3d4:	4b2d      	ldr	r3, [pc, #180]	; (800a48c <xTaskResumeAll+0x124>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d903      	bls.n	800a3e4 <xTaskResumeAll+0x7c>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e0:	4a2a      	ldr	r2, [pc, #168]	; (800a48c <xTaskResumeAll+0x124>)
 800a3e2:	6013      	str	r3, [r2, #0]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	4a27      	ldr	r2, [pc, #156]	; (800a490 <xTaskResumeAll+0x128>)
 800a3f2:	441a      	add	r2, r3
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	3304      	adds	r3, #4
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	4610      	mov	r0, r2
 800a3fc:	f7fe fe9f 	bl	800913e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a404:	4b23      	ldr	r3, [pc, #140]	; (800a494 <xTaskResumeAll+0x12c>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d302      	bcc.n	800a414 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a40e:	4b22      	ldr	r3, [pc, #136]	; (800a498 <xTaskResumeAll+0x130>)
 800a410:	2201      	movs	r2, #1
 800a412:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a414:	4b1c      	ldr	r3, [pc, #112]	; (800a488 <xTaskResumeAll+0x120>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d1cb      	bne.n	800a3b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a422:	f000 fb5f 	bl	800aae4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a426:	4b1d      	ldr	r3, [pc, #116]	; (800a49c <xTaskResumeAll+0x134>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d010      	beq.n	800a454 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a432:	f000 f847 	bl	800a4c4 <xTaskIncrementTick>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d002      	beq.n	800a442 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a43c:	4b16      	ldr	r3, [pc, #88]	; (800a498 <xTaskResumeAll+0x130>)
 800a43e:	2201      	movs	r2, #1
 800a440:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	3b01      	subs	r3, #1
 800a446:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1f1      	bne.n	800a432 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a44e:	4b13      	ldr	r3, [pc, #76]	; (800a49c <xTaskResumeAll+0x134>)
 800a450:	2200      	movs	r2, #0
 800a452:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a454:	4b10      	ldr	r3, [pc, #64]	; (800a498 <xTaskResumeAll+0x130>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d009      	beq.n	800a470 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a45c:	2301      	movs	r3, #1
 800a45e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a460:	4b0f      	ldr	r3, [pc, #60]	; (800a4a0 <xTaskResumeAll+0x138>)
 800a462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a466:	601a      	str	r2, [r3, #0]
 800a468:	f3bf 8f4f 	dsb	sy
 800a46c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a470:	f001 f8e0 	bl	800b634 <vPortExitCritical>

	return xAlreadyYielded;
 800a474:	68bb      	ldr	r3, [r7, #8]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	2000148c 	.word	0x2000148c
 800a484:	20001464 	.word	0x20001464
 800a488:	20001424 	.word	0x20001424
 800a48c:	2000146c 	.word	0x2000146c
 800a490:	20000f94 	.word	0x20000f94
 800a494:	20000f90 	.word	0x20000f90
 800a498:	20001478 	.word	0x20001478
 800a49c:	20001474 	.word	0x20001474
 800a4a0:	e000ed04 	.word	0xe000ed04

0800a4a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a4aa:	4b05      	ldr	r3, [pc, #20]	; (800a4c0 <xTaskGetTickCount+0x1c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a4b0:	687b      	ldr	r3, [r7, #4]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	20001468 	.word	0x20001468

0800a4c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b086      	sub	sp, #24
 800a4c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4ce:	4b4f      	ldr	r3, [pc, #316]	; (800a60c <xTaskIncrementTick+0x148>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f040 808f 	bne.w	800a5f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a4d8:	4b4d      	ldr	r3, [pc, #308]	; (800a610 <xTaskIncrementTick+0x14c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a4e0:	4a4b      	ldr	r2, [pc, #300]	; (800a610 <xTaskIncrementTick+0x14c>)
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d120      	bne.n	800a52e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a4ec:	4b49      	ldr	r3, [pc, #292]	; (800a614 <xTaskIncrementTick+0x150>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00a      	beq.n	800a50c <xTaskIncrementTick+0x48>
	__asm volatile
 800a4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fa:	f383 8811 	msr	BASEPRI, r3
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	603b      	str	r3, [r7, #0]
}
 800a508:	bf00      	nop
 800a50a:	e7fe      	b.n	800a50a <xTaskIncrementTick+0x46>
 800a50c:	4b41      	ldr	r3, [pc, #260]	; (800a614 <xTaskIncrementTick+0x150>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	60fb      	str	r3, [r7, #12]
 800a512:	4b41      	ldr	r3, [pc, #260]	; (800a618 <xTaskIncrementTick+0x154>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a3f      	ldr	r2, [pc, #252]	; (800a614 <xTaskIncrementTick+0x150>)
 800a518:	6013      	str	r3, [r2, #0]
 800a51a:	4a3f      	ldr	r2, [pc, #252]	; (800a618 <xTaskIncrementTick+0x154>)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6013      	str	r3, [r2, #0]
 800a520:	4b3e      	ldr	r3, [pc, #248]	; (800a61c <xTaskIncrementTick+0x158>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	3301      	adds	r3, #1
 800a526:	4a3d      	ldr	r2, [pc, #244]	; (800a61c <xTaskIncrementTick+0x158>)
 800a528:	6013      	str	r3, [r2, #0]
 800a52a:	f000 fadb 	bl	800aae4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a52e:	4b3c      	ldr	r3, [pc, #240]	; (800a620 <xTaskIncrementTick+0x15c>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	693a      	ldr	r2, [r7, #16]
 800a534:	429a      	cmp	r2, r3
 800a536:	d349      	bcc.n	800a5cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a538:	4b36      	ldr	r3, [pc, #216]	; (800a614 <xTaskIncrementTick+0x150>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d104      	bne.n	800a54c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a542:	4b37      	ldr	r3, [pc, #220]	; (800a620 <xTaskIncrementTick+0x15c>)
 800a544:	f04f 32ff 	mov.w	r2, #4294967295
 800a548:	601a      	str	r2, [r3, #0]
					break;
 800a54a:	e03f      	b.n	800a5cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a54c:	4b31      	ldr	r3, [pc, #196]	; (800a614 <xTaskIncrementTick+0x150>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	429a      	cmp	r2, r3
 800a562:	d203      	bcs.n	800a56c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a564:	4a2e      	ldr	r2, [pc, #184]	; (800a620 <xTaskIncrementTick+0x15c>)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a56a:	e02f      	b.n	800a5cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	3304      	adds	r3, #4
 800a570:	4618      	mov	r0, r3
 800a572:	f7fe fe41 	bl	80091f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d004      	beq.n	800a588 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	3318      	adds	r3, #24
 800a582:	4618      	mov	r0, r3
 800a584:	f7fe fe38 	bl	80091f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a58c:	4b25      	ldr	r3, [pc, #148]	; (800a624 <xTaskIncrementTick+0x160>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	429a      	cmp	r2, r3
 800a592:	d903      	bls.n	800a59c <xTaskIncrementTick+0xd8>
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a598:	4a22      	ldr	r2, [pc, #136]	; (800a624 <xTaskIncrementTick+0x160>)
 800a59a:	6013      	str	r3, [r2, #0]
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	4413      	add	r3, r2
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	4a1f      	ldr	r2, [pc, #124]	; (800a628 <xTaskIncrementTick+0x164>)
 800a5aa:	441a      	add	r2, r3
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	f7fe fdc3 	bl	800913e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5bc:	4b1b      	ldr	r3, [pc, #108]	; (800a62c <xTaskIncrementTick+0x168>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d3b8      	bcc.n	800a538 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5ca:	e7b5      	b.n	800a538 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a5cc:	4b17      	ldr	r3, [pc, #92]	; (800a62c <xTaskIncrementTick+0x168>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d2:	4915      	ldr	r1, [pc, #84]	; (800a628 <xTaskIncrementTick+0x164>)
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4413      	add	r3, r2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	440b      	add	r3, r1
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d901      	bls.n	800a5e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a5e8:	4b11      	ldr	r3, [pc, #68]	; (800a630 <xTaskIncrementTick+0x16c>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d007      	beq.n	800a600 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	e004      	b.n	800a600 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a5f6:	4b0f      	ldr	r3, [pc, #60]	; (800a634 <xTaskIncrementTick+0x170>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	4a0d      	ldr	r2, [pc, #52]	; (800a634 <xTaskIncrementTick+0x170>)
 800a5fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a600:	697b      	ldr	r3, [r7, #20]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3718      	adds	r7, #24
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	2000148c 	.word	0x2000148c
 800a610:	20001468 	.word	0x20001468
 800a614:	2000141c 	.word	0x2000141c
 800a618:	20001420 	.word	0x20001420
 800a61c:	2000147c 	.word	0x2000147c
 800a620:	20001484 	.word	0x20001484
 800a624:	2000146c 	.word	0x2000146c
 800a628:	20000f94 	.word	0x20000f94
 800a62c:	20000f90 	.word	0x20000f90
 800a630:	20001478 	.word	0x20001478
 800a634:	20001474 	.word	0x20001474

0800a638 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a63e:	4b2a      	ldr	r3, [pc, #168]	; (800a6e8 <vTaskSwitchContext+0xb0>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d003      	beq.n	800a64e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a646:	4b29      	ldr	r3, [pc, #164]	; (800a6ec <vTaskSwitchContext+0xb4>)
 800a648:	2201      	movs	r2, #1
 800a64a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a64c:	e046      	b.n	800a6dc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a64e:	4b27      	ldr	r3, [pc, #156]	; (800a6ec <vTaskSwitchContext+0xb4>)
 800a650:	2200      	movs	r2, #0
 800a652:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a654:	4b26      	ldr	r3, [pc, #152]	; (800a6f0 <vTaskSwitchContext+0xb8>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	60fb      	str	r3, [r7, #12]
 800a65a:	e010      	b.n	800a67e <vTaskSwitchContext+0x46>
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d10a      	bne.n	800a678 <vTaskSwitchContext+0x40>
	__asm volatile
 800a662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a666:	f383 8811 	msr	BASEPRI, r3
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	607b      	str	r3, [r7, #4]
}
 800a674:	bf00      	nop
 800a676:	e7fe      	b.n	800a676 <vTaskSwitchContext+0x3e>
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	3b01      	subs	r3, #1
 800a67c:	60fb      	str	r3, [r7, #12]
 800a67e:	491d      	ldr	r1, [pc, #116]	; (800a6f4 <vTaskSwitchContext+0xbc>)
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	4613      	mov	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	440b      	add	r3, r1
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d0e4      	beq.n	800a65c <vTaskSwitchContext+0x24>
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	4613      	mov	r3, r2
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	4413      	add	r3, r2
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	4a15      	ldr	r2, [pc, #84]	; (800a6f4 <vTaskSwitchContext+0xbc>)
 800a69e:	4413      	add	r3, r2
 800a6a0:	60bb      	str	r3, [r7, #8]
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	685a      	ldr	r2, [r3, #4]
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	605a      	str	r2, [r3, #4]
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	685a      	ldr	r2, [r3, #4]
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	3308      	adds	r3, #8
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d104      	bne.n	800a6c2 <vTaskSwitchContext+0x8a>
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	685a      	ldr	r2, [r3, #4]
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	605a      	str	r2, [r3, #4]
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	4a0b      	ldr	r2, [pc, #44]	; (800a6f8 <vTaskSwitchContext+0xc0>)
 800a6ca:	6013      	str	r3, [r2, #0]
 800a6cc:	4a08      	ldr	r2, [pc, #32]	; (800a6f0 <vTaskSwitchContext+0xb8>)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a6d2:	4b09      	ldr	r3, [pc, #36]	; (800a6f8 <vTaskSwitchContext+0xc0>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3354      	adds	r3, #84	; 0x54
 800a6d8:	4a08      	ldr	r2, [pc, #32]	; (800a6fc <vTaskSwitchContext+0xc4>)
 800a6da:	6013      	str	r3, [r2, #0]
}
 800a6dc:	bf00      	nop
 800a6de:	3714      	adds	r7, #20
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr
 800a6e8:	2000148c 	.word	0x2000148c
 800a6ec:	20001478 	.word	0x20001478
 800a6f0:	2000146c 	.word	0x2000146c
 800a6f4:	20000f94 	.word	0x20000f94
 800a6f8:	20000f90 	.word	0x20000f90
 800a6fc:	20000158 	.word	0x20000158

0800a700 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10a      	bne.n	800a726 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	60fb      	str	r3, [r7, #12]
}
 800a722:	bf00      	nop
 800a724:	e7fe      	b.n	800a724 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a726:	4b07      	ldr	r3, [pc, #28]	; (800a744 <vTaskPlaceOnEventList+0x44>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	3318      	adds	r3, #24
 800a72c:	4619      	mov	r1, r3
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7fe fd29 	bl	8009186 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a734:	2101      	movs	r1, #1
 800a736:	6838      	ldr	r0, [r7, #0]
 800a738:	f000 fa80 	bl	800ac3c <prvAddCurrentTaskToDelayedList>
}
 800a73c:	bf00      	nop
 800a73e:	3710      	adds	r7, #16
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	20000f90 	.word	0x20000f90

0800a748 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10a      	bne.n	800a770 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75e:	f383 8811 	msr	BASEPRI, r3
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	f3bf 8f4f 	dsb	sy
 800a76a:	617b      	str	r3, [r7, #20]
}
 800a76c:	bf00      	nop
 800a76e:	e7fe      	b.n	800a76e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a770:	4b0a      	ldr	r3, [pc, #40]	; (800a79c <vTaskPlaceOnEventListRestricted+0x54>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	3318      	adds	r3, #24
 800a776:	4619      	mov	r1, r3
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	f7fe fce0 	bl	800913e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d002      	beq.n	800a78a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a784:	f04f 33ff 	mov.w	r3, #4294967295
 800a788:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a78a:	6879      	ldr	r1, [r7, #4]
 800a78c:	68b8      	ldr	r0, [r7, #8]
 800a78e:	f000 fa55 	bl	800ac3c <prvAddCurrentTaskToDelayedList>
	}
 800a792:	bf00      	nop
 800a794:	3718      	adds	r7, #24
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	20000f90 	.word	0x20000f90

0800a7a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d10a      	bne.n	800a7cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ba:	f383 8811 	msr	BASEPRI, r3
 800a7be:	f3bf 8f6f 	isb	sy
 800a7c2:	f3bf 8f4f 	dsb	sy
 800a7c6:	60fb      	str	r3, [r7, #12]
}
 800a7c8:	bf00      	nop
 800a7ca:	e7fe      	b.n	800a7ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	3318      	adds	r3, #24
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7fe fd11 	bl	80091f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7d6:	4b1e      	ldr	r3, [pc, #120]	; (800a850 <xTaskRemoveFromEventList+0xb0>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d11d      	bne.n	800a81a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	3304      	adds	r3, #4
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fe fd08 	bl	80091f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ec:	4b19      	ldr	r3, [pc, #100]	; (800a854 <xTaskRemoveFromEventList+0xb4>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d903      	bls.n	800a7fc <xTaskRemoveFromEventList+0x5c>
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f8:	4a16      	ldr	r2, [pc, #88]	; (800a854 <xTaskRemoveFromEventList+0xb4>)
 800a7fa:	6013      	str	r3, [r2, #0]
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a800:	4613      	mov	r3, r2
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	4413      	add	r3, r2
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	4a13      	ldr	r2, [pc, #76]	; (800a858 <xTaskRemoveFromEventList+0xb8>)
 800a80a:	441a      	add	r2, r3
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	3304      	adds	r3, #4
 800a810:	4619      	mov	r1, r3
 800a812:	4610      	mov	r0, r2
 800a814:	f7fe fc93 	bl	800913e <vListInsertEnd>
 800a818:	e005      	b.n	800a826 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	3318      	adds	r3, #24
 800a81e:	4619      	mov	r1, r3
 800a820:	480e      	ldr	r0, [pc, #56]	; (800a85c <xTaskRemoveFromEventList+0xbc>)
 800a822:	f7fe fc8c 	bl	800913e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a82a:	4b0d      	ldr	r3, [pc, #52]	; (800a860 <xTaskRemoveFromEventList+0xc0>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a830:	429a      	cmp	r2, r3
 800a832:	d905      	bls.n	800a840 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a834:	2301      	movs	r3, #1
 800a836:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a838:	4b0a      	ldr	r3, [pc, #40]	; (800a864 <xTaskRemoveFromEventList+0xc4>)
 800a83a:	2201      	movs	r2, #1
 800a83c:	601a      	str	r2, [r3, #0]
 800a83e:	e001      	b.n	800a844 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a840:	2300      	movs	r3, #0
 800a842:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a844:	697b      	ldr	r3, [r7, #20]
}
 800a846:	4618      	mov	r0, r3
 800a848:	3718      	adds	r7, #24
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	2000148c 	.word	0x2000148c
 800a854:	2000146c 	.word	0x2000146c
 800a858:	20000f94 	.word	0x20000f94
 800a85c:	20001424 	.word	0x20001424
 800a860:	20000f90 	.word	0x20000f90
 800a864:	20001478 	.word	0x20001478

0800a868 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a870:	4b06      	ldr	r3, [pc, #24]	; (800a88c <vTaskInternalSetTimeOutState+0x24>)
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a878:	4b05      	ldr	r3, [pc, #20]	; (800a890 <vTaskInternalSetTimeOutState+0x28>)
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	605a      	str	r2, [r3, #4]
}
 800a880:	bf00      	nop
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr
 800a88c:	2000147c 	.word	0x2000147c
 800a890:	20001468 	.word	0x20001468

0800a894 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b088      	sub	sp, #32
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10a      	bne.n	800a8ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a8:	f383 8811 	msr	BASEPRI, r3
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	613b      	str	r3, [r7, #16]
}
 800a8b6:	bf00      	nop
 800a8b8:	e7fe      	b.n	800a8b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10a      	bne.n	800a8d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	60fb      	str	r3, [r7, #12]
}
 800a8d2:	bf00      	nop
 800a8d4:	e7fe      	b.n	800a8d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a8d6:	f000 fe7d 	bl	800b5d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a8da:	4b1d      	ldr	r3, [pc, #116]	; (800a950 <xTaskCheckForTimeOut+0xbc>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	69ba      	ldr	r2, [r7, #24]
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f2:	d102      	bne.n	800a8fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	61fb      	str	r3, [r7, #28]
 800a8f8:	e023      	b.n	800a942 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	4b15      	ldr	r3, [pc, #84]	; (800a954 <xTaskCheckForTimeOut+0xc0>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	429a      	cmp	r2, r3
 800a904:	d007      	beq.n	800a916 <xTaskCheckForTimeOut+0x82>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	69ba      	ldr	r2, [r7, #24]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d302      	bcc.n	800a916 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a910:	2301      	movs	r3, #1
 800a912:	61fb      	str	r3, [r7, #28]
 800a914:	e015      	b.n	800a942 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d20b      	bcs.n	800a938 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	1ad2      	subs	r2, r2, r3
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7ff ff9b 	bl	800a868 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a932:	2300      	movs	r3, #0
 800a934:	61fb      	str	r3, [r7, #28]
 800a936:	e004      	b.n	800a942 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	2200      	movs	r2, #0
 800a93c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a93e:	2301      	movs	r3, #1
 800a940:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a942:	f000 fe77 	bl	800b634 <vPortExitCritical>

	return xReturn;
 800a946:	69fb      	ldr	r3, [r7, #28]
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3720      	adds	r7, #32
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	20001468 	.word	0x20001468
 800a954:	2000147c 	.word	0x2000147c

0800a958 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a958:	b480      	push	{r7}
 800a95a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a95c:	4b03      	ldr	r3, [pc, #12]	; (800a96c <vTaskMissedYield+0x14>)
 800a95e:	2201      	movs	r2, #1
 800a960:	601a      	str	r2, [r3, #0]
}
 800a962:	bf00      	nop
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	20001478 	.word	0x20001478

0800a970 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a978:	f000 f852 	bl	800aa20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a97c:	4b06      	ldr	r3, [pc, #24]	; (800a998 <prvIdleTask+0x28>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b01      	cmp	r3, #1
 800a982:	d9f9      	bls.n	800a978 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a984:	4b05      	ldr	r3, [pc, #20]	; (800a99c <prvIdleTask+0x2c>)
 800a986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a98a:	601a      	str	r2, [r3, #0]
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a994:	e7f0      	b.n	800a978 <prvIdleTask+0x8>
 800a996:	bf00      	nop
 800a998:	20000f94 	.word	0x20000f94
 800a99c:	e000ed04 	.word	0xe000ed04

0800a9a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	607b      	str	r3, [r7, #4]
 800a9aa:	e00c      	b.n	800a9c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4413      	add	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4a12      	ldr	r2, [pc, #72]	; (800aa00 <prvInitialiseTaskLists+0x60>)
 800a9b8:	4413      	add	r3, r2
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fe fb92 	bl	80090e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	607b      	str	r3, [r7, #4]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2b37      	cmp	r3, #55	; 0x37
 800a9ca:	d9ef      	bls.n	800a9ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a9cc:	480d      	ldr	r0, [pc, #52]	; (800aa04 <prvInitialiseTaskLists+0x64>)
 800a9ce:	f7fe fb89 	bl	80090e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a9d2:	480d      	ldr	r0, [pc, #52]	; (800aa08 <prvInitialiseTaskLists+0x68>)
 800a9d4:	f7fe fb86 	bl	80090e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a9d8:	480c      	ldr	r0, [pc, #48]	; (800aa0c <prvInitialiseTaskLists+0x6c>)
 800a9da:	f7fe fb83 	bl	80090e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a9de:	480c      	ldr	r0, [pc, #48]	; (800aa10 <prvInitialiseTaskLists+0x70>)
 800a9e0:	f7fe fb80 	bl	80090e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a9e4:	480b      	ldr	r0, [pc, #44]	; (800aa14 <prvInitialiseTaskLists+0x74>)
 800a9e6:	f7fe fb7d 	bl	80090e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a9ea:	4b0b      	ldr	r3, [pc, #44]	; (800aa18 <prvInitialiseTaskLists+0x78>)
 800a9ec:	4a05      	ldr	r2, [pc, #20]	; (800aa04 <prvInitialiseTaskLists+0x64>)
 800a9ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a9f0:	4b0a      	ldr	r3, [pc, #40]	; (800aa1c <prvInitialiseTaskLists+0x7c>)
 800a9f2:	4a05      	ldr	r2, [pc, #20]	; (800aa08 <prvInitialiseTaskLists+0x68>)
 800a9f4:	601a      	str	r2, [r3, #0]
}
 800a9f6:	bf00      	nop
 800a9f8:	3708      	adds	r7, #8
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	20000f94 	.word	0x20000f94
 800aa04:	200013f4 	.word	0x200013f4
 800aa08:	20001408 	.word	0x20001408
 800aa0c:	20001424 	.word	0x20001424
 800aa10:	20001438 	.word	0x20001438
 800aa14:	20001450 	.word	0x20001450
 800aa18:	2000141c 	.word	0x2000141c
 800aa1c:	20001420 	.word	0x20001420

0800aa20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa26:	e019      	b.n	800aa5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa28:	f000 fdd4 	bl	800b5d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa2c:	4b10      	ldr	r3, [pc, #64]	; (800aa70 <prvCheckTasksWaitingTermination+0x50>)
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	3304      	adds	r3, #4
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7fe fbdd 	bl	80091f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa3e:	4b0d      	ldr	r3, [pc, #52]	; (800aa74 <prvCheckTasksWaitingTermination+0x54>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	3b01      	subs	r3, #1
 800aa44:	4a0b      	ldr	r2, [pc, #44]	; (800aa74 <prvCheckTasksWaitingTermination+0x54>)
 800aa46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa48:	4b0b      	ldr	r3, [pc, #44]	; (800aa78 <prvCheckTasksWaitingTermination+0x58>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	4a0a      	ldr	r2, [pc, #40]	; (800aa78 <prvCheckTasksWaitingTermination+0x58>)
 800aa50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa52:	f000 fdef 	bl	800b634 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 f810 	bl	800aa7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa5c:	4b06      	ldr	r3, [pc, #24]	; (800aa78 <prvCheckTasksWaitingTermination+0x58>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d1e1      	bne.n	800aa28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa64:	bf00      	nop
 800aa66:	bf00      	nop
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	20001438 	.word	0x20001438
 800aa74:	20001464 	.word	0x20001464
 800aa78:	2000144c 	.word	0x2000144c

0800aa7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	3354      	adds	r3, #84	; 0x54
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f002 f9c7 	bl	800ce1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d108      	bne.n	800aaaa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f000 ff87 	bl	800b9b0 <vPortFree>
				vPortFree( pxTCB );
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 ff84 	bl	800b9b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aaa8:	e018      	b.n	800aadc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d103      	bne.n	800aabc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 ff7b 	bl	800b9b0 <vPortFree>
	}
 800aaba:	e00f      	b.n	800aadc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d00a      	beq.n	800aadc <prvDeleteTCB+0x60>
	__asm volatile
 800aac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaca:	f383 8811 	msr	BASEPRI, r3
 800aace:	f3bf 8f6f 	isb	sy
 800aad2:	f3bf 8f4f 	dsb	sy
 800aad6:	60fb      	str	r3, [r7, #12]
}
 800aad8:	bf00      	nop
 800aada:	e7fe      	b.n	800aada <prvDeleteTCB+0x5e>
	}
 800aadc:	bf00      	nop
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aaea:	4b0c      	ldr	r3, [pc, #48]	; (800ab1c <prvResetNextTaskUnblockTime+0x38>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d104      	bne.n	800aafe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aaf4:	4b0a      	ldr	r3, [pc, #40]	; (800ab20 <prvResetNextTaskUnblockTime+0x3c>)
 800aaf6:	f04f 32ff 	mov.w	r2, #4294967295
 800aafa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aafc:	e008      	b.n	800ab10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aafe:	4b07      	ldr	r3, [pc, #28]	; (800ab1c <prvResetNextTaskUnblockTime+0x38>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	4a04      	ldr	r2, [pc, #16]	; (800ab20 <prvResetNextTaskUnblockTime+0x3c>)
 800ab0e:	6013      	str	r3, [r2, #0]
}
 800ab10:	bf00      	nop
 800ab12:	370c      	adds	r7, #12
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr
 800ab1c:	2000141c 	.word	0x2000141c
 800ab20:	20001484 	.word	0x20001484

0800ab24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ab2a:	4b0b      	ldr	r3, [pc, #44]	; (800ab58 <xTaskGetSchedulerState+0x34>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d102      	bne.n	800ab38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab32:	2301      	movs	r3, #1
 800ab34:	607b      	str	r3, [r7, #4]
 800ab36:	e008      	b.n	800ab4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab38:	4b08      	ldr	r3, [pc, #32]	; (800ab5c <xTaskGetSchedulerState+0x38>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d102      	bne.n	800ab46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ab40:	2302      	movs	r3, #2
 800ab42:	607b      	str	r3, [r7, #4]
 800ab44:	e001      	b.n	800ab4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab46:	2300      	movs	r3, #0
 800ab48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab4a:	687b      	ldr	r3, [r7, #4]
	}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr
 800ab58:	20001470 	.word	0x20001470
 800ab5c:	2000148c 	.word	0x2000148c

0800ab60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d056      	beq.n	800ac24 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ab76:	4b2e      	ldr	r3, [pc, #184]	; (800ac30 <xTaskPriorityDisinherit+0xd0>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	693a      	ldr	r2, [r7, #16]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d00a      	beq.n	800ab96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ab80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	60fb      	str	r3, [r7, #12]
}
 800ab92:	bf00      	nop
 800ab94:	e7fe      	b.n	800ab94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10a      	bne.n	800abb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	60bb      	str	r3, [r7, #8]
}
 800abb0:	bf00      	nop
 800abb2:	e7fe      	b.n	800abb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abb8:	1e5a      	subs	r2, r3, #1
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d02c      	beq.n	800ac24 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d128      	bne.n	800ac24 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	3304      	adds	r3, #4
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7fe fb0e 	bl	80091f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abf4:	4b0f      	ldr	r3, [pc, #60]	; (800ac34 <xTaskPriorityDisinherit+0xd4>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d903      	bls.n	800ac04 <xTaskPriorityDisinherit+0xa4>
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac00:	4a0c      	ldr	r2, [pc, #48]	; (800ac34 <xTaskPriorityDisinherit+0xd4>)
 800ac02:	6013      	str	r3, [r2, #0]
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac08:	4613      	mov	r3, r2
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4413      	add	r3, r2
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4a09      	ldr	r2, [pc, #36]	; (800ac38 <xTaskPriorityDisinherit+0xd8>)
 800ac12:	441a      	add	r2, r3
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	3304      	adds	r3, #4
 800ac18:	4619      	mov	r1, r3
 800ac1a:	4610      	mov	r0, r2
 800ac1c:	f7fe fa8f 	bl	800913e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac20:	2301      	movs	r3, #1
 800ac22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac24:	697b      	ldr	r3, [r7, #20]
	}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3718      	adds	r7, #24
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	20000f90 	.word	0x20000f90
 800ac34:	2000146c 	.word	0x2000146c
 800ac38:	20000f94 	.word	0x20000f94

0800ac3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ac46:	4b21      	ldr	r3, [pc, #132]	; (800accc <prvAddCurrentTaskToDelayedList+0x90>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac4c:	4b20      	ldr	r3, [pc, #128]	; (800acd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	3304      	adds	r3, #4
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fe fad0 	bl	80091f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac5e:	d10a      	bne.n	800ac76 <prvAddCurrentTaskToDelayedList+0x3a>
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d007      	beq.n	800ac76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac66:	4b1a      	ldr	r3, [pc, #104]	; (800acd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	3304      	adds	r3, #4
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	4819      	ldr	r0, [pc, #100]	; (800acd4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ac70:	f7fe fa65 	bl	800913e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac74:	e026      	b.n	800acc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac7e:	4b14      	ldr	r3, [pc, #80]	; (800acd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	68ba      	ldr	r2, [r7, #8]
 800ac84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac86:	68ba      	ldr	r2, [r7, #8]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d209      	bcs.n	800aca2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac8e:	4b12      	ldr	r3, [pc, #72]	; (800acd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	4b0f      	ldr	r3, [pc, #60]	; (800acd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	3304      	adds	r3, #4
 800ac98:	4619      	mov	r1, r3
 800ac9a:	4610      	mov	r0, r2
 800ac9c:	f7fe fa73 	bl	8009186 <vListInsert>
}
 800aca0:	e010      	b.n	800acc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aca2:	4b0e      	ldr	r3, [pc, #56]	; (800acdc <prvAddCurrentTaskToDelayedList+0xa0>)
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	4b0a      	ldr	r3, [pc, #40]	; (800acd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	3304      	adds	r3, #4
 800acac:	4619      	mov	r1, r3
 800acae:	4610      	mov	r0, r2
 800acb0:	f7fe fa69 	bl	8009186 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800acb4:	4b0a      	ldr	r3, [pc, #40]	; (800ace0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	68ba      	ldr	r2, [r7, #8]
 800acba:	429a      	cmp	r2, r3
 800acbc:	d202      	bcs.n	800acc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800acbe:	4a08      	ldr	r2, [pc, #32]	; (800ace0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	6013      	str	r3, [r2, #0]
}
 800acc4:	bf00      	nop
 800acc6:	3710      	adds	r7, #16
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	20001468 	.word	0x20001468
 800acd0:	20000f90 	.word	0x20000f90
 800acd4:	20001450 	.word	0x20001450
 800acd8:	20001420 	.word	0x20001420
 800acdc:	2000141c 	.word	0x2000141c
 800ace0:	20001484 	.word	0x20001484

0800ace4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b08a      	sub	sp, #40	; 0x28
 800ace8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800acea:	2300      	movs	r3, #0
 800acec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800acee:	f000 fb07 	bl	800b300 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800acf2:	4b1c      	ldr	r3, [pc, #112]	; (800ad64 <xTimerCreateTimerTask+0x80>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d021      	beq.n	800ad3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800acfa:	2300      	movs	r3, #0
 800acfc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800acfe:	2300      	movs	r3, #0
 800ad00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ad02:	1d3a      	adds	r2, r7, #4
 800ad04:	f107 0108 	add.w	r1, r7, #8
 800ad08:	f107 030c 	add.w	r3, r7, #12
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7fe f9cf 	bl	80090b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ad12:	6879      	ldr	r1, [r7, #4]
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	9202      	str	r2, [sp, #8]
 800ad1a:	9301      	str	r3, [sp, #4]
 800ad1c:	2302      	movs	r3, #2
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	2300      	movs	r3, #0
 800ad22:	460a      	mov	r2, r1
 800ad24:	4910      	ldr	r1, [pc, #64]	; (800ad68 <xTimerCreateTimerTask+0x84>)
 800ad26:	4811      	ldr	r0, [pc, #68]	; (800ad6c <xTimerCreateTimerTask+0x88>)
 800ad28:	f7ff f836 	bl	8009d98 <xTaskCreateStatic>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	4a10      	ldr	r2, [pc, #64]	; (800ad70 <xTimerCreateTimerTask+0x8c>)
 800ad30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ad32:	4b0f      	ldr	r3, [pc, #60]	; (800ad70 <xTimerCreateTimerTask+0x8c>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d001      	beq.n	800ad3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10a      	bne.n	800ad5a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ad44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad48:	f383 8811 	msr	BASEPRI, r3
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	f3bf 8f4f 	dsb	sy
 800ad54:	613b      	str	r3, [r7, #16]
}
 800ad56:	bf00      	nop
 800ad58:	e7fe      	b.n	800ad58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ad5a:	697b      	ldr	r3, [r7, #20]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3718      	adds	r7, #24
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	200014c0 	.word	0x200014c0
 800ad68:	0800dc68 	.word	0x0800dc68
 800ad6c:	0800aea9 	.word	0x0800aea9
 800ad70:	200014c4 	.word	0x200014c4

0800ad74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b08a      	sub	sp, #40	; 0x28
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
 800ad80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ad82:	2300      	movs	r3, #0
 800ad84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10a      	bne.n	800ada2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ad8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad90:	f383 8811 	msr	BASEPRI, r3
 800ad94:	f3bf 8f6f 	isb	sy
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	623b      	str	r3, [r7, #32]
}
 800ad9e:	bf00      	nop
 800ada0:	e7fe      	b.n	800ada0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ada2:	4b1a      	ldr	r3, [pc, #104]	; (800ae0c <xTimerGenericCommand+0x98>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d02a      	beq.n	800ae00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	2b05      	cmp	r3, #5
 800adba:	dc18      	bgt.n	800adee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800adbc:	f7ff feb2 	bl	800ab24 <xTaskGetSchedulerState>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	d109      	bne.n	800adda <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800adc6:	4b11      	ldr	r3, [pc, #68]	; (800ae0c <xTimerGenericCommand+0x98>)
 800adc8:	6818      	ldr	r0, [r3, #0]
 800adca:	f107 0110 	add.w	r1, r7, #16
 800adce:	2300      	movs	r3, #0
 800add0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800add2:	f7fe fb79 	bl	80094c8 <xQueueGenericSend>
 800add6:	6278      	str	r0, [r7, #36]	; 0x24
 800add8:	e012      	b.n	800ae00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800adda:	4b0c      	ldr	r3, [pc, #48]	; (800ae0c <xTimerGenericCommand+0x98>)
 800addc:	6818      	ldr	r0, [r3, #0]
 800adde:	f107 0110 	add.w	r1, r7, #16
 800ade2:	2300      	movs	r3, #0
 800ade4:	2200      	movs	r2, #0
 800ade6:	f7fe fb6f 	bl	80094c8 <xQueueGenericSend>
 800adea:	6278      	str	r0, [r7, #36]	; 0x24
 800adec:	e008      	b.n	800ae00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800adee:	4b07      	ldr	r3, [pc, #28]	; (800ae0c <xTimerGenericCommand+0x98>)
 800adf0:	6818      	ldr	r0, [r3, #0]
 800adf2:	f107 0110 	add.w	r1, r7, #16
 800adf6:	2300      	movs	r3, #0
 800adf8:	683a      	ldr	r2, [r7, #0]
 800adfa:	f7fe fc63 	bl	80096c4 <xQueueGenericSendFromISR>
 800adfe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3728      	adds	r7, #40	; 0x28
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	200014c0 	.word	0x200014c0

0800ae10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b088      	sub	sp, #32
 800ae14:	af02      	add	r7, sp, #8
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae1a:	4b22      	ldr	r3, [pc, #136]	; (800aea4 <prvProcessExpiredTimer+0x94>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	3304      	adds	r3, #4
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7fe f9e5 	bl	80091f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae34:	f003 0304 	and.w	r3, r3, #4
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d022      	beq.n	800ae82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	699a      	ldr	r2, [r3, #24]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	18d1      	adds	r1, r2, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	6978      	ldr	r0, [r7, #20]
 800ae4a:	f000 f8d1 	bl	800aff0 <prvInsertTimerInActiveList>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d01f      	beq.n	800ae94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae54:	2300      	movs	r3, #0
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	2300      	movs	r3, #0
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	6978      	ldr	r0, [r7, #20]
 800ae60:	f7ff ff88 	bl	800ad74 <xTimerGenericCommand>
 800ae64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d113      	bne.n	800ae94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ae6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae70:	f383 8811 	msr	BASEPRI, r3
 800ae74:	f3bf 8f6f 	isb	sy
 800ae78:	f3bf 8f4f 	dsb	sy
 800ae7c:	60fb      	str	r3, [r7, #12]
}
 800ae7e:	bf00      	nop
 800ae80:	e7fe      	b.n	800ae80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae88:	f023 0301 	bic.w	r3, r3, #1
 800ae8c:	b2da      	uxtb	r2, r3
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	6a1b      	ldr	r3, [r3, #32]
 800ae98:	6978      	ldr	r0, [r7, #20]
 800ae9a:	4798      	blx	r3
}
 800ae9c:	bf00      	nop
 800ae9e:	3718      	adds	r7, #24
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	200014b8 	.word	0x200014b8

0800aea8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aeb0:	f107 0308 	add.w	r3, r7, #8
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 f857 	bl	800af68 <prvGetNextExpireTime>
 800aeba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	4619      	mov	r1, r3
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f000 f803 	bl	800aecc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aec6:	f000 f8d5 	bl	800b074 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aeca:	e7f1      	b.n	800aeb0 <prvTimerTask+0x8>

0800aecc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aed6:	f7ff fa39 	bl	800a34c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aeda:	f107 0308 	add.w	r3, r7, #8
 800aede:	4618      	mov	r0, r3
 800aee0:	f000 f866 	bl	800afb0 <prvSampleTimeNow>
 800aee4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d130      	bne.n	800af4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10a      	bne.n	800af08 <prvProcessTimerOrBlockTask+0x3c>
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d806      	bhi.n	800af08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aefa:	f7ff fa35 	bl	800a368 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aefe:	68f9      	ldr	r1, [r7, #12]
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7ff ff85 	bl	800ae10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800af06:	e024      	b.n	800af52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d008      	beq.n	800af20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af0e:	4b13      	ldr	r3, [pc, #76]	; (800af5c <prvProcessTimerOrBlockTask+0x90>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d101      	bne.n	800af1c <prvProcessTimerOrBlockTask+0x50>
 800af18:	2301      	movs	r3, #1
 800af1a:	e000      	b.n	800af1e <prvProcessTimerOrBlockTask+0x52>
 800af1c:	2300      	movs	r3, #0
 800af1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af20:	4b0f      	ldr	r3, [pc, #60]	; (800af60 <prvProcessTimerOrBlockTask+0x94>)
 800af22:	6818      	ldr	r0, [r3, #0]
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	683a      	ldr	r2, [r7, #0]
 800af2c:	4619      	mov	r1, r3
 800af2e:	f7fe feff 	bl	8009d30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af32:	f7ff fa19 	bl	800a368 <xTaskResumeAll>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d10a      	bne.n	800af52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af3c:	4b09      	ldr	r3, [pc, #36]	; (800af64 <prvProcessTimerOrBlockTask+0x98>)
 800af3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af42:	601a      	str	r2, [r3, #0]
 800af44:	f3bf 8f4f 	dsb	sy
 800af48:	f3bf 8f6f 	isb	sy
}
 800af4c:	e001      	b.n	800af52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800af4e:	f7ff fa0b 	bl	800a368 <xTaskResumeAll>
}
 800af52:	bf00      	nop
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	200014bc 	.word	0x200014bc
 800af60:	200014c0 	.word	0x200014c0
 800af64:	e000ed04 	.word	0xe000ed04

0800af68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800af70:	4b0e      	ldr	r3, [pc, #56]	; (800afac <prvGetNextExpireTime+0x44>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d101      	bne.n	800af7e <prvGetNextExpireTime+0x16>
 800af7a:	2201      	movs	r2, #1
 800af7c:	e000      	b.n	800af80 <prvGetNextExpireTime+0x18>
 800af7e:	2200      	movs	r2, #0
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d105      	bne.n	800af98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af8c:	4b07      	ldr	r3, [pc, #28]	; (800afac <prvGetNextExpireTime+0x44>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	60fb      	str	r3, [r7, #12]
 800af96:	e001      	b.n	800af9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800af98:	2300      	movs	r3, #0
 800af9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800af9c:	68fb      	ldr	r3, [r7, #12]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3714      	adds	r7, #20
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	200014b8 	.word	0x200014b8

0800afb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800afb8:	f7ff fa74 	bl	800a4a4 <xTaskGetTickCount>
 800afbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800afbe:	4b0b      	ldr	r3, [pc, #44]	; (800afec <prvSampleTimeNow+0x3c>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d205      	bcs.n	800afd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800afc8:	f000 f936 	bl	800b238 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	601a      	str	r2, [r3, #0]
 800afd2:	e002      	b.n	800afda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800afda:	4a04      	ldr	r2, [pc, #16]	; (800afec <prvSampleTimeNow+0x3c>)
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800afe0:	68fb      	ldr	r3, [r7, #12]
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	200014c8 	.word	0x200014c8

0800aff0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b086      	sub	sp, #24
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]
 800affc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800affe:	2300      	movs	r3, #0
 800b000:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	68ba      	ldr	r2, [r7, #8]
 800b006:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	429a      	cmp	r2, r3
 800b014:	d812      	bhi.n	800b03c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	1ad2      	subs	r2, r2, r3
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	699b      	ldr	r3, [r3, #24]
 800b020:	429a      	cmp	r2, r3
 800b022:	d302      	bcc.n	800b02a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b024:	2301      	movs	r3, #1
 800b026:	617b      	str	r3, [r7, #20]
 800b028:	e01b      	b.n	800b062 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b02a:	4b10      	ldr	r3, [pc, #64]	; (800b06c <prvInsertTimerInActiveList+0x7c>)
 800b02c:	681a      	ldr	r2, [r3, #0]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	3304      	adds	r3, #4
 800b032:	4619      	mov	r1, r3
 800b034:	4610      	mov	r0, r2
 800b036:	f7fe f8a6 	bl	8009186 <vListInsert>
 800b03a:	e012      	b.n	800b062 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	429a      	cmp	r2, r3
 800b042:	d206      	bcs.n	800b052 <prvInsertTimerInActiveList+0x62>
 800b044:	68ba      	ldr	r2, [r7, #8]
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d302      	bcc.n	800b052 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b04c:	2301      	movs	r3, #1
 800b04e:	617b      	str	r3, [r7, #20]
 800b050:	e007      	b.n	800b062 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b052:	4b07      	ldr	r3, [pc, #28]	; (800b070 <prvInsertTimerInActiveList+0x80>)
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	3304      	adds	r3, #4
 800b05a:	4619      	mov	r1, r3
 800b05c:	4610      	mov	r0, r2
 800b05e:	f7fe f892 	bl	8009186 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b062:	697b      	ldr	r3, [r7, #20]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3718      	adds	r7, #24
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	200014bc 	.word	0x200014bc
 800b070:	200014b8 	.word	0x200014b8

0800b074 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b08e      	sub	sp, #56	; 0x38
 800b078:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b07a:	e0ca      	b.n	800b212 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	da18      	bge.n	800b0b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b082:	1d3b      	adds	r3, r7, #4
 800b084:	3304      	adds	r3, #4
 800b086:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d10a      	bne.n	800b0a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b092:	f383 8811 	msr	BASEPRI, r3
 800b096:	f3bf 8f6f 	isb	sy
 800b09a:	f3bf 8f4f 	dsb	sy
 800b09e:	61fb      	str	r3, [r7, #28]
}
 800b0a0:	bf00      	nop
 800b0a2:	e7fe      	b.n	800b0a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0aa:	6850      	ldr	r0, [r2, #4]
 800b0ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0ae:	6892      	ldr	r2, [r2, #8]
 800b0b0:	4611      	mov	r1, r2
 800b0b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f2c0 80ab 	blt.w	800b212 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c2:	695b      	ldr	r3, [r3, #20]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d004      	beq.n	800b0d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ca:	3304      	adds	r3, #4
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7fe f893 	bl	80091f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b0d2:	463b      	mov	r3, r7
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7ff ff6b 	bl	800afb0 <prvSampleTimeNow>
 800b0da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2b09      	cmp	r3, #9
 800b0e0:	f200 8096 	bhi.w	800b210 <prvProcessReceivedCommands+0x19c>
 800b0e4:	a201      	add	r2, pc, #4	; (adr r2, 800b0ec <prvProcessReceivedCommands+0x78>)
 800b0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ea:	bf00      	nop
 800b0ec:	0800b115 	.word	0x0800b115
 800b0f0:	0800b115 	.word	0x0800b115
 800b0f4:	0800b115 	.word	0x0800b115
 800b0f8:	0800b189 	.word	0x0800b189
 800b0fc:	0800b19d 	.word	0x0800b19d
 800b100:	0800b1e7 	.word	0x0800b1e7
 800b104:	0800b115 	.word	0x0800b115
 800b108:	0800b115 	.word	0x0800b115
 800b10c:	0800b189 	.word	0x0800b189
 800b110:	0800b19d 	.word	0x0800b19d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b11a:	f043 0301 	orr.w	r3, r3, #1
 800b11e:	b2da      	uxtb	r2, r3
 800b120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b126:	68ba      	ldr	r2, [r7, #8]
 800b128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12a:	699b      	ldr	r3, [r3, #24]
 800b12c:	18d1      	adds	r1, r2, r3
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b134:	f7ff ff5c 	bl	800aff0 <prvInsertTimerInActiveList>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d069      	beq.n	800b212 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b140:	6a1b      	ldr	r3, [r3, #32]
 800b142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b144:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b14c:	f003 0304 	and.w	r3, r3, #4
 800b150:	2b00      	cmp	r3, #0
 800b152:	d05e      	beq.n	800b212 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b154:	68ba      	ldr	r2, [r7, #8]
 800b156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b158:	699b      	ldr	r3, [r3, #24]
 800b15a:	441a      	add	r2, r3
 800b15c:	2300      	movs	r3, #0
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	2300      	movs	r3, #0
 800b162:	2100      	movs	r1, #0
 800b164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b166:	f7ff fe05 	bl	800ad74 <xTimerGenericCommand>
 800b16a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b16c:	6a3b      	ldr	r3, [r7, #32]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d14f      	bne.n	800b212 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b176:	f383 8811 	msr	BASEPRI, r3
 800b17a:	f3bf 8f6f 	isb	sy
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	61bb      	str	r3, [r7, #24]
}
 800b184:	bf00      	nop
 800b186:	e7fe      	b.n	800b186 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b18e:	f023 0301 	bic.w	r3, r3, #1
 800b192:	b2da      	uxtb	r2, r3
 800b194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b19a:	e03a      	b.n	800b212 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b19e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1a2:	f043 0301 	orr.w	r3, r3, #1
 800b1a6:	b2da      	uxtb	r2, r3
 800b1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b1ae:	68ba      	ldr	r2, [r7, #8]
 800b1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d10a      	bne.n	800b1d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c0:	f383 8811 	msr	BASEPRI, r3
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	617b      	str	r3, [r7, #20]
}
 800b1ce:	bf00      	nop
 800b1d0:	e7fe      	b.n	800b1d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d4:	699a      	ldr	r2, [r3, #24]
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d8:	18d1      	adds	r1, r2, r3
 800b1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1e0:	f7ff ff06 	bl	800aff0 <prvInsertTimerInActiveList>
					break;
 800b1e4:	e015      	b.n	800b212 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1ec:	f003 0302 	and.w	r3, r3, #2
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d103      	bne.n	800b1fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b1f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1f6:	f000 fbdb 	bl	800b9b0 <vPortFree>
 800b1fa:	e00a      	b.n	800b212 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b202:	f023 0301 	bic.w	r3, r3, #1
 800b206:	b2da      	uxtb	r2, r3
 800b208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b20e:	e000      	b.n	800b212 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b210:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b212:	4b08      	ldr	r3, [pc, #32]	; (800b234 <prvProcessReceivedCommands+0x1c0>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	1d39      	adds	r1, r7, #4
 800b218:	2200      	movs	r2, #0
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7fe faee 	bl	80097fc <xQueueReceive>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	f47f af2a 	bne.w	800b07c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b228:	bf00      	nop
 800b22a:	bf00      	nop
 800b22c:	3730      	adds	r7, #48	; 0x30
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	200014c0 	.word	0x200014c0

0800b238 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b088      	sub	sp, #32
 800b23c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b23e:	e048      	b.n	800b2d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b240:	4b2d      	ldr	r3, [pc, #180]	; (800b2f8 <prvSwitchTimerLists+0xc0>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b24a:	4b2b      	ldr	r3, [pc, #172]	; (800b2f8 <prvSwitchTimerLists+0xc0>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	3304      	adds	r3, #4
 800b258:	4618      	mov	r0, r3
 800b25a:	f7fd ffcd 	bl	80091f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	6a1b      	ldr	r3, [r3, #32]
 800b262:	68f8      	ldr	r0, [r7, #12]
 800b264:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b26c:	f003 0304 	and.w	r3, r3, #4
 800b270:	2b00      	cmp	r3, #0
 800b272:	d02e      	beq.n	800b2d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	699b      	ldr	r3, [r3, #24]
 800b278:	693a      	ldr	r2, [r7, #16]
 800b27a:	4413      	add	r3, r2
 800b27c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	429a      	cmp	r2, r3
 800b284:	d90e      	bls.n	800b2a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	68ba      	ldr	r2, [r7, #8]
 800b28a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b292:	4b19      	ldr	r3, [pc, #100]	; (800b2f8 <prvSwitchTimerLists+0xc0>)
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	3304      	adds	r3, #4
 800b29a:	4619      	mov	r1, r3
 800b29c:	4610      	mov	r0, r2
 800b29e:	f7fd ff72 	bl	8009186 <vListInsert>
 800b2a2:	e016      	b.n	800b2d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	9300      	str	r3, [sp, #0]
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	693a      	ldr	r2, [r7, #16]
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	f7ff fd60 	bl	800ad74 <xTimerGenericCommand>
 800b2b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d10a      	bne.n	800b2d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c0:	f383 8811 	msr	BASEPRI, r3
 800b2c4:	f3bf 8f6f 	isb	sy
 800b2c8:	f3bf 8f4f 	dsb	sy
 800b2cc:	603b      	str	r3, [r7, #0]
}
 800b2ce:	bf00      	nop
 800b2d0:	e7fe      	b.n	800b2d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b2d2:	4b09      	ldr	r3, [pc, #36]	; (800b2f8 <prvSwitchTimerLists+0xc0>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1b1      	bne.n	800b240 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b2dc:	4b06      	ldr	r3, [pc, #24]	; (800b2f8 <prvSwitchTimerLists+0xc0>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b2e2:	4b06      	ldr	r3, [pc, #24]	; (800b2fc <prvSwitchTimerLists+0xc4>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a04      	ldr	r2, [pc, #16]	; (800b2f8 <prvSwitchTimerLists+0xc0>)
 800b2e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b2ea:	4a04      	ldr	r2, [pc, #16]	; (800b2fc <prvSwitchTimerLists+0xc4>)
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	6013      	str	r3, [r2, #0]
}
 800b2f0:	bf00      	nop
 800b2f2:	3718      	adds	r7, #24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	200014b8 	.word	0x200014b8
 800b2fc:	200014bc 	.word	0x200014bc

0800b300 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b306:	f000 f965 	bl	800b5d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b30a:	4b15      	ldr	r3, [pc, #84]	; (800b360 <prvCheckForValidListAndQueue+0x60>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d120      	bne.n	800b354 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b312:	4814      	ldr	r0, [pc, #80]	; (800b364 <prvCheckForValidListAndQueue+0x64>)
 800b314:	f7fd fee6 	bl	80090e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b318:	4813      	ldr	r0, [pc, #76]	; (800b368 <prvCheckForValidListAndQueue+0x68>)
 800b31a:	f7fd fee3 	bl	80090e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b31e:	4b13      	ldr	r3, [pc, #76]	; (800b36c <prvCheckForValidListAndQueue+0x6c>)
 800b320:	4a10      	ldr	r2, [pc, #64]	; (800b364 <prvCheckForValidListAndQueue+0x64>)
 800b322:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b324:	4b12      	ldr	r3, [pc, #72]	; (800b370 <prvCheckForValidListAndQueue+0x70>)
 800b326:	4a10      	ldr	r2, [pc, #64]	; (800b368 <prvCheckForValidListAndQueue+0x68>)
 800b328:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b32a:	2300      	movs	r3, #0
 800b32c:	9300      	str	r3, [sp, #0]
 800b32e:	4b11      	ldr	r3, [pc, #68]	; (800b374 <prvCheckForValidListAndQueue+0x74>)
 800b330:	4a11      	ldr	r2, [pc, #68]	; (800b378 <prvCheckForValidListAndQueue+0x78>)
 800b332:	2110      	movs	r1, #16
 800b334:	200a      	movs	r0, #10
 800b336:	f7fd fff1 	bl	800931c <xQueueGenericCreateStatic>
 800b33a:	4603      	mov	r3, r0
 800b33c:	4a08      	ldr	r2, [pc, #32]	; (800b360 <prvCheckForValidListAndQueue+0x60>)
 800b33e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b340:	4b07      	ldr	r3, [pc, #28]	; (800b360 <prvCheckForValidListAndQueue+0x60>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d005      	beq.n	800b354 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b348:	4b05      	ldr	r3, [pc, #20]	; (800b360 <prvCheckForValidListAndQueue+0x60>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	490b      	ldr	r1, [pc, #44]	; (800b37c <prvCheckForValidListAndQueue+0x7c>)
 800b34e:	4618      	mov	r0, r3
 800b350:	f7fe fcc4 	bl	8009cdc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b354:	f000 f96e 	bl	800b634 <vPortExitCritical>
}
 800b358:	bf00      	nop
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	200014c0 	.word	0x200014c0
 800b364:	20001490 	.word	0x20001490
 800b368:	200014a4 	.word	0x200014a4
 800b36c:	200014b8 	.word	0x200014b8
 800b370:	200014bc 	.word	0x200014bc
 800b374:	2000156c 	.word	0x2000156c
 800b378:	200014cc 	.word	0x200014cc
 800b37c:	0800dc70 	.word	0x0800dc70

0800b380 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b380:	b480      	push	{r7}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	3b04      	subs	r3, #4
 800b390:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3b04      	subs	r3, #4
 800b39e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	f023 0201 	bic.w	r2, r3, #1
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	3b04      	subs	r3, #4
 800b3ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b3b0:	4a0c      	ldr	r2, [pc, #48]	; (800b3e4 <pxPortInitialiseStack+0x64>)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	3b14      	subs	r3, #20
 800b3ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	3b04      	subs	r3, #4
 800b3c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f06f 0202 	mvn.w	r2, #2
 800b3ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	3b20      	subs	r3, #32
 800b3d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3714      	adds	r7, #20
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr
 800b3e4:	0800b3e9 	.word	0x0800b3e9

0800b3e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b085      	sub	sp, #20
 800b3ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b3f2:	4b12      	ldr	r3, [pc, #72]	; (800b43c <prvTaskExitError+0x54>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3fa:	d00a      	beq.n	800b412 <prvTaskExitError+0x2a>
	__asm volatile
 800b3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	60fb      	str	r3, [r7, #12]
}
 800b40e:	bf00      	nop
 800b410:	e7fe      	b.n	800b410 <prvTaskExitError+0x28>
	__asm volatile
 800b412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b416:	f383 8811 	msr	BASEPRI, r3
 800b41a:	f3bf 8f6f 	isb	sy
 800b41e:	f3bf 8f4f 	dsb	sy
 800b422:	60bb      	str	r3, [r7, #8]
}
 800b424:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b426:	bf00      	nop
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d0fc      	beq.n	800b428 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b42e:	bf00      	nop
 800b430:	bf00      	nop
 800b432:	3714      	adds	r7, #20
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr
 800b43c:	20000098 	.word	0x20000098

0800b440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b440:	4b07      	ldr	r3, [pc, #28]	; (800b460 <pxCurrentTCBConst2>)
 800b442:	6819      	ldr	r1, [r3, #0]
 800b444:	6808      	ldr	r0, [r1, #0]
 800b446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44a:	f380 8809 	msr	PSP, r0
 800b44e:	f3bf 8f6f 	isb	sy
 800b452:	f04f 0000 	mov.w	r0, #0
 800b456:	f380 8811 	msr	BASEPRI, r0
 800b45a:	4770      	bx	lr
 800b45c:	f3af 8000 	nop.w

0800b460 <pxCurrentTCBConst2>:
 800b460:	20000f90 	.word	0x20000f90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b464:	bf00      	nop
 800b466:	bf00      	nop

0800b468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b468:	4808      	ldr	r0, [pc, #32]	; (800b48c <prvPortStartFirstTask+0x24>)
 800b46a:	6800      	ldr	r0, [r0, #0]
 800b46c:	6800      	ldr	r0, [r0, #0]
 800b46e:	f380 8808 	msr	MSP, r0
 800b472:	f04f 0000 	mov.w	r0, #0
 800b476:	f380 8814 	msr	CONTROL, r0
 800b47a:	b662      	cpsie	i
 800b47c:	b661      	cpsie	f
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	df00      	svc	0
 800b488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b48a:	bf00      	nop
 800b48c:	e000ed08 	.word	0xe000ed08

0800b490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b496:	4b46      	ldr	r3, [pc, #280]	; (800b5b0 <xPortStartScheduler+0x120>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a46      	ldr	r2, [pc, #280]	; (800b5b4 <xPortStartScheduler+0x124>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d10a      	bne.n	800b4b6 <xPortStartScheduler+0x26>
	__asm volatile
 800b4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	613b      	str	r3, [r7, #16]
}
 800b4b2:	bf00      	nop
 800b4b4:	e7fe      	b.n	800b4b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b4b6:	4b3e      	ldr	r3, [pc, #248]	; (800b5b0 <xPortStartScheduler+0x120>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a3f      	ldr	r2, [pc, #252]	; (800b5b8 <xPortStartScheduler+0x128>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d10a      	bne.n	800b4d6 <xPortStartScheduler+0x46>
	__asm volatile
 800b4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	60fb      	str	r3, [r7, #12]
}
 800b4d2:	bf00      	nop
 800b4d4:	e7fe      	b.n	800b4d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b4d6:	4b39      	ldr	r3, [pc, #228]	; (800b5bc <xPortStartScheduler+0x12c>)
 800b4d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	22ff      	movs	r2, #255	; 0xff
 800b4e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b4f0:	78fb      	ldrb	r3, [r7, #3]
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b4f8:	b2da      	uxtb	r2, r3
 800b4fa:	4b31      	ldr	r3, [pc, #196]	; (800b5c0 <xPortStartScheduler+0x130>)
 800b4fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b4fe:	4b31      	ldr	r3, [pc, #196]	; (800b5c4 <xPortStartScheduler+0x134>)
 800b500:	2207      	movs	r2, #7
 800b502:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b504:	e009      	b.n	800b51a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b506:	4b2f      	ldr	r3, [pc, #188]	; (800b5c4 <xPortStartScheduler+0x134>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	3b01      	subs	r3, #1
 800b50c:	4a2d      	ldr	r2, [pc, #180]	; (800b5c4 <xPortStartScheduler+0x134>)
 800b50e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b510:	78fb      	ldrb	r3, [r7, #3]
 800b512:	b2db      	uxtb	r3, r3
 800b514:	005b      	lsls	r3, r3, #1
 800b516:	b2db      	uxtb	r3, r3
 800b518:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b51a:	78fb      	ldrb	r3, [r7, #3]
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b522:	2b80      	cmp	r3, #128	; 0x80
 800b524:	d0ef      	beq.n	800b506 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b526:	4b27      	ldr	r3, [pc, #156]	; (800b5c4 <xPortStartScheduler+0x134>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f1c3 0307 	rsb	r3, r3, #7
 800b52e:	2b04      	cmp	r3, #4
 800b530:	d00a      	beq.n	800b548 <xPortStartScheduler+0xb8>
	__asm volatile
 800b532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	60bb      	str	r3, [r7, #8]
}
 800b544:	bf00      	nop
 800b546:	e7fe      	b.n	800b546 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b548:	4b1e      	ldr	r3, [pc, #120]	; (800b5c4 <xPortStartScheduler+0x134>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	021b      	lsls	r3, r3, #8
 800b54e:	4a1d      	ldr	r2, [pc, #116]	; (800b5c4 <xPortStartScheduler+0x134>)
 800b550:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b552:	4b1c      	ldr	r3, [pc, #112]	; (800b5c4 <xPortStartScheduler+0x134>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b55a:	4a1a      	ldr	r2, [pc, #104]	; (800b5c4 <xPortStartScheduler+0x134>)
 800b55c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	b2da      	uxtb	r2, r3
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b566:	4b18      	ldr	r3, [pc, #96]	; (800b5c8 <xPortStartScheduler+0x138>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a17      	ldr	r2, [pc, #92]	; (800b5c8 <xPortStartScheduler+0x138>)
 800b56c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b572:	4b15      	ldr	r3, [pc, #84]	; (800b5c8 <xPortStartScheduler+0x138>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a14      	ldr	r2, [pc, #80]	; (800b5c8 <xPortStartScheduler+0x138>)
 800b578:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b57c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b57e:	f000 f8dd 	bl	800b73c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b582:	4b12      	ldr	r3, [pc, #72]	; (800b5cc <xPortStartScheduler+0x13c>)
 800b584:	2200      	movs	r2, #0
 800b586:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b588:	f000 f8fc 	bl	800b784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b58c:	4b10      	ldr	r3, [pc, #64]	; (800b5d0 <xPortStartScheduler+0x140>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a0f      	ldr	r2, [pc, #60]	; (800b5d0 <xPortStartScheduler+0x140>)
 800b592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b596:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b598:	f7ff ff66 	bl	800b468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b59c:	f7ff f84c 	bl	800a638 <vTaskSwitchContext>
	prvTaskExitError();
 800b5a0:	f7ff ff22 	bl	800b3e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3718      	adds	r7, #24
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	e000ed00 	.word	0xe000ed00
 800b5b4:	410fc271 	.word	0x410fc271
 800b5b8:	410fc270 	.word	0x410fc270
 800b5bc:	e000e400 	.word	0xe000e400
 800b5c0:	200015bc 	.word	0x200015bc
 800b5c4:	200015c0 	.word	0x200015c0
 800b5c8:	e000ed20 	.word	0xe000ed20
 800b5cc:	20000098 	.word	0x20000098
 800b5d0:	e000ef34 	.word	0xe000ef34

0800b5d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
	__asm volatile
 800b5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5de:	f383 8811 	msr	BASEPRI, r3
 800b5e2:	f3bf 8f6f 	isb	sy
 800b5e6:	f3bf 8f4f 	dsb	sy
 800b5ea:	607b      	str	r3, [r7, #4]
}
 800b5ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b5ee:	4b0f      	ldr	r3, [pc, #60]	; (800b62c <vPortEnterCritical+0x58>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	4a0d      	ldr	r2, [pc, #52]	; (800b62c <vPortEnterCritical+0x58>)
 800b5f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b5f8:	4b0c      	ldr	r3, [pc, #48]	; (800b62c <vPortEnterCritical+0x58>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d10f      	bne.n	800b620 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b600:	4b0b      	ldr	r3, [pc, #44]	; (800b630 <vPortEnterCritical+0x5c>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	b2db      	uxtb	r3, r3
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00a      	beq.n	800b620 <vPortEnterCritical+0x4c>
	__asm volatile
 800b60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60e:	f383 8811 	msr	BASEPRI, r3
 800b612:	f3bf 8f6f 	isb	sy
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	603b      	str	r3, [r7, #0]
}
 800b61c:	bf00      	nop
 800b61e:	e7fe      	b.n	800b61e <vPortEnterCritical+0x4a>
	}
}
 800b620:	bf00      	nop
 800b622:	370c      	adds	r7, #12
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr
 800b62c:	20000098 	.word	0x20000098
 800b630:	e000ed04 	.word	0xe000ed04

0800b634 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b63a:	4b12      	ldr	r3, [pc, #72]	; (800b684 <vPortExitCritical+0x50>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d10a      	bne.n	800b658 <vPortExitCritical+0x24>
	__asm volatile
 800b642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b646:	f383 8811 	msr	BASEPRI, r3
 800b64a:	f3bf 8f6f 	isb	sy
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	607b      	str	r3, [r7, #4]
}
 800b654:	bf00      	nop
 800b656:	e7fe      	b.n	800b656 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b658:	4b0a      	ldr	r3, [pc, #40]	; (800b684 <vPortExitCritical+0x50>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	3b01      	subs	r3, #1
 800b65e:	4a09      	ldr	r2, [pc, #36]	; (800b684 <vPortExitCritical+0x50>)
 800b660:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b662:	4b08      	ldr	r3, [pc, #32]	; (800b684 <vPortExitCritical+0x50>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d105      	bne.n	800b676 <vPortExitCritical+0x42>
 800b66a:	2300      	movs	r3, #0
 800b66c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	f383 8811 	msr	BASEPRI, r3
}
 800b674:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b676:	bf00      	nop
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	20000098 	.word	0x20000098
	...

0800b690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b690:	f3ef 8009 	mrs	r0, PSP
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	4b15      	ldr	r3, [pc, #84]	; (800b6f0 <pxCurrentTCBConst>)
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	f01e 0f10 	tst.w	lr, #16
 800b6a0:	bf08      	it	eq
 800b6a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b6a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6aa:	6010      	str	r0, [r2, #0]
 800b6ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b6b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b6b4:	f380 8811 	msr	BASEPRI, r0
 800b6b8:	f3bf 8f4f 	dsb	sy
 800b6bc:	f3bf 8f6f 	isb	sy
 800b6c0:	f7fe ffba 	bl	800a638 <vTaskSwitchContext>
 800b6c4:	f04f 0000 	mov.w	r0, #0
 800b6c8:	f380 8811 	msr	BASEPRI, r0
 800b6cc:	bc09      	pop	{r0, r3}
 800b6ce:	6819      	ldr	r1, [r3, #0]
 800b6d0:	6808      	ldr	r0, [r1, #0]
 800b6d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d6:	f01e 0f10 	tst.w	lr, #16
 800b6da:	bf08      	it	eq
 800b6dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b6e0:	f380 8809 	msr	PSP, r0
 800b6e4:	f3bf 8f6f 	isb	sy
 800b6e8:	4770      	bx	lr
 800b6ea:	bf00      	nop
 800b6ec:	f3af 8000 	nop.w

0800b6f0 <pxCurrentTCBConst>:
 800b6f0:	20000f90 	.word	0x20000f90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b6f4:	bf00      	nop
 800b6f6:	bf00      	nop

0800b6f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
	__asm volatile
 800b6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b702:	f383 8811 	msr	BASEPRI, r3
 800b706:	f3bf 8f6f 	isb	sy
 800b70a:	f3bf 8f4f 	dsb	sy
 800b70e:	607b      	str	r3, [r7, #4]
}
 800b710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b712:	f7fe fed7 	bl	800a4c4 <xTaskIncrementTick>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d003      	beq.n	800b724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b71c:	4b06      	ldr	r3, [pc, #24]	; (800b738 <xPortSysTickHandler+0x40>)
 800b71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b722:	601a      	str	r2, [r3, #0]
 800b724:	2300      	movs	r3, #0
 800b726:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	f383 8811 	msr	BASEPRI, r3
}
 800b72e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b730:	bf00      	nop
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
 800b738:	e000ed04 	.word	0xe000ed04

0800b73c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b73c:	b480      	push	{r7}
 800b73e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b740:	4b0b      	ldr	r3, [pc, #44]	; (800b770 <vPortSetupTimerInterrupt+0x34>)
 800b742:	2200      	movs	r2, #0
 800b744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b746:	4b0b      	ldr	r3, [pc, #44]	; (800b774 <vPortSetupTimerInterrupt+0x38>)
 800b748:	2200      	movs	r2, #0
 800b74a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b74c:	4b0a      	ldr	r3, [pc, #40]	; (800b778 <vPortSetupTimerInterrupt+0x3c>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a0a      	ldr	r2, [pc, #40]	; (800b77c <vPortSetupTimerInterrupt+0x40>)
 800b752:	fba2 2303 	umull	r2, r3, r2, r3
 800b756:	099b      	lsrs	r3, r3, #6
 800b758:	4a09      	ldr	r2, [pc, #36]	; (800b780 <vPortSetupTimerInterrupt+0x44>)
 800b75a:	3b01      	subs	r3, #1
 800b75c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b75e:	4b04      	ldr	r3, [pc, #16]	; (800b770 <vPortSetupTimerInterrupt+0x34>)
 800b760:	2207      	movs	r2, #7
 800b762:	601a      	str	r2, [r3, #0]
}
 800b764:	bf00      	nop
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	e000e010 	.word	0xe000e010
 800b774:	e000e018 	.word	0xe000e018
 800b778:	20000000 	.word	0x20000000
 800b77c:	10624dd3 	.word	0x10624dd3
 800b780:	e000e014 	.word	0xe000e014

0800b784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b794 <vPortEnableVFP+0x10>
 800b788:	6801      	ldr	r1, [r0, #0]
 800b78a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b78e:	6001      	str	r1, [r0, #0]
 800b790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b792:	bf00      	nop
 800b794:	e000ed88 	.word	0xe000ed88

0800b798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b798:	b480      	push	{r7}
 800b79a:	b085      	sub	sp, #20
 800b79c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b79e:	f3ef 8305 	mrs	r3, IPSR
 800b7a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2b0f      	cmp	r3, #15
 800b7a8:	d914      	bls.n	800b7d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b7aa:	4a17      	ldr	r2, [pc, #92]	; (800b808 <vPortValidateInterruptPriority+0x70>)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b7b4:	4b15      	ldr	r3, [pc, #84]	; (800b80c <vPortValidateInterruptPriority+0x74>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	7afa      	ldrb	r2, [r7, #11]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d20a      	bcs.n	800b7d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c2:	f383 8811 	msr	BASEPRI, r3
 800b7c6:	f3bf 8f6f 	isb	sy
 800b7ca:	f3bf 8f4f 	dsb	sy
 800b7ce:	607b      	str	r3, [r7, #4]
}
 800b7d0:	bf00      	nop
 800b7d2:	e7fe      	b.n	800b7d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b7d4:	4b0e      	ldr	r3, [pc, #56]	; (800b810 <vPortValidateInterruptPriority+0x78>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b7dc:	4b0d      	ldr	r3, [pc, #52]	; (800b814 <vPortValidateInterruptPriority+0x7c>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d90a      	bls.n	800b7fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	603b      	str	r3, [r7, #0]
}
 800b7f6:	bf00      	nop
 800b7f8:	e7fe      	b.n	800b7f8 <vPortValidateInterruptPriority+0x60>
	}
 800b7fa:	bf00      	nop
 800b7fc:	3714      	adds	r7, #20
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	e000e3f0 	.word	0xe000e3f0
 800b80c:	200015bc 	.word	0x200015bc
 800b810:	e000ed0c 	.word	0xe000ed0c
 800b814:	200015c0 	.word	0x200015c0

0800b818 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b08a      	sub	sp, #40	; 0x28
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b820:	2300      	movs	r3, #0
 800b822:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b824:	f7fe fd92 	bl	800a34c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b828:	4b5b      	ldr	r3, [pc, #364]	; (800b998 <pvPortMalloc+0x180>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d101      	bne.n	800b834 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b830:	f000 f920 	bl	800ba74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b834:	4b59      	ldr	r3, [pc, #356]	; (800b99c <pvPortMalloc+0x184>)
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4013      	ands	r3, r2
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f040 8093 	bne.w	800b968 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d01d      	beq.n	800b884 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b848:	2208      	movs	r2, #8
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4413      	add	r3, r2
 800b84e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f003 0307 	and.w	r3, r3, #7
 800b856:	2b00      	cmp	r3, #0
 800b858:	d014      	beq.n	800b884 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f023 0307 	bic.w	r3, r3, #7
 800b860:	3308      	adds	r3, #8
 800b862:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f003 0307 	and.w	r3, r3, #7
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00a      	beq.n	800b884 <pvPortMalloc+0x6c>
	__asm volatile
 800b86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	617b      	str	r3, [r7, #20]
}
 800b880:	bf00      	nop
 800b882:	e7fe      	b.n	800b882 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d06e      	beq.n	800b968 <pvPortMalloc+0x150>
 800b88a:	4b45      	ldr	r3, [pc, #276]	; (800b9a0 <pvPortMalloc+0x188>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	429a      	cmp	r2, r3
 800b892:	d869      	bhi.n	800b968 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b894:	4b43      	ldr	r3, [pc, #268]	; (800b9a4 <pvPortMalloc+0x18c>)
 800b896:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b898:	4b42      	ldr	r3, [pc, #264]	; (800b9a4 <pvPortMalloc+0x18c>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b89e:	e004      	b.n	800b8aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d903      	bls.n	800b8bc <pvPortMalloc+0xa4>
 800b8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1f1      	bne.n	800b8a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b8bc:	4b36      	ldr	r3, [pc, #216]	; (800b998 <pvPortMalloc+0x180>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d050      	beq.n	800b968 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b8c6:	6a3b      	ldr	r3, [r7, #32]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2208      	movs	r2, #8
 800b8cc:	4413      	add	r3, r2
 800b8ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	6a3b      	ldr	r3, [r7, #32]
 800b8d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8da:	685a      	ldr	r2, [r3, #4]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	1ad2      	subs	r2, r2, r3
 800b8e0:	2308      	movs	r3, #8
 800b8e2:	005b      	lsls	r3, r3, #1
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d91f      	bls.n	800b928 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b8e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	f003 0307 	and.w	r3, r3, #7
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00a      	beq.n	800b910 <pvPortMalloc+0xf8>
	__asm volatile
 800b8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	613b      	str	r3, [r7, #16]
}
 800b90c:	bf00      	nop
 800b90e:	e7fe      	b.n	800b90e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	685a      	ldr	r2, [r3, #4]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	1ad2      	subs	r2, r2, r3
 800b918:	69bb      	ldr	r3, [r7, #24]
 800b91a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b922:	69b8      	ldr	r0, [r7, #24]
 800b924:	f000 f908 	bl	800bb38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b928:	4b1d      	ldr	r3, [pc, #116]	; (800b9a0 <pvPortMalloc+0x188>)
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	1ad3      	subs	r3, r2, r3
 800b932:	4a1b      	ldr	r2, [pc, #108]	; (800b9a0 <pvPortMalloc+0x188>)
 800b934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b936:	4b1a      	ldr	r3, [pc, #104]	; (800b9a0 <pvPortMalloc+0x188>)
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	4b1b      	ldr	r3, [pc, #108]	; (800b9a8 <pvPortMalloc+0x190>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d203      	bcs.n	800b94a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b942:	4b17      	ldr	r3, [pc, #92]	; (800b9a0 <pvPortMalloc+0x188>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4a18      	ldr	r2, [pc, #96]	; (800b9a8 <pvPortMalloc+0x190>)
 800b948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94c:	685a      	ldr	r2, [r3, #4]
 800b94e:	4b13      	ldr	r3, [pc, #76]	; (800b99c <pvPortMalloc+0x184>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	431a      	orrs	r2, r3
 800b954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95a:	2200      	movs	r2, #0
 800b95c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b95e:	4b13      	ldr	r3, [pc, #76]	; (800b9ac <pvPortMalloc+0x194>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	3301      	adds	r3, #1
 800b964:	4a11      	ldr	r2, [pc, #68]	; (800b9ac <pvPortMalloc+0x194>)
 800b966:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b968:	f7fe fcfe 	bl	800a368 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	f003 0307 	and.w	r3, r3, #7
 800b972:	2b00      	cmp	r3, #0
 800b974:	d00a      	beq.n	800b98c <pvPortMalloc+0x174>
	__asm volatile
 800b976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97a:	f383 8811 	msr	BASEPRI, r3
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	60fb      	str	r3, [r7, #12]
}
 800b988:	bf00      	nop
 800b98a:	e7fe      	b.n	800b98a <pvPortMalloc+0x172>
	return pvReturn;
 800b98c:	69fb      	ldr	r3, [r7, #28]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3728      	adds	r7, #40	; 0x28
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	200051cc 	.word	0x200051cc
 800b99c:	200051e0 	.word	0x200051e0
 800b9a0:	200051d0 	.word	0x200051d0
 800b9a4:	200051c4 	.word	0x200051c4
 800b9a8:	200051d4 	.word	0x200051d4
 800b9ac:	200051d8 	.word	0x200051d8

0800b9b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b086      	sub	sp, #24
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d04d      	beq.n	800ba5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b9c2:	2308      	movs	r3, #8
 800b9c4:	425b      	negs	r3, r3
 800b9c6:	697a      	ldr	r2, [r7, #20]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	685a      	ldr	r2, [r3, #4]
 800b9d4:	4b24      	ldr	r3, [pc, #144]	; (800ba68 <vPortFree+0xb8>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4013      	ands	r3, r2
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d10a      	bne.n	800b9f4 <vPortFree+0x44>
	__asm volatile
 800b9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e2:	f383 8811 	msr	BASEPRI, r3
 800b9e6:	f3bf 8f6f 	isb	sy
 800b9ea:	f3bf 8f4f 	dsb	sy
 800b9ee:	60fb      	str	r3, [r7, #12]
}
 800b9f0:	bf00      	nop
 800b9f2:	e7fe      	b.n	800b9f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00a      	beq.n	800ba12 <vPortFree+0x62>
	__asm volatile
 800b9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba00:	f383 8811 	msr	BASEPRI, r3
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	60bb      	str	r3, [r7, #8]
}
 800ba0e:	bf00      	nop
 800ba10:	e7fe      	b.n	800ba10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	685a      	ldr	r2, [r3, #4]
 800ba16:	4b14      	ldr	r3, [pc, #80]	; (800ba68 <vPortFree+0xb8>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4013      	ands	r3, r2
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d01e      	beq.n	800ba5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d11a      	bne.n	800ba5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	685a      	ldr	r2, [r3, #4]
 800ba2c:	4b0e      	ldr	r3, [pc, #56]	; (800ba68 <vPortFree+0xb8>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	43db      	mvns	r3, r3
 800ba32:	401a      	ands	r2, r3
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ba38:	f7fe fc88 	bl	800a34c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	685a      	ldr	r2, [r3, #4]
 800ba40:	4b0a      	ldr	r3, [pc, #40]	; (800ba6c <vPortFree+0xbc>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4413      	add	r3, r2
 800ba46:	4a09      	ldr	r2, [pc, #36]	; (800ba6c <vPortFree+0xbc>)
 800ba48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba4a:	6938      	ldr	r0, [r7, #16]
 800ba4c:	f000 f874 	bl	800bb38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ba50:	4b07      	ldr	r3, [pc, #28]	; (800ba70 <vPortFree+0xc0>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	3301      	adds	r3, #1
 800ba56:	4a06      	ldr	r2, [pc, #24]	; (800ba70 <vPortFree+0xc0>)
 800ba58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ba5a:	f7fe fc85 	bl	800a368 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ba5e:	bf00      	nop
 800ba60:	3718      	adds	r7, #24
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	200051e0 	.word	0x200051e0
 800ba6c:	200051d0 	.word	0x200051d0
 800ba70:	200051dc 	.word	0x200051dc

0800ba74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ba74:	b480      	push	{r7}
 800ba76:	b085      	sub	sp, #20
 800ba78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ba7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba80:	4b27      	ldr	r3, [pc, #156]	; (800bb20 <prvHeapInit+0xac>)
 800ba82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f003 0307 	and.w	r3, r3, #7
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00c      	beq.n	800baa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	3307      	adds	r3, #7
 800ba92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f023 0307 	bic.w	r3, r3, #7
 800ba9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	4a1f      	ldr	r2, [pc, #124]	; (800bb20 <prvHeapInit+0xac>)
 800baa4:	4413      	add	r3, r2
 800baa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800baac:	4a1d      	ldr	r2, [pc, #116]	; (800bb24 <prvHeapInit+0xb0>)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bab2:	4b1c      	ldr	r3, [pc, #112]	; (800bb24 <prvHeapInit+0xb0>)
 800bab4:	2200      	movs	r2, #0
 800bab6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	4413      	add	r3, r2
 800babe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bac0:	2208      	movs	r2, #8
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	1a9b      	subs	r3, r3, r2
 800bac6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f023 0307 	bic.w	r3, r3, #7
 800bace:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	4a15      	ldr	r2, [pc, #84]	; (800bb28 <prvHeapInit+0xb4>)
 800bad4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bad6:	4b14      	ldr	r3, [pc, #80]	; (800bb28 <prvHeapInit+0xb4>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2200      	movs	r2, #0
 800badc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bade:	4b12      	ldr	r3, [pc, #72]	; (800bb28 <prvHeapInit+0xb4>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2200      	movs	r2, #0
 800bae4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	1ad2      	subs	r2, r2, r3
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800baf4:	4b0c      	ldr	r3, [pc, #48]	; (800bb28 <prvHeapInit+0xb4>)
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	4a0a      	ldr	r2, [pc, #40]	; (800bb2c <prvHeapInit+0xb8>)
 800bb02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	4a09      	ldr	r2, [pc, #36]	; (800bb30 <prvHeapInit+0xbc>)
 800bb0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb0c:	4b09      	ldr	r3, [pc, #36]	; (800bb34 <prvHeapInit+0xc0>)
 800bb0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb12:	601a      	str	r2, [r3, #0]
}
 800bb14:	bf00      	nop
 800bb16:	3714      	adds	r7, #20
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr
 800bb20:	200015c4 	.word	0x200015c4
 800bb24:	200051c4 	.word	0x200051c4
 800bb28:	200051cc 	.word	0x200051cc
 800bb2c:	200051d4 	.word	0x200051d4
 800bb30:	200051d0 	.word	0x200051d0
 800bb34:	200051e0 	.word	0x200051e0

0800bb38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bb40:	4b28      	ldr	r3, [pc, #160]	; (800bbe4 <prvInsertBlockIntoFreeList+0xac>)
 800bb42:	60fb      	str	r3, [r7, #12]
 800bb44:	e002      	b.n	800bb4c <prvInsertBlockIntoFreeList+0x14>
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	60fb      	str	r3, [r7, #12]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d8f7      	bhi.n	800bb46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	68ba      	ldr	r2, [r7, #8]
 800bb60:	4413      	add	r3, r2
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d108      	bne.n	800bb7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	685a      	ldr	r2, [r3, #4]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	441a      	add	r2, r3
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	441a      	add	r2, r3
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d118      	bne.n	800bbc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	4b15      	ldr	r3, [pc, #84]	; (800bbe8 <prvInsertBlockIntoFreeList+0xb0>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d00d      	beq.n	800bbb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	685a      	ldr	r2, [r3, #4]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	441a      	add	r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	601a      	str	r2, [r3, #0]
 800bbb4:	e008      	b.n	800bbc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bbb6:	4b0c      	ldr	r3, [pc, #48]	; (800bbe8 <prvInsertBlockIntoFreeList+0xb0>)
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	601a      	str	r2, [r3, #0]
 800bbbe:	e003      	b.n	800bbc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d002      	beq.n	800bbd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbd6:	bf00      	nop
 800bbd8:	3714      	adds	r7, #20
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop
 800bbe4:	200051c4 	.word	0x200051c4
 800bbe8:	200051cc 	.word	0x200051cc

0800bbec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	4912      	ldr	r1, [pc, #72]	; (800bc3c <MX_USB_DEVICE_Init+0x50>)
 800bbf4:	4812      	ldr	r0, [pc, #72]	; (800bc40 <MX_USB_DEVICE_Init+0x54>)
 800bbf6:	f7fb fcb5 	bl	8007564 <USBD_Init>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d001      	beq.n	800bc04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bc00:	f7f4 fed4 	bl	80009ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bc04:	490f      	ldr	r1, [pc, #60]	; (800bc44 <MX_USB_DEVICE_Init+0x58>)
 800bc06:	480e      	ldr	r0, [pc, #56]	; (800bc40 <MX_USB_DEVICE_Init+0x54>)
 800bc08:	f7fb fcdc 	bl	80075c4 <USBD_RegisterClass>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d001      	beq.n	800bc16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bc12:	f7f4 fecb 	bl	80009ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bc16:	490c      	ldr	r1, [pc, #48]	; (800bc48 <MX_USB_DEVICE_Init+0x5c>)
 800bc18:	4809      	ldr	r0, [pc, #36]	; (800bc40 <MX_USB_DEVICE_Init+0x54>)
 800bc1a:	f7fb fc13 	bl	8007444 <USBD_CDC_RegisterInterface>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d001      	beq.n	800bc28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bc24:	f7f4 fec2 	bl	80009ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bc28:	4805      	ldr	r0, [pc, #20]	; (800bc40 <MX_USB_DEVICE_Init+0x54>)
 800bc2a:	f7fb fd01 	bl	8007630 <USBD_Start>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d001      	beq.n	800bc38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bc34:	f7f4 feba 	bl	80009ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bc38:	bf00      	nop
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	200000b0 	.word	0x200000b0
 800bc40:	200051e4 	.word	0x200051e4
 800bc44:	20000018 	.word	0x20000018
 800bc48:	2000009c 	.word	0x2000009c

0800bc4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bc50:	2200      	movs	r2, #0
 800bc52:	4905      	ldr	r1, [pc, #20]	; (800bc68 <CDC_Init_FS+0x1c>)
 800bc54:	4805      	ldr	r0, [pc, #20]	; (800bc6c <CDC_Init_FS+0x20>)
 800bc56:	f7fb fc0f 	bl	8007478 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bc5a:	4905      	ldr	r1, [pc, #20]	; (800bc70 <CDC_Init_FS+0x24>)
 800bc5c:	4803      	ldr	r0, [pc, #12]	; (800bc6c <CDC_Init_FS+0x20>)
 800bc5e:	f7fb fc2d 	bl	80074bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bc62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	200058c0 	.word	0x200058c0
 800bc6c:	200051e4 	.word	0x200051e4
 800bc70:	200054c0 	.word	0x200054c0

0800bc74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bc74:	b480      	push	{r7}
 800bc76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bc78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	6039      	str	r1, [r7, #0]
 800bc8e:	71fb      	strb	r3, [r7, #7]
 800bc90:	4613      	mov	r3, r2
 800bc92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bc94:	79fb      	ldrb	r3, [r7, #7]
 800bc96:	2b23      	cmp	r3, #35	; 0x23
 800bc98:	d84a      	bhi.n	800bd30 <CDC_Control_FS+0xac>
 800bc9a:	a201      	add	r2, pc, #4	; (adr r2, 800bca0 <CDC_Control_FS+0x1c>)
 800bc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca0:	0800bd31 	.word	0x0800bd31
 800bca4:	0800bd31 	.word	0x0800bd31
 800bca8:	0800bd31 	.word	0x0800bd31
 800bcac:	0800bd31 	.word	0x0800bd31
 800bcb0:	0800bd31 	.word	0x0800bd31
 800bcb4:	0800bd31 	.word	0x0800bd31
 800bcb8:	0800bd31 	.word	0x0800bd31
 800bcbc:	0800bd31 	.word	0x0800bd31
 800bcc0:	0800bd31 	.word	0x0800bd31
 800bcc4:	0800bd31 	.word	0x0800bd31
 800bcc8:	0800bd31 	.word	0x0800bd31
 800bccc:	0800bd31 	.word	0x0800bd31
 800bcd0:	0800bd31 	.word	0x0800bd31
 800bcd4:	0800bd31 	.word	0x0800bd31
 800bcd8:	0800bd31 	.word	0x0800bd31
 800bcdc:	0800bd31 	.word	0x0800bd31
 800bce0:	0800bd31 	.word	0x0800bd31
 800bce4:	0800bd31 	.word	0x0800bd31
 800bce8:	0800bd31 	.word	0x0800bd31
 800bcec:	0800bd31 	.word	0x0800bd31
 800bcf0:	0800bd31 	.word	0x0800bd31
 800bcf4:	0800bd31 	.word	0x0800bd31
 800bcf8:	0800bd31 	.word	0x0800bd31
 800bcfc:	0800bd31 	.word	0x0800bd31
 800bd00:	0800bd31 	.word	0x0800bd31
 800bd04:	0800bd31 	.word	0x0800bd31
 800bd08:	0800bd31 	.word	0x0800bd31
 800bd0c:	0800bd31 	.word	0x0800bd31
 800bd10:	0800bd31 	.word	0x0800bd31
 800bd14:	0800bd31 	.word	0x0800bd31
 800bd18:	0800bd31 	.word	0x0800bd31
 800bd1c:	0800bd31 	.word	0x0800bd31
 800bd20:	0800bd31 	.word	0x0800bd31
 800bd24:	0800bd31 	.word	0x0800bd31
 800bd28:	0800bd31 	.word	0x0800bd31
 800bd2c:	0800bd31 	.word	0x0800bd31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bd30:	bf00      	nop
  }

  return (USBD_OK);
 800bd32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	370c      	adds	r7, #12
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr

0800bd40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bd4a:	6879      	ldr	r1, [r7, #4]
 800bd4c:	4805      	ldr	r0, [pc, #20]	; (800bd64 <CDC_Receive_FS+0x24>)
 800bd4e:	f7fb fbb5 	bl	80074bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bd52:	4804      	ldr	r0, [pc, #16]	; (800bd64 <CDC_Receive_FS+0x24>)
 800bd54:	f7fb fbd0 	bl	80074f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bd58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	200051e4 	.word	0x200051e4

0800bd68 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b087      	sub	sp, #28
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	4613      	mov	r3, r2
 800bd74:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bd76:	2300      	movs	r3, #0
 800bd78:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bd7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	371c      	adds	r7, #28
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr
	...

0800bd8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	4603      	mov	r3, r0
 800bd94:	6039      	str	r1, [r7, #0]
 800bd96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	2212      	movs	r2, #18
 800bd9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bd9e:	4b03      	ldr	r3, [pc, #12]	; (800bdac <USBD_FS_DeviceDescriptor+0x20>)
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr
 800bdac:	200000cc 	.word	0x200000cc

0800bdb0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	6039      	str	r1, [r7, #0]
 800bdba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	2204      	movs	r2, #4
 800bdc0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bdc2:	4b03      	ldr	r3, [pc, #12]	; (800bdd0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr
 800bdd0:	200000e0 	.word	0x200000e0

0800bdd4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	4603      	mov	r3, r0
 800bddc:	6039      	str	r1, [r7, #0]
 800bdde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bde0:	79fb      	ldrb	r3, [r7, #7]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d105      	bne.n	800bdf2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bde6:	683a      	ldr	r2, [r7, #0]
 800bde8:	4907      	ldr	r1, [pc, #28]	; (800be08 <USBD_FS_ProductStrDescriptor+0x34>)
 800bdea:	4808      	ldr	r0, [pc, #32]	; (800be0c <USBD_FS_ProductStrDescriptor+0x38>)
 800bdec:	f7fc fdcc 	bl	8008988 <USBD_GetString>
 800bdf0:	e004      	b.n	800bdfc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bdf2:	683a      	ldr	r2, [r7, #0]
 800bdf4:	4904      	ldr	r1, [pc, #16]	; (800be08 <USBD_FS_ProductStrDescriptor+0x34>)
 800bdf6:	4805      	ldr	r0, [pc, #20]	; (800be0c <USBD_FS_ProductStrDescriptor+0x38>)
 800bdf8:	f7fc fdc6 	bl	8008988 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdfc:	4b02      	ldr	r3, [pc, #8]	; (800be08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3708      	adds	r7, #8
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	20005cc0 	.word	0x20005cc0
 800be0c:	0800dc78 	.word	0x0800dc78

0800be10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	4603      	mov	r3, r0
 800be18:	6039      	str	r1, [r7, #0]
 800be1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be1c:	683a      	ldr	r2, [r7, #0]
 800be1e:	4904      	ldr	r1, [pc, #16]	; (800be30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800be20:	4804      	ldr	r0, [pc, #16]	; (800be34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be22:	f7fc fdb1 	bl	8008988 <USBD_GetString>
  return USBD_StrDesc;
 800be26:	4b02      	ldr	r3, [pc, #8]	; (800be30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3708      	adds	r7, #8
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	20005cc0 	.word	0x20005cc0
 800be34:	0800dc90 	.word	0x0800dc90

0800be38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	4603      	mov	r3, r0
 800be40:	6039      	str	r1, [r7, #0]
 800be42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	221a      	movs	r2, #26
 800be48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be4a:	f000 f843 	bl	800bed4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800be4e:	4b02      	ldr	r3, [pc, #8]	; (800be58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800be50:	4618      	mov	r0, r3
 800be52:	3708      	adds	r7, #8
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	200000e4 	.word	0x200000e4

0800be5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b082      	sub	sp, #8
 800be60:	af00      	add	r7, sp, #0
 800be62:	4603      	mov	r3, r0
 800be64:	6039      	str	r1, [r7, #0]
 800be66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be68:	79fb      	ldrb	r3, [r7, #7]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d105      	bne.n	800be7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be6e:	683a      	ldr	r2, [r7, #0]
 800be70:	4907      	ldr	r1, [pc, #28]	; (800be90 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be72:	4808      	ldr	r0, [pc, #32]	; (800be94 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be74:	f7fc fd88 	bl	8008988 <USBD_GetString>
 800be78:	e004      	b.n	800be84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	4904      	ldr	r1, [pc, #16]	; (800be90 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be7e:	4805      	ldr	r0, [pc, #20]	; (800be94 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be80:	f7fc fd82 	bl	8008988 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be84:	4b02      	ldr	r3, [pc, #8]	; (800be90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800be86:	4618      	mov	r0, r3
 800be88:	3708      	adds	r7, #8
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	20005cc0 	.word	0x20005cc0
 800be94:	0800dca4 	.word	0x0800dca4

0800be98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	4603      	mov	r3, r0
 800bea0:	6039      	str	r1, [r7, #0]
 800bea2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bea4:	79fb      	ldrb	r3, [r7, #7]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d105      	bne.n	800beb6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	4907      	ldr	r1, [pc, #28]	; (800becc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800beae:	4808      	ldr	r0, [pc, #32]	; (800bed0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800beb0:	f7fc fd6a 	bl	8008988 <USBD_GetString>
 800beb4:	e004      	b.n	800bec0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800beb6:	683a      	ldr	r2, [r7, #0]
 800beb8:	4904      	ldr	r1, [pc, #16]	; (800becc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800beba:	4805      	ldr	r0, [pc, #20]	; (800bed0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bebc:	f7fc fd64 	bl	8008988 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bec0:	4b02      	ldr	r3, [pc, #8]	; (800becc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3708      	adds	r7, #8
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	20005cc0 	.word	0x20005cc0
 800bed0:	0800dcb0 	.word	0x0800dcb0

0800bed4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800beda:	4b0f      	ldr	r3, [pc, #60]	; (800bf18 <Get_SerialNum+0x44>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bee0:	4b0e      	ldr	r3, [pc, #56]	; (800bf1c <Get_SerialNum+0x48>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bee6:	4b0e      	ldr	r3, [pc, #56]	; (800bf20 <Get_SerialNum+0x4c>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	4413      	add	r3, r2
 800bef2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d009      	beq.n	800bf0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800befa:	2208      	movs	r2, #8
 800befc:	4909      	ldr	r1, [pc, #36]	; (800bf24 <Get_SerialNum+0x50>)
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f000 f814 	bl	800bf2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf04:	2204      	movs	r2, #4
 800bf06:	4908      	ldr	r1, [pc, #32]	; (800bf28 <Get_SerialNum+0x54>)
 800bf08:	68b8      	ldr	r0, [r7, #8]
 800bf0a:	f000 f80f 	bl	800bf2c <IntToUnicode>
  }
}
 800bf0e:	bf00      	nop
 800bf10:	3710      	adds	r7, #16
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	1fff7a10 	.word	0x1fff7a10
 800bf1c:	1fff7a14 	.word	0x1fff7a14
 800bf20:	1fff7a18 	.word	0x1fff7a18
 800bf24:	200000e6 	.word	0x200000e6
 800bf28:	200000f6 	.word	0x200000f6

0800bf2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b087      	sub	sp, #28
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	4613      	mov	r3, r2
 800bf38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bf3e:	2300      	movs	r3, #0
 800bf40:	75fb      	strb	r3, [r7, #23]
 800bf42:	e027      	b.n	800bf94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	0f1b      	lsrs	r3, r3, #28
 800bf48:	2b09      	cmp	r3, #9
 800bf4a:	d80b      	bhi.n	800bf64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	0f1b      	lsrs	r3, r3, #28
 800bf50:	b2da      	uxtb	r2, r3
 800bf52:	7dfb      	ldrb	r3, [r7, #23]
 800bf54:	005b      	lsls	r3, r3, #1
 800bf56:	4619      	mov	r1, r3
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	440b      	add	r3, r1
 800bf5c:	3230      	adds	r2, #48	; 0x30
 800bf5e:	b2d2      	uxtb	r2, r2
 800bf60:	701a      	strb	r2, [r3, #0]
 800bf62:	e00a      	b.n	800bf7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	0f1b      	lsrs	r3, r3, #28
 800bf68:	b2da      	uxtb	r2, r3
 800bf6a:	7dfb      	ldrb	r3, [r7, #23]
 800bf6c:	005b      	lsls	r3, r3, #1
 800bf6e:	4619      	mov	r1, r3
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	440b      	add	r3, r1
 800bf74:	3237      	adds	r2, #55	; 0x37
 800bf76:	b2d2      	uxtb	r2, r2
 800bf78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	011b      	lsls	r3, r3, #4
 800bf7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf80:	7dfb      	ldrb	r3, [r7, #23]
 800bf82:	005b      	lsls	r3, r3, #1
 800bf84:	3301      	adds	r3, #1
 800bf86:	68ba      	ldr	r2, [r7, #8]
 800bf88:	4413      	add	r3, r2
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf8e:	7dfb      	ldrb	r3, [r7, #23]
 800bf90:	3301      	adds	r3, #1
 800bf92:	75fb      	strb	r3, [r7, #23]
 800bf94:	7dfa      	ldrb	r2, [r7, #23]
 800bf96:	79fb      	ldrb	r3, [r7, #7]
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d3d3      	bcc.n	800bf44 <IntToUnicode+0x18>
  }
}
 800bf9c:	bf00      	nop
 800bf9e:	bf00      	nop
 800bfa0:	371c      	adds	r7, #28
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr
	...

0800bfac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b08a      	sub	sp, #40	; 0x28
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfb4:	f107 0314 	add.w	r3, r7, #20
 800bfb8:	2200      	movs	r2, #0
 800bfba:	601a      	str	r2, [r3, #0]
 800bfbc:	605a      	str	r2, [r3, #4]
 800bfbe:	609a      	str	r2, [r3, #8]
 800bfc0:	60da      	str	r2, [r3, #12]
 800bfc2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bfcc:	d13a      	bne.n	800c044 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bfce:	2300      	movs	r3, #0
 800bfd0:	613b      	str	r3, [r7, #16]
 800bfd2:	4b1e      	ldr	r3, [pc, #120]	; (800c04c <HAL_PCD_MspInit+0xa0>)
 800bfd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfd6:	4a1d      	ldr	r2, [pc, #116]	; (800c04c <HAL_PCD_MspInit+0xa0>)
 800bfd8:	f043 0301 	orr.w	r3, r3, #1
 800bfdc:	6313      	str	r3, [r2, #48]	; 0x30
 800bfde:	4b1b      	ldr	r3, [pc, #108]	; (800c04c <HAL_PCD_MspInit+0xa0>)
 800bfe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe2:	f003 0301 	and.w	r3, r3, #1
 800bfe6:	613b      	str	r3, [r7, #16]
 800bfe8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bfea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bfee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bff0:	2302      	movs	r3, #2
 800bff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bff4:	2300      	movs	r3, #0
 800bff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bff8:	2303      	movs	r3, #3
 800bffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bffc:	230a      	movs	r3, #10
 800bffe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c000:	f107 0314 	add.w	r3, r7, #20
 800c004:	4619      	mov	r1, r3
 800c006:	4812      	ldr	r0, [pc, #72]	; (800c050 <HAL_PCD_MspInit+0xa4>)
 800c008:	f7f5 fd4e 	bl	8001aa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c00c:	4b0f      	ldr	r3, [pc, #60]	; (800c04c <HAL_PCD_MspInit+0xa0>)
 800c00e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c010:	4a0e      	ldr	r2, [pc, #56]	; (800c04c <HAL_PCD_MspInit+0xa0>)
 800c012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c016:	6353      	str	r3, [r2, #52]	; 0x34
 800c018:	2300      	movs	r3, #0
 800c01a:	60fb      	str	r3, [r7, #12]
 800c01c:	4b0b      	ldr	r3, [pc, #44]	; (800c04c <HAL_PCD_MspInit+0xa0>)
 800c01e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c020:	4a0a      	ldr	r2, [pc, #40]	; (800c04c <HAL_PCD_MspInit+0xa0>)
 800c022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c026:	6453      	str	r3, [r2, #68]	; 0x44
 800c028:	4b08      	ldr	r3, [pc, #32]	; (800c04c <HAL_PCD_MspInit+0xa0>)
 800c02a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c02c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c030:	60fb      	str	r3, [r7, #12]
 800c032:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c034:	2200      	movs	r2, #0
 800c036:	2105      	movs	r1, #5
 800c038:	2043      	movs	r0, #67	; 0x43
 800c03a:	f7f5 fcc7 	bl	80019cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c03e:	2043      	movs	r0, #67	; 0x43
 800c040:	f7f5 fcf0 	bl	8001a24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c044:	bf00      	nop
 800c046:	3728      	adds	r7, #40	; 0x28
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	40023800 	.word	0x40023800
 800c050:	40020000 	.word	0x40020000

0800c054 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c068:	4619      	mov	r1, r3
 800c06a:	4610      	mov	r0, r2
 800c06c:	f7fb fb2d 	bl	80076ca <USBD_LL_SetupStage>
}
 800c070:	bf00      	nop
 800c072:	3708      	adds	r7, #8
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c08a:	78fa      	ldrb	r2, [r7, #3]
 800c08c:	6879      	ldr	r1, [r7, #4]
 800c08e:	4613      	mov	r3, r2
 800c090:	00db      	lsls	r3, r3, #3
 800c092:	4413      	add	r3, r2
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	440b      	add	r3, r1
 800c098:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	78fb      	ldrb	r3, [r7, #3]
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	f7fb fb67 	bl	8007774 <USBD_LL_DataOutStage>
}
 800c0a6:	bf00      	nop
 800c0a8:	3708      	adds	r7, #8
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b082      	sub	sp, #8
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c0c0:	78fa      	ldrb	r2, [r7, #3]
 800c0c2:	6879      	ldr	r1, [r7, #4]
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	00db      	lsls	r3, r3, #3
 800c0c8:	4413      	add	r3, r2
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	440b      	add	r3, r1
 800c0ce:	334c      	adds	r3, #76	; 0x4c
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	78fb      	ldrb	r3, [r7, #3]
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	f7fb fc00 	bl	80078da <USBD_LL_DataInStage>
}
 800c0da:	bf00      	nop
 800c0dc:	3708      	adds	r7, #8
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b082      	sub	sp, #8
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7fb fd34 	bl	8007b5e <USBD_LL_SOF>
}
 800c0f6:	bf00      	nop
 800c0f8:	3708      	adds	r7, #8
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}

0800c0fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b084      	sub	sp, #16
 800c102:	af00      	add	r7, sp, #0
 800c104:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c106:	2301      	movs	r3, #1
 800c108:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	68db      	ldr	r3, [r3, #12]
 800c10e:	2b02      	cmp	r3, #2
 800c110:	d001      	beq.n	800c116 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c112:	f7f4 fc4b 	bl	80009ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c11c:	7bfa      	ldrb	r2, [r7, #15]
 800c11e:	4611      	mov	r1, r2
 800c120:	4618      	mov	r0, r3
 800c122:	f7fb fcde 	bl	8007ae2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7fb fc86 	bl	8007a3e <USBD_LL_Reset>
}
 800c132:	bf00      	nop
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
	...

0800c13c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7fb fcd9 	bl	8007b02 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	6812      	ldr	r2, [r2, #0]
 800c15e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c162:	f043 0301 	orr.w	r3, r3, #1
 800c166:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6a1b      	ldr	r3, [r3, #32]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d005      	beq.n	800c17c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c170:	4b04      	ldr	r3, [pc, #16]	; (800c184 <HAL_PCD_SuspendCallback+0x48>)
 800c172:	691b      	ldr	r3, [r3, #16]
 800c174:	4a03      	ldr	r2, [pc, #12]	; (800c184 <HAL_PCD_SuspendCallback+0x48>)
 800c176:	f043 0306 	orr.w	r3, r3, #6
 800c17a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c17c:	bf00      	nop
 800c17e:	3708      	adds	r7, #8
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}
 800c184:	e000ed00 	.word	0xe000ed00

0800c188 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c196:	4618      	mov	r0, r3
 800c198:	f7fb fcc9 	bl	8007b2e <USBD_LL_Resume>
}
 800c19c:	bf00      	nop
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1b6:	78fa      	ldrb	r2, [r7, #3]
 800c1b8:	4611      	mov	r1, r2
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fb fd21 	bl	8007c02 <USBD_LL_IsoOUTIncomplete>
}
 800c1c0:	bf00      	nop
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1da:	78fa      	ldrb	r2, [r7, #3]
 800c1dc:	4611      	mov	r1, r2
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7fb fcdd 	bl	8007b9e <USBD_LL_IsoINIncomplete>
}
 800c1e4:	bf00      	nop
 800c1e6:	3708      	adds	r7, #8
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7fb fd33 	bl	8007c66 <USBD_LL_DevConnected>
}
 800c200:	bf00      	nop
 800c202:	3708      	adds	r7, #8
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c216:	4618      	mov	r0, r3
 800c218:	f7fb fd30 	bl	8007c7c <USBD_LL_DevDisconnected>
}
 800c21c:	bf00      	nop
 800c21e:	3708      	adds	r7, #8
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d13c      	bne.n	800c2ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c234:	4a20      	ldr	r2, [pc, #128]	; (800c2b8 <USBD_LL_Init+0x94>)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4a1e      	ldr	r2, [pc, #120]	; (800c2b8 <USBD_LL_Init+0x94>)
 800c240:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c244:	4b1c      	ldr	r3, [pc, #112]	; (800c2b8 <USBD_LL_Init+0x94>)
 800c246:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c24a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c24c:	4b1a      	ldr	r3, [pc, #104]	; (800c2b8 <USBD_LL_Init+0x94>)
 800c24e:	2204      	movs	r2, #4
 800c250:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c252:	4b19      	ldr	r3, [pc, #100]	; (800c2b8 <USBD_LL_Init+0x94>)
 800c254:	2202      	movs	r2, #2
 800c256:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c258:	4b17      	ldr	r3, [pc, #92]	; (800c2b8 <USBD_LL_Init+0x94>)
 800c25a:	2200      	movs	r2, #0
 800c25c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c25e:	4b16      	ldr	r3, [pc, #88]	; (800c2b8 <USBD_LL_Init+0x94>)
 800c260:	2202      	movs	r2, #2
 800c262:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c264:	4b14      	ldr	r3, [pc, #80]	; (800c2b8 <USBD_LL_Init+0x94>)
 800c266:	2200      	movs	r2, #0
 800c268:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c26a:	4b13      	ldr	r3, [pc, #76]	; (800c2b8 <USBD_LL_Init+0x94>)
 800c26c:	2200      	movs	r2, #0
 800c26e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c270:	4b11      	ldr	r3, [pc, #68]	; (800c2b8 <USBD_LL_Init+0x94>)
 800c272:	2200      	movs	r2, #0
 800c274:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c276:	4b10      	ldr	r3, [pc, #64]	; (800c2b8 <USBD_LL_Init+0x94>)
 800c278:	2200      	movs	r2, #0
 800c27a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c27c:	4b0e      	ldr	r3, [pc, #56]	; (800c2b8 <USBD_LL_Init+0x94>)
 800c27e:	2200      	movs	r2, #0
 800c280:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c282:	480d      	ldr	r0, [pc, #52]	; (800c2b8 <USBD_LL_Init+0x94>)
 800c284:	f7f5 ff24 	bl	80020d0 <HAL_PCD_Init>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d001      	beq.n	800c292 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c28e:	f7f4 fb8d 	bl	80009ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c292:	2180      	movs	r1, #128	; 0x80
 800c294:	4808      	ldr	r0, [pc, #32]	; (800c2b8 <USBD_LL_Init+0x94>)
 800c296:	f7f7 f986 	bl	80035a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c29a:	2240      	movs	r2, #64	; 0x40
 800c29c:	2100      	movs	r1, #0
 800c29e:	4806      	ldr	r0, [pc, #24]	; (800c2b8 <USBD_LL_Init+0x94>)
 800c2a0:	f7f7 f93a 	bl	8003518 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c2a4:	2280      	movs	r2, #128	; 0x80
 800c2a6:	2101      	movs	r1, #1
 800c2a8:	4803      	ldr	r0, [pc, #12]	; (800c2b8 <USBD_LL_Init+0x94>)
 800c2aa:	f7f7 f935 	bl	8003518 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c2ae:	2300      	movs	r3, #0
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3708      	adds	r7, #8
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	20005ec0 	.word	0x20005ec0

0800c2bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7f6 f824 	bl	8002320 <HAL_PCD_Start>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2dc:	7bfb      	ldrb	r3, [r7, #15]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f000 f942 	bl	800c568 <USBD_Get_USB_Status>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b084      	sub	sp, #16
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
 800c2fa:	4608      	mov	r0, r1
 800c2fc:	4611      	mov	r1, r2
 800c2fe:	461a      	mov	r2, r3
 800c300:	4603      	mov	r3, r0
 800c302:	70fb      	strb	r3, [r7, #3]
 800c304:	460b      	mov	r3, r1
 800c306:	70bb      	strb	r3, [r7, #2]
 800c308:	4613      	mov	r3, r2
 800c30a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c30c:	2300      	movs	r3, #0
 800c30e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c310:	2300      	movs	r3, #0
 800c312:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c31a:	78bb      	ldrb	r3, [r7, #2]
 800c31c:	883a      	ldrh	r2, [r7, #0]
 800c31e:	78f9      	ldrb	r1, [r7, #3]
 800c320:	f7f6 fcf5 	bl	8002d0e <HAL_PCD_EP_Open>
 800c324:	4603      	mov	r3, r0
 800c326:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c328:	7bfb      	ldrb	r3, [r7, #15]
 800c32a:	4618      	mov	r0, r3
 800c32c:	f000 f91c 	bl	800c568 <USBD_Get_USB_Status>
 800c330:	4603      	mov	r3, r0
 800c332:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c334:	7bbb      	ldrb	r3, [r7, #14]
}
 800c336:	4618      	mov	r0, r3
 800c338:	3710      	adds	r7, #16
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c33e:	b580      	push	{r7, lr}
 800c340:	b084      	sub	sp, #16
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
 800c346:	460b      	mov	r3, r1
 800c348:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c34a:	2300      	movs	r3, #0
 800c34c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c34e:	2300      	movs	r3, #0
 800c350:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c358:	78fa      	ldrb	r2, [r7, #3]
 800c35a:	4611      	mov	r1, r2
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7f6 fd3e 	bl	8002dde <HAL_PCD_EP_Close>
 800c362:	4603      	mov	r3, r0
 800c364:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c366:	7bfb      	ldrb	r3, [r7, #15]
 800c368:	4618      	mov	r0, r3
 800c36a:	f000 f8fd 	bl	800c568 <USBD_Get_USB_Status>
 800c36e:	4603      	mov	r3, r0
 800c370:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c372:	7bbb      	ldrb	r3, [r7, #14]
}
 800c374:	4618      	mov	r0, r3
 800c376:	3710      	adds	r7, #16
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	460b      	mov	r3, r1
 800c386:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c388:	2300      	movs	r3, #0
 800c38a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c38c:	2300      	movs	r3, #0
 800c38e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c396:	78fa      	ldrb	r2, [r7, #3]
 800c398:	4611      	mov	r1, r2
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7f6 fe16 	bl	8002fcc <HAL_PCD_EP_SetStall>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3a4:	7bfb      	ldrb	r3, [r7, #15]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f000 f8de 	bl	800c568 <USBD_Get_USB_Status>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b084      	sub	sp, #16
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3d4:	78fa      	ldrb	r2, [r7, #3]
 800c3d6:	4611      	mov	r1, r2
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7f6 fe5b 	bl	8003094 <HAL_PCD_EP_ClrStall>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3e2:	7bfb      	ldrb	r3, [r7, #15]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f000 f8bf 	bl	800c568 <USBD_Get_USB_Status>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3710      	adds	r7, #16
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b085      	sub	sp, #20
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	460b      	mov	r3, r1
 800c402:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c40a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c40c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c410:	2b00      	cmp	r3, #0
 800c412:	da0b      	bge.n	800c42c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c414:	78fb      	ldrb	r3, [r7, #3]
 800c416:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c41a:	68f9      	ldr	r1, [r7, #12]
 800c41c:	4613      	mov	r3, r2
 800c41e:	00db      	lsls	r3, r3, #3
 800c420:	4413      	add	r3, r2
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	440b      	add	r3, r1
 800c426:	333e      	adds	r3, #62	; 0x3e
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	e00b      	b.n	800c444 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c42c:	78fb      	ldrb	r3, [r7, #3]
 800c42e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c432:	68f9      	ldr	r1, [r7, #12]
 800c434:	4613      	mov	r3, r2
 800c436:	00db      	lsls	r3, r3, #3
 800c438:	4413      	add	r3, r2
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	440b      	add	r3, r1
 800c43e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c442:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c444:	4618      	mov	r0, r3
 800c446:	3714      	adds	r7, #20
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	460b      	mov	r3, r1
 800c45a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c45c:	2300      	movs	r3, #0
 800c45e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c460:	2300      	movs	r3, #0
 800c462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c46a:	78fa      	ldrb	r2, [r7, #3]
 800c46c:	4611      	mov	r1, r2
 800c46e:	4618      	mov	r0, r3
 800c470:	f7f6 fc28 	bl	8002cc4 <HAL_PCD_SetAddress>
 800c474:	4603      	mov	r3, r0
 800c476:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c478:	7bfb      	ldrb	r3, [r7, #15]
 800c47a:	4618      	mov	r0, r3
 800c47c:	f000 f874 	bl	800c568 <USBD_Get_USB_Status>
 800c480:	4603      	mov	r3, r0
 800c482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c484:	7bbb      	ldrb	r3, [r7, #14]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b086      	sub	sp, #24
 800c492:	af00      	add	r7, sp, #0
 800c494:	60f8      	str	r0, [r7, #12]
 800c496:	607a      	str	r2, [r7, #4]
 800c498:	603b      	str	r3, [r7, #0]
 800c49a:	460b      	mov	r3, r1
 800c49c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c4ac:	7af9      	ldrb	r1, [r7, #11]
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	f7f6 fd41 	bl	8002f38 <HAL_PCD_EP_Transmit>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4ba:	7dfb      	ldrb	r3, [r7, #23]
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f000 f853 	bl	800c568 <USBD_Get_USB_Status>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4c6:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3718      	adds	r7, #24
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b086      	sub	sp, #24
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	60f8      	str	r0, [r7, #12]
 800c4d8:	607a      	str	r2, [r7, #4]
 800c4da:	603b      	str	r3, [r7, #0]
 800c4dc:	460b      	mov	r3, r1
 800c4de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c4ee:	7af9      	ldrb	r1, [r7, #11]
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	f7f6 fcbd 	bl	8002e72 <HAL_PCD_EP_Receive>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4fc:	7dfb      	ldrb	r3, [r7, #23]
 800c4fe:	4618      	mov	r0, r3
 800c500:	f000 f832 	bl	800c568 <USBD_Get_USB_Status>
 800c504:	4603      	mov	r3, r0
 800c506:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c508:	7dbb      	ldrb	r3, [r7, #22]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3718      	adds	r7, #24
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}

0800c512 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c512:	b580      	push	{r7, lr}
 800c514:	b082      	sub	sp, #8
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
 800c51a:	460b      	mov	r3, r1
 800c51c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c524:	78fa      	ldrb	r2, [r7, #3]
 800c526:	4611      	mov	r1, r2
 800c528:	4618      	mov	r0, r3
 800c52a:	f7f6 fced 	bl	8002f08 <HAL_PCD_EP_GetRxCount>
 800c52e:	4603      	mov	r3, r0
}
 800c530:	4618      	mov	r0, r3
 800c532:	3708      	adds	r7, #8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c538:	b480      	push	{r7}
 800c53a:	b083      	sub	sp, #12
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c540:	4b03      	ldr	r3, [pc, #12]	; (800c550 <USBD_static_malloc+0x18>)
}
 800c542:	4618      	mov	r0, r3
 800c544:	370c      	adds	r7, #12
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	200063cc 	.word	0x200063cc

0800c554 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c554:	b480      	push	{r7}
 800c556:	b083      	sub	sp, #12
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]

}
 800c55c:	bf00      	nop
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	4603      	mov	r3, r0
 800c570:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c572:	2300      	movs	r3, #0
 800c574:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c576:	79fb      	ldrb	r3, [r7, #7]
 800c578:	2b03      	cmp	r3, #3
 800c57a:	d817      	bhi.n	800c5ac <USBD_Get_USB_Status+0x44>
 800c57c:	a201      	add	r2, pc, #4	; (adr r2, 800c584 <USBD_Get_USB_Status+0x1c>)
 800c57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c582:	bf00      	nop
 800c584:	0800c595 	.word	0x0800c595
 800c588:	0800c59b 	.word	0x0800c59b
 800c58c:	0800c5a1 	.word	0x0800c5a1
 800c590:	0800c5a7 	.word	0x0800c5a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c594:	2300      	movs	r3, #0
 800c596:	73fb      	strb	r3, [r7, #15]
    break;
 800c598:	e00b      	b.n	800c5b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c59a:	2303      	movs	r3, #3
 800c59c:	73fb      	strb	r3, [r7, #15]
    break;
 800c59e:	e008      	b.n	800c5b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c5a4:	e005      	b.n	800c5b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5a6:	2303      	movs	r3, #3
 800c5a8:	73fb      	strb	r3, [r7, #15]
    break;
 800c5aa:	e002      	b.n	800c5b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c5ac:	2303      	movs	r3, #3
 800c5ae:	73fb      	strb	r3, [r7, #15]
    break;
 800c5b0:	bf00      	nop
  }
  return usb_status;
 800c5b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3714      	adds	r7, #20
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr

0800c5c0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800c5c6:	4b26      	ldr	r3, [pc, #152]	; (800c660 <_DoInit+0xa0>)
 800c5c8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800c5ca:	22a8      	movs	r2, #168	; 0xa8
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	6838      	ldr	r0, [r7, #0]
 800c5d0:	f000 fc0c 	bl	800cdec <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	2203      	movs	r2, #3
 800c5d8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	2203      	movs	r2, #3
 800c5de:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	4a20      	ldr	r2, [pc, #128]	; (800c664 <_DoInit+0xa4>)
 800c5e4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	4a1f      	ldr	r2, [pc, #124]	; (800c668 <_DoInit+0xa8>)
 800c5ea:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c5f2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	2200      	movs	r2, #0
 800c604:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	4a16      	ldr	r2, [pc, #88]	; (800c664 <_DoInit+0xa4>)
 800c60a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	4a17      	ldr	r2, [pc, #92]	; (800c66c <_DoInit+0xac>)
 800c610:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	2210      	movs	r2, #16
 800c616:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	2200      	movs	r2, #0
 800c61c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	2200      	movs	r2, #0
 800c622:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	2200      	movs	r2, #0
 800c628:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800c62a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800c62e:	2300      	movs	r3, #0
 800c630:	607b      	str	r3, [r7, #4]
 800c632:	e00c      	b.n	800c64e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f1c3 030f 	rsb	r3, r3, #15
 800c63a:	4a0d      	ldr	r2, [pc, #52]	; (800c670 <_DoInit+0xb0>)
 800c63c:	5cd1      	ldrb	r1, [r2, r3]
 800c63e:	683a      	ldr	r2, [r7, #0]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	4413      	add	r3, r2
 800c644:	460a      	mov	r2, r1
 800c646:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	3301      	adds	r3, #1
 800c64c:	607b      	str	r3, [r7, #4]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2b0f      	cmp	r3, #15
 800c652:	d9ef      	bls.n	800c634 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800c654:	f3bf 8f5f 	dmb	sy
}
 800c658:	bf00      	nop
 800c65a:	3708      	adds	r7, #8
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	200065ec 	.word	0x200065ec
 800c664:	0800dcc0 	.word	0x0800dcc0
 800c668:	20006694 	.word	0x20006694
 800c66c:	20006a94 	.word	0x20006a94
 800c670:	0800dd80 	.word	0x0800dd80

0800c674 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800c674:	b580      	push	{r7, lr}
 800c676:	b08a      	sub	sp, #40	; 0x28
 800c678:	af00      	add	r7, sp, #0
 800c67a:	60f8      	str	r0, [r7, #12]
 800c67c:	60b9      	str	r1, [r7, #8]
 800c67e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800c680:	2300      	movs	r3, #0
 800c682:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	691b      	ldr	r3, [r3, #16]
 800c68e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800c690:	69ba      	ldr	r2, [r7, #24]
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	429a      	cmp	r2, r3
 800c696:	d905      	bls.n	800c6a4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800c698:	69ba      	ldr	r2, [r7, #24]
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	1ad3      	subs	r3, r2, r3
 800c69e:	3b01      	subs	r3, #1
 800c6a0:	627b      	str	r3, [r7, #36]	; 0x24
 800c6a2:	e007      	b.n	800c6b4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	689a      	ldr	r2, [r3, #8]
 800c6a8:	69b9      	ldr	r1, [r7, #24]
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	1acb      	subs	r3, r1, r3
 800c6ae:	4413      	add	r3, r2
 800c6b0:	3b01      	subs	r3, #1
 800c6b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	689a      	ldr	r2, [r3, #8]
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	1ad3      	subs	r3, r2, r3
 800c6bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	bf28      	it	cs
 800c6c2:	4613      	movcs	r3, r2
 800c6c4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800c6c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	bf28      	it	cs
 800c6ce:	4613      	movcs	r3, r2
 800c6d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	685a      	ldr	r2, [r3, #4]
 800c6d6:	69fb      	ldr	r3, [r7, #28]
 800c6d8:	4413      	add	r3, r2
 800c6da:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800c6dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6de:	68b9      	ldr	r1, [r7, #8]
 800c6e0:	6978      	ldr	r0, [r7, #20]
 800c6e2:	f000 fc53 	bl	800cf8c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800c6e6:	6a3a      	ldr	r2, [r7, #32]
 800c6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ea:	4413      	add	r3, r2
 800c6ec:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800c6ee:	68ba      	ldr	r2, [r7, #8]
 800c6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f2:	4413      	add	r3, r2
 800c6f4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fa:	1ad3      	subs	r3, r2, r3
 800c6fc:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800c6fe:	69fa      	ldr	r2, [r7, #28]
 800c700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c702:	4413      	add	r3, r2
 800c704:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	69fa      	ldr	r2, [r7, #28]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d101      	bne.n	800c714 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800c710:	2300      	movs	r3, #0
 800c712:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c714:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	69fa      	ldr	r2, [r7, #28]
 800c71c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d1b2      	bne.n	800c68a <_WriteBlocking+0x16>
  return NumBytesWritten;
 800c724:	6a3b      	ldr	r3, [r7, #32]
}
 800c726:	4618      	mov	r0, r3
 800c728:	3728      	adds	r7, #40	; 0x28
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}

0800c72e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800c72e:	b580      	push	{r7, lr}
 800c730:	b088      	sub	sp, #32
 800c732:	af00      	add	r7, sp, #0
 800c734:	60f8      	str	r0, [r7, #12]
 800c736:	60b9      	str	r1, [r7, #8]
 800c738:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	689a      	ldr	r2, [r3, #8]
 800c744:	69fb      	ldr	r3, [r7, #28]
 800c746:	1ad3      	subs	r3, r2, r3
 800c748:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800c74a:	69ba      	ldr	r2, [r7, #24]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d911      	bls.n	800c776 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	685a      	ldr	r2, [r3, #4]
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	4413      	add	r3, r2
 800c75a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	68b9      	ldr	r1, [r7, #8]
 800c760:	6938      	ldr	r0, [r7, #16]
 800c762:	f000 fc13 	bl	800cf8c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c766:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800c76a:	69fa      	ldr	r2, [r7, #28]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	441a      	add	r2, r3
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800c774:	e01f      	b.n	800c7b6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800c776:	69bb      	ldr	r3, [r7, #24]
 800c778:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	685a      	ldr	r2, [r3, #4]
 800c77e:	69fb      	ldr	r3, [r7, #28]
 800c780:	4413      	add	r3, r2
 800c782:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800c784:	697a      	ldr	r2, [r7, #20]
 800c786:	68b9      	ldr	r1, [r7, #8]
 800c788:	6938      	ldr	r0, [r7, #16]
 800c78a:	f000 fbff 	bl	800cf8c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	1ad3      	subs	r3, r2, r3
 800c794:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800c79c:	68ba      	ldr	r2, [r7, #8]
 800c79e:	69bb      	ldr	r3, [r7, #24]
 800c7a0:	4413      	add	r3, r2
 800c7a2:	697a      	ldr	r2, [r7, #20]
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	6938      	ldr	r0, [r7, #16]
 800c7a8:	f000 fbf0 	bl	800cf8c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c7ac:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	697a      	ldr	r2, [r7, #20]
 800c7b4:	60da      	str	r2, [r3, #12]
}
 800c7b6:	bf00      	nop
 800c7b8:	3720      	adds	r7, #32
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}

0800c7be <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800c7be:	b480      	push	{r7}
 800c7c0:	b087      	sub	sp, #28
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	691b      	ldr	r3, [r3, #16]
 800c7ca:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	68db      	ldr	r3, [r3, #12]
 800c7d0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800c7d2:	693a      	ldr	r2, [r7, #16]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d808      	bhi.n	800c7ec <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	689a      	ldr	r2, [r3, #8]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	1ad2      	subs	r2, r2, r3
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	3b01      	subs	r3, #1
 800c7e8:	617b      	str	r3, [r7, #20]
 800c7ea:	e004      	b.n	800c7f6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800c7ec:	693a      	ldr	r2, [r7, #16]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	1ad3      	subs	r3, r2, r3
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	617b      	str	r3, [r7, #20]
  }
  return r;
 800c7f6:	697b      	ldr	r3, [r7, #20]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	371c      	adds	r7, #28
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800c804:	b580      	push	{r7, lr}
 800c806:	b088      	sub	sp, #32
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	1c5a      	adds	r2, r3, #1
 800c818:	4613      	mov	r3, r2
 800c81a:	005b      	lsls	r3, r3, #1
 800c81c:	4413      	add	r3, r2
 800c81e:	00db      	lsls	r3, r3, #3
 800c820:	4a1f      	ldr	r2, [pc, #124]	; (800c8a0 <SEGGER_RTT_WriteNoLock+0x9c>)
 800c822:	4413      	add	r3, r2
 800c824:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	695b      	ldr	r3, [r3, #20]
 800c82a:	2b02      	cmp	r3, #2
 800c82c:	d029      	beq.n	800c882 <SEGGER_RTT_WriteNoLock+0x7e>
 800c82e:	2b02      	cmp	r3, #2
 800c830:	d82e      	bhi.n	800c890 <SEGGER_RTT_WriteNoLock+0x8c>
 800c832:	2b00      	cmp	r3, #0
 800c834:	d002      	beq.n	800c83c <SEGGER_RTT_WriteNoLock+0x38>
 800c836:	2b01      	cmp	r3, #1
 800c838:	d013      	beq.n	800c862 <SEGGER_RTT_WriteNoLock+0x5e>
 800c83a:	e029      	b.n	800c890 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800c83c:	6978      	ldr	r0, [r7, #20]
 800c83e:	f7ff ffbe 	bl	800c7be <_GetAvailWriteSpace>
 800c842:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800c844:	693a      	ldr	r2, [r7, #16]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d202      	bcs.n	800c852 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800c84c:	2300      	movs	r3, #0
 800c84e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800c850:	e021      	b.n	800c896 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	69b9      	ldr	r1, [r7, #24]
 800c85a:	6978      	ldr	r0, [r7, #20]
 800c85c:	f7ff ff67 	bl	800c72e <_WriteNoCheck>
    break;
 800c860:	e019      	b.n	800c896 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800c862:	6978      	ldr	r0, [r7, #20]
 800c864:	f7ff ffab 	bl	800c7be <_GetAvailWriteSpace>
 800c868:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	4293      	cmp	r3, r2
 800c870:	bf28      	it	cs
 800c872:	4613      	movcs	r3, r2
 800c874:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800c876:	69fa      	ldr	r2, [r7, #28]
 800c878:	69b9      	ldr	r1, [r7, #24]
 800c87a:	6978      	ldr	r0, [r7, #20]
 800c87c:	f7ff ff57 	bl	800c72e <_WriteNoCheck>
    break;
 800c880:	e009      	b.n	800c896 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	69b9      	ldr	r1, [r7, #24]
 800c886:	6978      	ldr	r0, [r7, #20]
 800c888:	f7ff fef4 	bl	800c674 <_WriteBlocking>
 800c88c:	61f8      	str	r0, [r7, #28]
    break;
 800c88e:	e002      	b.n	800c896 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800c890:	2300      	movs	r3, #0
 800c892:	61fb      	str	r3, [r7, #28]
    break;
 800c894:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800c896:	69fb      	ldr	r3, [r7, #28]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3720      	adds	r7, #32
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	200065ec 	.word	0x200065ec

0800c8a4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b088      	sub	sp, #32
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800c8b0:	4b0e      	ldr	r3, [pc, #56]	; (800c8ec <SEGGER_RTT_Write+0x48>)
 800c8b2:	61fb      	str	r3, [r7, #28]
 800c8b4:	69fb      	ldr	r3, [r7, #28]
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	2b53      	cmp	r3, #83	; 0x53
 800c8bc:	d001      	beq.n	800c8c2 <SEGGER_RTT_Write+0x1e>
 800c8be:	f7ff fe7f 	bl	800c5c0 <_DoInit>
  SEGGER_RTT_LOCK();
 800c8c2:	f3ef 8311 	mrs	r3, BASEPRI
 800c8c6:	f04f 0120 	mov.w	r1, #32
 800c8ca:	f381 8811 	msr	BASEPRI, r1
 800c8ce:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	68b9      	ldr	r1, [r7, #8]
 800c8d4:	68f8      	ldr	r0, [r7, #12]
 800c8d6:	f7ff ff95 	bl	800c804 <SEGGER_RTT_WriteNoLock>
 800c8da:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800c8dc:	69bb      	ldr	r3, [r7, #24]
 800c8de:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800c8e2:	697b      	ldr	r3, [r7, #20]
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3720      	adds	r7, #32
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}
 800c8ec:	200065ec 	.word	0x200065ec

0800c8f0 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	af00      	add	r7, sp, #0
  _DoInit();
 800c8f4:	f7ff fe64 	bl	800c5c0 <_DoInit>
}
 800c8f8:	bf00      	nop
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <_write>:
 *      Author: ramad
 */

#include "SEGGER_RTT.h"

_ssize_t _write(int file, const void *ptr, size_t len) {
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
 800c902:	60f8      	str	r0, [r7, #12]
 800c904:	60b9      	str	r1, [r7, #8]
 800c906:	607a      	str	r2, [r7, #4]
  (void) file;  /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800c908:	687a      	ldr	r2, [r7, #4]
 800c90a:	68b9      	ldr	r1, [r7, #8]
 800c90c:	2000      	movs	r0, #0
 800c90e:	f7ff ffc9 	bl	800c8a4 <SEGGER_RTT_Write>
  return len;
 800c912:	687b      	ldr	r3, [r7, #4]
}
 800c914:	4618      	mov	r0, r3
 800c916:	3710      	adds	r7, #16
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <ButtonPoll>:
#include "main.h"
#include "cmsis_os.h"

extern osMessageQueueId_t BtnEventHandle;

void ButtonPoll(void *argument) {
 800c91c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c920:	b08e      	sub	sp, #56	; 0x38
 800c922:	af00      	add	r7, sp, #0
 800c924:	60f8      	str	r0, [r7, #12]
	(void) argument;
	uint64_t button_trace = 0;
 800c926:	f04f 0200 	mov.w	r2, #0
 800c92a:	f04f 0300 	mov.w	r3, #0
 800c92e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	const uint64_t edge_detector = 0xFFF000; // 8 loop
 800c932:	4a24      	ldr	r2, [pc, #144]	; (800c9c4 <ButtonPoll+0xa8>)
 800c934:	f04f 0300 	mov.w	r3, #0
 800c938:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	const uint64_t edge_window = 0xFFFFFF;
 800c93c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c940:	f04f 0300 	mov.w	r3, #0
 800c944:	e9c7 2308 	strd	r2, r3, [r7, #32]
	const int loop_period_ms = 1;
 800c948:	2301      	movs	r3, #1
 800c94a:	61fb      	str	r3, [r7, #28]

	while (1) {
		GPIO_PinState state = HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin);
 800c94c:	2101      	movs	r1, #1
 800c94e:	481e      	ldr	r0, [pc, #120]	; (800c9c8 <ButtonPoll+0xac>)
 800c950:	f7f5 fb3e 	bl	8001fd0 <HAL_GPIO_ReadPin>
 800c954:	4603      	mov	r3, r0
 800c956:	76fb      	strb	r3, [r7, #27]
		button_trace = (button_trace << 1) + state;
 800c958:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c95c:	1891      	adds	r1, r2, r2
 800c95e:	6039      	str	r1, [r7, #0]
 800c960:	415b      	adcs	r3, r3
 800c962:	607b      	str	r3, [r7, #4]
 800c964:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c968:	7ef9      	ldrb	r1, [r7, #27]
 800c96a:	2000      	movs	r0, #0
 800c96c:	4688      	mov	r8, r1
 800c96e:	4681      	mov	r9, r0
 800c970:	eb12 0a08 	adds.w	sl, r2, r8
 800c974:	eb43 0b09 	adc.w	fp, r3, r9
 800c978:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30

		int edge_detect = (button_trace & edge_window) == edge_detector;
 800c97c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800c980:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c984:	ea00 0402 	and.w	r4, r0, r2
 800c988:	ea01 0503 	and.w	r5, r1, r3
 800c98c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c990:	42ab      	cmp	r3, r5
 800c992:	bf08      	it	eq
 800c994:	42a2      	cmpeq	r2, r4
 800c996:	bf0c      	ite	eq
 800c998:	2301      	moveq	r3, #1
 800c99a:	2300      	movne	r3, #0
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	617b      	str	r3, [r7, #20]
		if (edge_detect) {
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d009      	beq.n	800c9ba <ButtonPoll+0x9e>
			const uint8_t data = 1;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	74fb      	strb	r3, [r7, #19]
			osMessageQueuePut(BtnEventHandle, &data, 0, 0);
 800c9aa:	4b08      	ldr	r3, [pc, #32]	; (800c9cc <ButtonPoll+0xb0>)
 800c9ac:	6818      	ldr	r0, [r3, #0]
 800c9ae:	f107 0113 	add.w	r1, r7, #19
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f7fc faa3 	bl	8008f00 <osMessageQueuePut>
		}

		osDelayUntil(loop_period_ms);
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7fc f9fe 	bl	8008dbe <osDelayUntil>
	while (1) {
 800c9c2:	e7c3      	b.n	800c94c <ButtonPoll+0x30>
 800c9c4:	00fff000 	.word	0x00fff000
 800c9c8:	40020000 	.word	0x40020000
 800c9cc:	20000744 	.word	0x20000744

0800c9d0 <BtnEventHandler_task>:
	}
}

void BtnEventHandler_task(void *argument) {
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b084      	sub	sp, #16
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
	(void) argument;

	while(1){
		uint8_t data;
		osMessageQueueGet(BtnEventHandle, &data, 0, HAL_MAX_DELAY);
 800c9d8:	4b07      	ldr	r3, [pc, #28]	; (800c9f8 <BtnEventHandler_task+0x28>)
 800c9da:	6818      	ldr	r0, [r3, #0]
 800c9dc:	f107 010f 	add.w	r1, r7, #15
 800c9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	f7fc faeb 	bl	8008fc0 <osMessageQueueGet>

		if(data){
 800c9ea:	7bfb      	ldrb	r3, [r7, #15]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d0f3      	beq.n	800c9d8 <BtnEventHandler_task+0x8>
			printf("Button press triggered\n");
 800c9f0:	4802      	ldr	r0, [pc, #8]	; (800c9fc <BtnEventHandler_task+0x2c>)
 800c9f2:	f000 f91b 	bl	800cc2c <puts>
	while(1){
 800c9f6:	e7ef      	b.n	800c9d8 <BtnEventHandler_task+0x8>
 800c9f8:	20000744 	.word	0x20000744
 800c9fc:	0800dccc 	.word	0x0800dccc

0800ca00 <std>:
 800ca00:	2300      	movs	r3, #0
 800ca02:	b510      	push	{r4, lr}
 800ca04:	4604      	mov	r4, r0
 800ca06:	e9c0 3300 	strd	r3, r3, [r0]
 800ca0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca0e:	6083      	str	r3, [r0, #8]
 800ca10:	8181      	strh	r1, [r0, #12]
 800ca12:	6643      	str	r3, [r0, #100]	; 0x64
 800ca14:	81c2      	strh	r2, [r0, #14]
 800ca16:	6183      	str	r3, [r0, #24]
 800ca18:	4619      	mov	r1, r3
 800ca1a:	2208      	movs	r2, #8
 800ca1c:	305c      	adds	r0, #92	; 0x5c
 800ca1e:	f000 f9e5 	bl	800cdec <memset>
 800ca22:	4b05      	ldr	r3, [pc, #20]	; (800ca38 <std+0x38>)
 800ca24:	6263      	str	r3, [r4, #36]	; 0x24
 800ca26:	4b05      	ldr	r3, [pc, #20]	; (800ca3c <std+0x3c>)
 800ca28:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca2a:	4b05      	ldr	r3, [pc, #20]	; (800ca40 <std+0x40>)
 800ca2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca2e:	4b05      	ldr	r3, [pc, #20]	; (800ca44 <std+0x44>)
 800ca30:	6224      	str	r4, [r4, #32]
 800ca32:	6323      	str	r3, [r4, #48]	; 0x30
 800ca34:	bd10      	pop	{r4, pc}
 800ca36:	bf00      	nop
 800ca38:	0800cc3d 	.word	0x0800cc3d
 800ca3c:	0800cc5f 	.word	0x0800cc5f
 800ca40:	0800cc97 	.word	0x0800cc97
 800ca44:	0800ccbb 	.word	0x0800ccbb

0800ca48 <stdio_exit_handler>:
 800ca48:	4a02      	ldr	r2, [pc, #8]	; (800ca54 <stdio_exit_handler+0xc>)
 800ca4a:	4903      	ldr	r1, [pc, #12]	; (800ca58 <stdio_exit_handler+0x10>)
 800ca4c:	4803      	ldr	r0, [pc, #12]	; (800ca5c <stdio_exit_handler+0x14>)
 800ca4e:	f000 b869 	b.w	800cb24 <_fwalk_sglue>
 800ca52:	bf00      	nop
 800ca54:	20000100 	.word	0x20000100
 800ca58:	0800d84d 	.word	0x0800d84d
 800ca5c:	2000010c 	.word	0x2000010c

0800ca60 <cleanup_stdio>:
 800ca60:	6841      	ldr	r1, [r0, #4]
 800ca62:	4b0c      	ldr	r3, [pc, #48]	; (800ca94 <cleanup_stdio+0x34>)
 800ca64:	4299      	cmp	r1, r3
 800ca66:	b510      	push	{r4, lr}
 800ca68:	4604      	mov	r4, r0
 800ca6a:	d001      	beq.n	800ca70 <cleanup_stdio+0x10>
 800ca6c:	f000 feee 	bl	800d84c <_fflush_r>
 800ca70:	68a1      	ldr	r1, [r4, #8]
 800ca72:	4b09      	ldr	r3, [pc, #36]	; (800ca98 <cleanup_stdio+0x38>)
 800ca74:	4299      	cmp	r1, r3
 800ca76:	d002      	beq.n	800ca7e <cleanup_stdio+0x1e>
 800ca78:	4620      	mov	r0, r4
 800ca7a:	f000 fee7 	bl	800d84c <_fflush_r>
 800ca7e:	68e1      	ldr	r1, [r4, #12]
 800ca80:	4b06      	ldr	r3, [pc, #24]	; (800ca9c <cleanup_stdio+0x3c>)
 800ca82:	4299      	cmp	r1, r3
 800ca84:	d004      	beq.n	800ca90 <cleanup_stdio+0x30>
 800ca86:	4620      	mov	r0, r4
 800ca88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca8c:	f000 bede 	b.w	800d84c <_fflush_r>
 800ca90:	bd10      	pop	{r4, pc}
 800ca92:	bf00      	nop
 800ca94:	20006aa4 	.word	0x20006aa4
 800ca98:	20006b0c 	.word	0x20006b0c
 800ca9c:	20006b74 	.word	0x20006b74

0800caa0 <global_stdio_init.part.0>:
 800caa0:	b510      	push	{r4, lr}
 800caa2:	4b0b      	ldr	r3, [pc, #44]	; (800cad0 <global_stdio_init.part.0+0x30>)
 800caa4:	4c0b      	ldr	r4, [pc, #44]	; (800cad4 <global_stdio_init.part.0+0x34>)
 800caa6:	4a0c      	ldr	r2, [pc, #48]	; (800cad8 <global_stdio_init.part.0+0x38>)
 800caa8:	601a      	str	r2, [r3, #0]
 800caaa:	4620      	mov	r0, r4
 800caac:	2200      	movs	r2, #0
 800caae:	2104      	movs	r1, #4
 800cab0:	f7ff ffa6 	bl	800ca00 <std>
 800cab4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cab8:	2201      	movs	r2, #1
 800caba:	2109      	movs	r1, #9
 800cabc:	f7ff ffa0 	bl	800ca00 <std>
 800cac0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cac4:	2202      	movs	r2, #2
 800cac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800caca:	2112      	movs	r1, #18
 800cacc:	f7ff bf98 	b.w	800ca00 <std>
 800cad0:	20006bdc 	.word	0x20006bdc
 800cad4:	20006aa4 	.word	0x20006aa4
 800cad8:	0800ca49 	.word	0x0800ca49

0800cadc <__sfp_lock_acquire>:
 800cadc:	4801      	ldr	r0, [pc, #4]	; (800cae4 <__sfp_lock_acquire+0x8>)
 800cade:	f000 ba53 	b.w	800cf88 <__retarget_lock_acquire_recursive>
 800cae2:	bf00      	nop
 800cae4:	20006be5 	.word	0x20006be5

0800cae8 <__sfp_lock_release>:
 800cae8:	4801      	ldr	r0, [pc, #4]	; (800caf0 <__sfp_lock_release+0x8>)
 800caea:	f000 ba4e 	b.w	800cf8a <__retarget_lock_release_recursive>
 800caee:	bf00      	nop
 800caf0:	20006be5 	.word	0x20006be5

0800caf4 <__sinit>:
 800caf4:	b510      	push	{r4, lr}
 800caf6:	4604      	mov	r4, r0
 800caf8:	f7ff fff0 	bl	800cadc <__sfp_lock_acquire>
 800cafc:	6a23      	ldr	r3, [r4, #32]
 800cafe:	b11b      	cbz	r3, 800cb08 <__sinit+0x14>
 800cb00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb04:	f7ff bff0 	b.w	800cae8 <__sfp_lock_release>
 800cb08:	4b04      	ldr	r3, [pc, #16]	; (800cb1c <__sinit+0x28>)
 800cb0a:	6223      	str	r3, [r4, #32]
 800cb0c:	4b04      	ldr	r3, [pc, #16]	; (800cb20 <__sinit+0x2c>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d1f5      	bne.n	800cb00 <__sinit+0xc>
 800cb14:	f7ff ffc4 	bl	800caa0 <global_stdio_init.part.0>
 800cb18:	e7f2      	b.n	800cb00 <__sinit+0xc>
 800cb1a:	bf00      	nop
 800cb1c:	0800ca61 	.word	0x0800ca61
 800cb20:	20006bdc 	.word	0x20006bdc

0800cb24 <_fwalk_sglue>:
 800cb24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb28:	4607      	mov	r7, r0
 800cb2a:	4688      	mov	r8, r1
 800cb2c:	4614      	mov	r4, r2
 800cb2e:	2600      	movs	r6, #0
 800cb30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb34:	f1b9 0901 	subs.w	r9, r9, #1
 800cb38:	d505      	bpl.n	800cb46 <_fwalk_sglue+0x22>
 800cb3a:	6824      	ldr	r4, [r4, #0]
 800cb3c:	2c00      	cmp	r4, #0
 800cb3e:	d1f7      	bne.n	800cb30 <_fwalk_sglue+0xc>
 800cb40:	4630      	mov	r0, r6
 800cb42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb46:	89ab      	ldrh	r3, [r5, #12]
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d907      	bls.n	800cb5c <_fwalk_sglue+0x38>
 800cb4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb50:	3301      	adds	r3, #1
 800cb52:	d003      	beq.n	800cb5c <_fwalk_sglue+0x38>
 800cb54:	4629      	mov	r1, r5
 800cb56:	4638      	mov	r0, r7
 800cb58:	47c0      	blx	r8
 800cb5a:	4306      	orrs	r6, r0
 800cb5c:	3568      	adds	r5, #104	; 0x68
 800cb5e:	e7e9      	b.n	800cb34 <_fwalk_sglue+0x10>

0800cb60 <iprintf>:
 800cb60:	b40f      	push	{r0, r1, r2, r3}
 800cb62:	b507      	push	{r0, r1, r2, lr}
 800cb64:	4906      	ldr	r1, [pc, #24]	; (800cb80 <iprintf+0x20>)
 800cb66:	ab04      	add	r3, sp, #16
 800cb68:	6808      	ldr	r0, [r1, #0]
 800cb6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb6e:	6881      	ldr	r1, [r0, #8]
 800cb70:	9301      	str	r3, [sp, #4]
 800cb72:	f000 fb3b 	bl	800d1ec <_vfiprintf_r>
 800cb76:	b003      	add	sp, #12
 800cb78:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb7c:	b004      	add	sp, #16
 800cb7e:	4770      	bx	lr
 800cb80:	20000158 	.word	0x20000158

0800cb84 <_puts_r>:
 800cb84:	6a03      	ldr	r3, [r0, #32]
 800cb86:	b570      	push	{r4, r5, r6, lr}
 800cb88:	6884      	ldr	r4, [r0, #8]
 800cb8a:	4605      	mov	r5, r0
 800cb8c:	460e      	mov	r6, r1
 800cb8e:	b90b      	cbnz	r3, 800cb94 <_puts_r+0x10>
 800cb90:	f7ff ffb0 	bl	800caf4 <__sinit>
 800cb94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb96:	07db      	lsls	r3, r3, #31
 800cb98:	d405      	bmi.n	800cba6 <_puts_r+0x22>
 800cb9a:	89a3      	ldrh	r3, [r4, #12]
 800cb9c:	0598      	lsls	r0, r3, #22
 800cb9e:	d402      	bmi.n	800cba6 <_puts_r+0x22>
 800cba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cba2:	f000 f9f1 	bl	800cf88 <__retarget_lock_acquire_recursive>
 800cba6:	89a3      	ldrh	r3, [r4, #12]
 800cba8:	0719      	lsls	r1, r3, #28
 800cbaa:	d513      	bpl.n	800cbd4 <_puts_r+0x50>
 800cbac:	6923      	ldr	r3, [r4, #16]
 800cbae:	b18b      	cbz	r3, 800cbd4 <_puts_r+0x50>
 800cbb0:	3e01      	subs	r6, #1
 800cbb2:	68a3      	ldr	r3, [r4, #8]
 800cbb4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cbb8:	3b01      	subs	r3, #1
 800cbba:	60a3      	str	r3, [r4, #8]
 800cbbc:	b9e9      	cbnz	r1, 800cbfa <_puts_r+0x76>
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	da2e      	bge.n	800cc20 <_puts_r+0x9c>
 800cbc2:	4622      	mov	r2, r4
 800cbc4:	210a      	movs	r1, #10
 800cbc6:	4628      	mov	r0, r5
 800cbc8:	f000 f87b 	bl	800ccc2 <__swbuf_r>
 800cbcc:	3001      	adds	r0, #1
 800cbce:	d007      	beq.n	800cbe0 <_puts_r+0x5c>
 800cbd0:	250a      	movs	r5, #10
 800cbd2:	e007      	b.n	800cbe4 <_puts_r+0x60>
 800cbd4:	4621      	mov	r1, r4
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	f000 f8b0 	bl	800cd3c <__swsetup_r>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	d0e7      	beq.n	800cbb0 <_puts_r+0x2c>
 800cbe0:	f04f 35ff 	mov.w	r5, #4294967295
 800cbe4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbe6:	07da      	lsls	r2, r3, #31
 800cbe8:	d405      	bmi.n	800cbf6 <_puts_r+0x72>
 800cbea:	89a3      	ldrh	r3, [r4, #12]
 800cbec:	059b      	lsls	r3, r3, #22
 800cbee:	d402      	bmi.n	800cbf6 <_puts_r+0x72>
 800cbf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbf2:	f000 f9ca 	bl	800cf8a <__retarget_lock_release_recursive>
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	bd70      	pop	{r4, r5, r6, pc}
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	da04      	bge.n	800cc08 <_puts_r+0x84>
 800cbfe:	69a2      	ldr	r2, [r4, #24]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	dc06      	bgt.n	800cc12 <_puts_r+0x8e>
 800cc04:	290a      	cmp	r1, #10
 800cc06:	d004      	beq.n	800cc12 <_puts_r+0x8e>
 800cc08:	6823      	ldr	r3, [r4, #0]
 800cc0a:	1c5a      	adds	r2, r3, #1
 800cc0c:	6022      	str	r2, [r4, #0]
 800cc0e:	7019      	strb	r1, [r3, #0]
 800cc10:	e7cf      	b.n	800cbb2 <_puts_r+0x2e>
 800cc12:	4622      	mov	r2, r4
 800cc14:	4628      	mov	r0, r5
 800cc16:	f000 f854 	bl	800ccc2 <__swbuf_r>
 800cc1a:	3001      	adds	r0, #1
 800cc1c:	d1c9      	bne.n	800cbb2 <_puts_r+0x2e>
 800cc1e:	e7df      	b.n	800cbe0 <_puts_r+0x5c>
 800cc20:	6823      	ldr	r3, [r4, #0]
 800cc22:	250a      	movs	r5, #10
 800cc24:	1c5a      	adds	r2, r3, #1
 800cc26:	6022      	str	r2, [r4, #0]
 800cc28:	701d      	strb	r5, [r3, #0]
 800cc2a:	e7db      	b.n	800cbe4 <_puts_r+0x60>

0800cc2c <puts>:
 800cc2c:	4b02      	ldr	r3, [pc, #8]	; (800cc38 <puts+0xc>)
 800cc2e:	4601      	mov	r1, r0
 800cc30:	6818      	ldr	r0, [r3, #0]
 800cc32:	f7ff bfa7 	b.w	800cb84 <_puts_r>
 800cc36:	bf00      	nop
 800cc38:	20000158 	.word	0x20000158

0800cc3c <__sread>:
 800cc3c:	b510      	push	{r4, lr}
 800cc3e:	460c      	mov	r4, r1
 800cc40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc44:	f000 f952 	bl	800ceec <_read_r>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	bfab      	itete	ge
 800cc4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc4e:	89a3      	ldrhlt	r3, [r4, #12]
 800cc50:	181b      	addge	r3, r3, r0
 800cc52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc56:	bfac      	ite	ge
 800cc58:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc5a:	81a3      	strhlt	r3, [r4, #12]
 800cc5c:	bd10      	pop	{r4, pc}

0800cc5e <__swrite>:
 800cc5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc62:	461f      	mov	r7, r3
 800cc64:	898b      	ldrh	r3, [r1, #12]
 800cc66:	05db      	lsls	r3, r3, #23
 800cc68:	4605      	mov	r5, r0
 800cc6a:	460c      	mov	r4, r1
 800cc6c:	4616      	mov	r6, r2
 800cc6e:	d505      	bpl.n	800cc7c <__swrite+0x1e>
 800cc70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc74:	2302      	movs	r3, #2
 800cc76:	2200      	movs	r2, #0
 800cc78:	f000 f926 	bl	800cec8 <_lseek_r>
 800cc7c:	89a3      	ldrh	r3, [r4, #12]
 800cc7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc86:	81a3      	strh	r3, [r4, #12]
 800cc88:	4632      	mov	r2, r6
 800cc8a:	463b      	mov	r3, r7
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc92:	f000 b93d 	b.w	800cf10 <_write_r>

0800cc96 <__sseek>:
 800cc96:	b510      	push	{r4, lr}
 800cc98:	460c      	mov	r4, r1
 800cc9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc9e:	f000 f913 	bl	800cec8 <_lseek_r>
 800cca2:	1c43      	adds	r3, r0, #1
 800cca4:	89a3      	ldrh	r3, [r4, #12]
 800cca6:	bf15      	itete	ne
 800cca8:	6560      	strne	r0, [r4, #84]	; 0x54
 800ccaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ccae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ccb2:	81a3      	strheq	r3, [r4, #12]
 800ccb4:	bf18      	it	ne
 800ccb6:	81a3      	strhne	r3, [r4, #12]
 800ccb8:	bd10      	pop	{r4, pc}

0800ccba <__sclose>:
 800ccba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccbe:	f000 b89d 	b.w	800cdfc <_close_r>

0800ccc2 <__swbuf_r>:
 800ccc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccc4:	460e      	mov	r6, r1
 800ccc6:	4614      	mov	r4, r2
 800ccc8:	4605      	mov	r5, r0
 800ccca:	b118      	cbz	r0, 800ccd4 <__swbuf_r+0x12>
 800cccc:	6a03      	ldr	r3, [r0, #32]
 800ccce:	b90b      	cbnz	r3, 800ccd4 <__swbuf_r+0x12>
 800ccd0:	f7ff ff10 	bl	800caf4 <__sinit>
 800ccd4:	69a3      	ldr	r3, [r4, #24]
 800ccd6:	60a3      	str	r3, [r4, #8]
 800ccd8:	89a3      	ldrh	r3, [r4, #12]
 800ccda:	071a      	lsls	r2, r3, #28
 800ccdc:	d525      	bpl.n	800cd2a <__swbuf_r+0x68>
 800ccde:	6923      	ldr	r3, [r4, #16]
 800cce0:	b31b      	cbz	r3, 800cd2a <__swbuf_r+0x68>
 800cce2:	6823      	ldr	r3, [r4, #0]
 800cce4:	6922      	ldr	r2, [r4, #16]
 800cce6:	1a98      	subs	r0, r3, r2
 800cce8:	6963      	ldr	r3, [r4, #20]
 800ccea:	b2f6      	uxtb	r6, r6
 800ccec:	4283      	cmp	r3, r0
 800ccee:	4637      	mov	r7, r6
 800ccf0:	dc04      	bgt.n	800ccfc <__swbuf_r+0x3a>
 800ccf2:	4621      	mov	r1, r4
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	f000 fda9 	bl	800d84c <_fflush_r>
 800ccfa:	b9e0      	cbnz	r0, 800cd36 <__swbuf_r+0x74>
 800ccfc:	68a3      	ldr	r3, [r4, #8]
 800ccfe:	3b01      	subs	r3, #1
 800cd00:	60a3      	str	r3, [r4, #8]
 800cd02:	6823      	ldr	r3, [r4, #0]
 800cd04:	1c5a      	adds	r2, r3, #1
 800cd06:	6022      	str	r2, [r4, #0]
 800cd08:	701e      	strb	r6, [r3, #0]
 800cd0a:	6962      	ldr	r2, [r4, #20]
 800cd0c:	1c43      	adds	r3, r0, #1
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d004      	beq.n	800cd1c <__swbuf_r+0x5a>
 800cd12:	89a3      	ldrh	r3, [r4, #12]
 800cd14:	07db      	lsls	r3, r3, #31
 800cd16:	d506      	bpl.n	800cd26 <__swbuf_r+0x64>
 800cd18:	2e0a      	cmp	r6, #10
 800cd1a:	d104      	bne.n	800cd26 <__swbuf_r+0x64>
 800cd1c:	4621      	mov	r1, r4
 800cd1e:	4628      	mov	r0, r5
 800cd20:	f000 fd94 	bl	800d84c <_fflush_r>
 800cd24:	b938      	cbnz	r0, 800cd36 <__swbuf_r+0x74>
 800cd26:	4638      	mov	r0, r7
 800cd28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd2a:	4621      	mov	r1, r4
 800cd2c:	4628      	mov	r0, r5
 800cd2e:	f000 f805 	bl	800cd3c <__swsetup_r>
 800cd32:	2800      	cmp	r0, #0
 800cd34:	d0d5      	beq.n	800cce2 <__swbuf_r+0x20>
 800cd36:	f04f 37ff 	mov.w	r7, #4294967295
 800cd3a:	e7f4      	b.n	800cd26 <__swbuf_r+0x64>

0800cd3c <__swsetup_r>:
 800cd3c:	b538      	push	{r3, r4, r5, lr}
 800cd3e:	4b2a      	ldr	r3, [pc, #168]	; (800cde8 <__swsetup_r+0xac>)
 800cd40:	4605      	mov	r5, r0
 800cd42:	6818      	ldr	r0, [r3, #0]
 800cd44:	460c      	mov	r4, r1
 800cd46:	b118      	cbz	r0, 800cd50 <__swsetup_r+0x14>
 800cd48:	6a03      	ldr	r3, [r0, #32]
 800cd4a:	b90b      	cbnz	r3, 800cd50 <__swsetup_r+0x14>
 800cd4c:	f7ff fed2 	bl	800caf4 <__sinit>
 800cd50:	89a3      	ldrh	r3, [r4, #12]
 800cd52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd56:	0718      	lsls	r0, r3, #28
 800cd58:	d422      	bmi.n	800cda0 <__swsetup_r+0x64>
 800cd5a:	06d9      	lsls	r1, r3, #27
 800cd5c:	d407      	bmi.n	800cd6e <__swsetup_r+0x32>
 800cd5e:	2309      	movs	r3, #9
 800cd60:	602b      	str	r3, [r5, #0]
 800cd62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd66:	81a3      	strh	r3, [r4, #12]
 800cd68:	f04f 30ff 	mov.w	r0, #4294967295
 800cd6c:	e034      	b.n	800cdd8 <__swsetup_r+0x9c>
 800cd6e:	0758      	lsls	r0, r3, #29
 800cd70:	d512      	bpl.n	800cd98 <__swsetup_r+0x5c>
 800cd72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd74:	b141      	cbz	r1, 800cd88 <__swsetup_r+0x4c>
 800cd76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd7a:	4299      	cmp	r1, r3
 800cd7c:	d002      	beq.n	800cd84 <__swsetup_r+0x48>
 800cd7e:	4628      	mov	r0, r5
 800cd80:	f000 f912 	bl	800cfa8 <_free_r>
 800cd84:	2300      	movs	r3, #0
 800cd86:	6363      	str	r3, [r4, #52]	; 0x34
 800cd88:	89a3      	ldrh	r3, [r4, #12]
 800cd8a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd8e:	81a3      	strh	r3, [r4, #12]
 800cd90:	2300      	movs	r3, #0
 800cd92:	6063      	str	r3, [r4, #4]
 800cd94:	6923      	ldr	r3, [r4, #16]
 800cd96:	6023      	str	r3, [r4, #0]
 800cd98:	89a3      	ldrh	r3, [r4, #12]
 800cd9a:	f043 0308 	orr.w	r3, r3, #8
 800cd9e:	81a3      	strh	r3, [r4, #12]
 800cda0:	6923      	ldr	r3, [r4, #16]
 800cda2:	b94b      	cbnz	r3, 800cdb8 <__swsetup_r+0x7c>
 800cda4:	89a3      	ldrh	r3, [r4, #12]
 800cda6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cdaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdae:	d003      	beq.n	800cdb8 <__swsetup_r+0x7c>
 800cdb0:	4621      	mov	r1, r4
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	f000 fd98 	bl	800d8e8 <__smakebuf_r>
 800cdb8:	89a0      	ldrh	r0, [r4, #12]
 800cdba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdbe:	f010 0301 	ands.w	r3, r0, #1
 800cdc2:	d00a      	beq.n	800cdda <__swsetup_r+0x9e>
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	60a3      	str	r3, [r4, #8]
 800cdc8:	6963      	ldr	r3, [r4, #20]
 800cdca:	425b      	negs	r3, r3
 800cdcc:	61a3      	str	r3, [r4, #24]
 800cdce:	6923      	ldr	r3, [r4, #16]
 800cdd0:	b943      	cbnz	r3, 800cde4 <__swsetup_r+0xa8>
 800cdd2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cdd6:	d1c4      	bne.n	800cd62 <__swsetup_r+0x26>
 800cdd8:	bd38      	pop	{r3, r4, r5, pc}
 800cdda:	0781      	lsls	r1, r0, #30
 800cddc:	bf58      	it	pl
 800cdde:	6963      	ldrpl	r3, [r4, #20]
 800cde0:	60a3      	str	r3, [r4, #8]
 800cde2:	e7f4      	b.n	800cdce <__swsetup_r+0x92>
 800cde4:	2000      	movs	r0, #0
 800cde6:	e7f7      	b.n	800cdd8 <__swsetup_r+0x9c>
 800cde8:	20000158 	.word	0x20000158

0800cdec <memset>:
 800cdec:	4402      	add	r2, r0
 800cdee:	4603      	mov	r3, r0
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d100      	bne.n	800cdf6 <memset+0xa>
 800cdf4:	4770      	bx	lr
 800cdf6:	f803 1b01 	strb.w	r1, [r3], #1
 800cdfa:	e7f9      	b.n	800cdf0 <memset+0x4>

0800cdfc <_close_r>:
 800cdfc:	b538      	push	{r3, r4, r5, lr}
 800cdfe:	4d06      	ldr	r5, [pc, #24]	; (800ce18 <_close_r+0x1c>)
 800ce00:	2300      	movs	r3, #0
 800ce02:	4604      	mov	r4, r0
 800ce04:	4608      	mov	r0, r1
 800ce06:	602b      	str	r3, [r5, #0]
 800ce08:	f7f3 ff5d 	bl	8000cc6 <_close>
 800ce0c:	1c43      	adds	r3, r0, #1
 800ce0e:	d102      	bne.n	800ce16 <_close_r+0x1a>
 800ce10:	682b      	ldr	r3, [r5, #0]
 800ce12:	b103      	cbz	r3, 800ce16 <_close_r+0x1a>
 800ce14:	6023      	str	r3, [r4, #0]
 800ce16:	bd38      	pop	{r3, r4, r5, pc}
 800ce18:	20006be0 	.word	0x20006be0

0800ce1c <_reclaim_reent>:
 800ce1c:	4b29      	ldr	r3, [pc, #164]	; (800cec4 <_reclaim_reent+0xa8>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4283      	cmp	r3, r0
 800ce22:	b570      	push	{r4, r5, r6, lr}
 800ce24:	4604      	mov	r4, r0
 800ce26:	d04b      	beq.n	800cec0 <_reclaim_reent+0xa4>
 800ce28:	69c3      	ldr	r3, [r0, #28]
 800ce2a:	b143      	cbz	r3, 800ce3e <_reclaim_reent+0x22>
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d144      	bne.n	800cebc <_reclaim_reent+0xa0>
 800ce32:	69e3      	ldr	r3, [r4, #28]
 800ce34:	6819      	ldr	r1, [r3, #0]
 800ce36:	b111      	cbz	r1, 800ce3e <_reclaim_reent+0x22>
 800ce38:	4620      	mov	r0, r4
 800ce3a:	f000 f8b5 	bl	800cfa8 <_free_r>
 800ce3e:	6961      	ldr	r1, [r4, #20]
 800ce40:	b111      	cbz	r1, 800ce48 <_reclaim_reent+0x2c>
 800ce42:	4620      	mov	r0, r4
 800ce44:	f000 f8b0 	bl	800cfa8 <_free_r>
 800ce48:	69e1      	ldr	r1, [r4, #28]
 800ce4a:	b111      	cbz	r1, 800ce52 <_reclaim_reent+0x36>
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f000 f8ab 	bl	800cfa8 <_free_r>
 800ce52:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ce54:	b111      	cbz	r1, 800ce5c <_reclaim_reent+0x40>
 800ce56:	4620      	mov	r0, r4
 800ce58:	f000 f8a6 	bl	800cfa8 <_free_r>
 800ce5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce5e:	b111      	cbz	r1, 800ce66 <_reclaim_reent+0x4a>
 800ce60:	4620      	mov	r0, r4
 800ce62:	f000 f8a1 	bl	800cfa8 <_free_r>
 800ce66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ce68:	b111      	cbz	r1, 800ce70 <_reclaim_reent+0x54>
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	f000 f89c 	bl	800cfa8 <_free_r>
 800ce70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ce72:	b111      	cbz	r1, 800ce7a <_reclaim_reent+0x5e>
 800ce74:	4620      	mov	r0, r4
 800ce76:	f000 f897 	bl	800cfa8 <_free_r>
 800ce7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ce7c:	b111      	cbz	r1, 800ce84 <_reclaim_reent+0x68>
 800ce7e:	4620      	mov	r0, r4
 800ce80:	f000 f892 	bl	800cfa8 <_free_r>
 800ce84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ce86:	b111      	cbz	r1, 800ce8e <_reclaim_reent+0x72>
 800ce88:	4620      	mov	r0, r4
 800ce8a:	f000 f88d 	bl	800cfa8 <_free_r>
 800ce8e:	6a23      	ldr	r3, [r4, #32]
 800ce90:	b1b3      	cbz	r3, 800cec0 <_reclaim_reent+0xa4>
 800ce92:	4620      	mov	r0, r4
 800ce94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce98:	4718      	bx	r3
 800ce9a:	5949      	ldr	r1, [r1, r5]
 800ce9c:	b941      	cbnz	r1, 800ceb0 <_reclaim_reent+0x94>
 800ce9e:	3504      	adds	r5, #4
 800cea0:	69e3      	ldr	r3, [r4, #28]
 800cea2:	2d80      	cmp	r5, #128	; 0x80
 800cea4:	68d9      	ldr	r1, [r3, #12]
 800cea6:	d1f8      	bne.n	800ce9a <_reclaim_reent+0x7e>
 800cea8:	4620      	mov	r0, r4
 800ceaa:	f000 f87d 	bl	800cfa8 <_free_r>
 800ceae:	e7c0      	b.n	800ce32 <_reclaim_reent+0x16>
 800ceb0:	680e      	ldr	r6, [r1, #0]
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	f000 f878 	bl	800cfa8 <_free_r>
 800ceb8:	4631      	mov	r1, r6
 800ceba:	e7ef      	b.n	800ce9c <_reclaim_reent+0x80>
 800cebc:	2500      	movs	r5, #0
 800cebe:	e7ef      	b.n	800cea0 <_reclaim_reent+0x84>
 800cec0:	bd70      	pop	{r4, r5, r6, pc}
 800cec2:	bf00      	nop
 800cec4:	20000158 	.word	0x20000158

0800cec8 <_lseek_r>:
 800cec8:	b538      	push	{r3, r4, r5, lr}
 800ceca:	4d07      	ldr	r5, [pc, #28]	; (800cee8 <_lseek_r+0x20>)
 800cecc:	4604      	mov	r4, r0
 800cece:	4608      	mov	r0, r1
 800ced0:	4611      	mov	r1, r2
 800ced2:	2200      	movs	r2, #0
 800ced4:	602a      	str	r2, [r5, #0]
 800ced6:	461a      	mov	r2, r3
 800ced8:	f7f3 ff1c 	bl	8000d14 <_lseek>
 800cedc:	1c43      	adds	r3, r0, #1
 800cede:	d102      	bne.n	800cee6 <_lseek_r+0x1e>
 800cee0:	682b      	ldr	r3, [r5, #0]
 800cee2:	b103      	cbz	r3, 800cee6 <_lseek_r+0x1e>
 800cee4:	6023      	str	r3, [r4, #0]
 800cee6:	bd38      	pop	{r3, r4, r5, pc}
 800cee8:	20006be0 	.word	0x20006be0

0800ceec <_read_r>:
 800ceec:	b538      	push	{r3, r4, r5, lr}
 800ceee:	4d07      	ldr	r5, [pc, #28]	; (800cf0c <_read_r+0x20>)
 800cef0:	4604      	mov	r4, r0
 800cef2:	4608      	mov	r0, r1
 800cef4:	4611      	mov	r1, r2
 800cef6:	2200      	movs	r2, #0
 800cef8:	602a      	str	r2, [r5, #0]
 800cefa:	461a      	mov	r2, r3
 800cefc:	f7f3 fec6 	bl	8000c8c <_read>
 800cf00:	1c43      	adds	r3, r0, #1
 800cf02:	d102      	bne.n	800cf0a <_read_r+0x1e>
 800cf04:	682b      	ldr	r3, [r5, #0]
 800cf06:	b103      	cbz	r3, 800cf0a <_read_r+0x1e>
 800cf08:	6023      	str	r3, [r4, #0]
 800cf0a:	bd38      	pop	{r3, r4, r5, pc}
 800cf0c:	20006be0 	.word	0x20006be0

0800cf10 <_write_r>:
 800cf10:	b538      	push	{r3, r4, r5, lr}
 800cf12:	4d07      	ldr	r5, [pc, #28]	; (800cf30 <_write_r+0x20>)
 800cf14:	4604      	mov	r4, r0
 800cf16:	4608      	mov	r0, r1
 800cf18:	4611      	mov	r1, r2
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	602a      	str	r2, [r5, #0]
 800cf1e:	461a      	mov	r2, r3
 800cf20:	f7ff fcec 	bl	800c8fc <_write>
 800cf24:	1c43      	adds	r3, r0, #1
 800cf26:	d102      	bne.n	800cf2e <_write_r+0x1e>
 800cf28:	682b      	ldr	r3, [r5, #0]
 800cf2a:	b103      	cbz	r3, 800cf2e <_write_r+0x1e>
 800cf2c:	6023      	str	r3, [r4, #0]
 800cf2e:	bd38      	pop	{r3, r4, r5, pc}
 800cf30:	20006be0 	.word	0x20006be0

0800cf34 <__errno>:
 800cf34:	4b01      	ldr	r3, [pc, #4]	; (800cf3c <__errno+0x8>)
 800cf36:	6818      	ldr	r0, [r3, #0]
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop
 800cf3c:	20000158 	.word	0x20000158

0800cf40 <__libc_init_array>:
 800cf40:	b570      	push	{r4, r5, r6, lr}
 800cf42:	4d0d      	ldr	r5, [pc, #52]	; (800cf78 <__libc_init_array+0x38>)
 800cf44:	4c0d      	ldr	r4, [pc, #52]	; (800cf7c <__libc_init_array+0x3c>)
 800cf46:	1b64      	subs	r4, r4, r5
 800cf48:	10a4      	asrs	r4, r4, #2
 800cf4a:	2600      	movs	r6, #0
 800cf4c:	42a6      	cmp	r6, r4
 800cf4e:	d109      	bne.n	800cf64 <__libc_init_array+0x24>
 800cf50:	4d0b      	ldr	r5, [pc, #44]	; (800cf80 <__libc_init_array+0x40>)
 800cf52:	4c0c      	ldr	r4, [pc, #48]	; (800cf84 <__libc_init_array+0x44>)
 800cf54:	f000 fd36 	bl	800d9c4 <_init>
 800cf58:	1b64      	subs	r4, r4, r5
 800cf5a:	10a4      	asrs	r4, r4, #2
 800cf5c:	2600      	movs	r6, #0
 800cf5e:	42a6      	cmp	r6, r4
 800cf60:	d105      	bne.n	800cf6e <__libc_init_array+0x2e>
 800cf62:	bd70      	pop	{r4, r5, r6, pc}
 800cf64:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf68:	4798      	blx	r3
 800cf6a:	3601      	adds	r6, #1
 800cf6c:	e7ee      	b.n	800cf4c <__libc_init_array+0xc>
 800cf6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf72:	4798      	blx	r3
 800cf74:	3601      	adds	r6, #1
 800cf76:	e7f2      	b.n	800cf5e <__libc_init_array+0x1e>
 800cf78:	0800ddcc 	.word	0x0800ddcc
 800cf7c:	0800ddcc 	.word	0x0800ddcc
 800cf80:	0800ddcc 	.word	0x0800ddcc
 800cf84:	0800ddd0 	.word	0x0800ddd0

0800cf88 <__retarget_lock_acquire_recursive>:
 800cf88:	4770      	bx	lr

0800cf8a <__retarget_lock_release_recursive>:
 800cf8a:	4770      	bx	lr

0800cf8c <memcpy>:
 800cf8c:	440a      	add	r2, r1
 800cf8e:	4291      	cmp	r1, r2
 800cf90:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf94:	d100      	bne.n	800cf98 <memcpy+0xc>
 800cf96:	4770      	bx	lr
 800cf98:	b510      	push	{r4, lr}
 800cf9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfa2:	4291      	cmp	r1, r2
 800cfa4:	d1f9      	bne.n	800cf9a <memcpy+0xe>
 800cfa6:	bd10      	pop	{r4, pc}

0800cfa8 <_free_r>:
 800cfa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfaa:	2900      	cmp	r1, #0
 800cfac:	d044      	beq.n	800d038 <_free_r+0x90>
 800cfae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfb2:	9001      	str	r0, [sp, #4]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	f1a1 0404 	sub.w	r4, r1, #4
 800cfba:	bfb8      	it	lt
 800cfbc:	18e4      	addlt	r4, r4, r3
 800cfbe:	f000 f8df 	bl	800d180 <__malloc_lock>
 800cfc2:	4a1e      	ldr	r2, [pc, #120]	; (800d03c <_free_r+0x94>)
 800cfc4:	9801      	ldr	r0, [sp, #4]
 800cfc6:	6813      	ldr	r3, [r2, #0]
 800cfc8:	b933      	cbnz	r3, 800cfd8 <_free_r+0x30>
 800cfca:	6063      	str	r3, [r4, #4]
 800cfcc:	6014      	str	r4, [r2, #0]
 800cfce:	b003      	add	sp, #12
 800cfd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfd4:	f000 b8da 	b.w	800d18c <__malloc_unlock>
 800cfd8:	42a3      	cmp	r3, r4
 800cfda:	d908      	bls.n	800cfee <_free_r+0x46>
 800cfdc:	6825      	ldr	r5, [r4, #0]
 800cfde:	1961      	adds	r1, r4, r5
 800cfe0:	428b      	cmp	r3, r1
 800cfe2:	bf01      	itttt	eq
 800cfe4:	6819      	ldreq	r1, [r3, #0]
 800cfe6:	685b      	ldreq	r3, [r3, #4]
 800cfe8:	1949      	addeq	r1, r1, r5
 800cfea:	6021      	streq	r1, [r4, #0]
 800cfec:	e7ed      	b.n	800cfca <_free_r+0x22>
 800cfee:	461a      	mov	r2, r3
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	b10b      	cbz	r3, 800cff8 <_free_r+0x50>
 800cff4:	42a3      	cmp	r3, r4
 800cff6:	d9fa      	bls.n	800cfee <_free_r+0x46>
 800cff8:	6811      	ldr	r1, [r2, #0]
 800cffa:	1855      	adds	r5, r2, r1
 800cffc:	42a5      	cmp	r5, r4
 800cffe:	d10b      	bne.n	800d018 <_free_r+0x70>
 800d000:	6824      	ldr	r4, [r4, #0]
 800d002:	4421      	add	r1, r4
 800d004:	1854      	adds	r4, r2, r1
 800d006:	42a3      	cmp	r3, r4
 800d008:	6011      	str	r1, [r2, #0]
 800d00a:	d1e0      	bne.n	800cfce <_free_r+0x26>
 800d00c:	681c      	ldr	r4, [r3, #0]
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	6053      	str	r3, [r2, #4]
 800d012:	440c      	add	r4, r1
 800d014:	6014      	str	r4, [r2, #0]
 800d016:	e7da      	b.n	800cfce <_free_r+0x26>
 800d018:	d902      	bls.n	800d020 <_free_r+0x78>
 800d01a:	230c      	movs	r3, #12
 800d01c:	6003      	str	r3, [r0, #0]
 800d01e:	e7d6      	b.n	800cfce <_free_r+0x26>
 800d020:	6825      	ldr	r5, [r4, #0]
 800d022:	1961      	adds	r1, r4, r5
 800d024:	428b      	cmp	r3, r1
 800d026:	bf04      	itt	eq
 800d028:	6819      	ldreq	r1, [r3, #0]
 800d02a:	685b      	ldreq	r3, [r3, #4]
 800d02c:	6063      	str	r3, [r4, #4]
 800d02e:	bf04      	itt	eq
 800d030:	1949      	addeq	r1, r1, r5
 800d032:	6021      	streq	r1, [r4, #0]
 800d034:	6054      	str	r4, [r2, #4]
 800d036:	e7ca      	b.n	800cfce <_free_r+0x26>
 800d038:	b003      	add	sp, #12
 800d03a:	bd30      	pop	{r4, r5, pc}
 800d03c:	20006be8 	.word	0x20006be8

0800d040 <sbrk_aligned>:
 800d040:	b570      	push	{r4, r5, r6, lr}
 800d042:	4e0e      	ldr	r6, [pc, #56]	; (800d07c <sbrk_aligned+0x3c>)
 800d044:	460c      	mov	r4, r1
 800d046:	6831      	ldr	r1, [r6, #0]
 800d048:	4605      	mov	r5, r0
 800d04a:	b911      	cbnz	r1, 800d052 <sbrk_aligned+0x12>
 800d04c:	f000 fcaa 	bl	800d9a4 <_sbrk_r>
 800d050:	6030      	str	r0, [r6, #0]
 800d052:	4621      	mov	r1, r4
 800d054:	4628      	mov	r0, r5
 800d056:	f000 fca5 	bl	800d9a4 <_sbrk_r>
 800d05a:	1c43      	adds	r3, r0, #1
 800d05c:	d00a      	beq.n	800d074 <sbrk_aligned+0x34>
 800d05e:	1cc4      	adds	r4, r0, #3
 800d060:	f024 0403 	bic.w	r4, r4, #3
 800d064:	42a0      	cmp	r0, r4
 800d066:	d007      	beq.n	800d078 <sbrk_aligned+0x38>
 800d068:	1a21      	subs	r1, r4, r0
 800d06a:	4628      	mov	r0, r5
 800d06c:	f000 fc9a 	bl	800d9a4 <_sbrk_r>
 800d070:	3001      	adds	r0, #1
 800d072:	d101      	bne.n	800d078 <sbrk_aligned+0x38>
 800d074:	f04f 34ff 	mov.w	r4, #4294967295
 800d078:	4620      	mov	r0, r4
 800d07a:	bd70      	pop	{r4, r5, r6, pc}
 800d07c:	20006bec 	.word	0x20006bec

0800d080 <_malloc_r>:
 800d080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d084:	1ccd      	adds	r5, r1, #3
 800d086:	f025 0503 	bic.w	r5, r5, #3
 800d08a:	3508      	adds	r5, #8
 800d08c:	2d0c      	cmp	r5, #12
 800d08e:	bf38      	it	cc
 800d090:	250c      	movcc	r5, #12
 800d092:	2d00      	cmp	r5, #0
 800d094:	4607      	mov	r7, r0
 800d096:	db01      	blt.n	800d09c <_malloc_r+0x1c>
 800d098:	42a9      	cmp	r1, r5
 800d09a:	d905      	bls.n	800d0a8 <_malloc_r+0x28>
 800d09c:	230c      	movs	r3, #12
 800d09e:	603b      	str	r3, [r7, #0]
 800d0a0:	2600      	movs	r6, #0
 800d0a2:	4630      	mov	r0, r6
 800d0a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d17c <_malloc_r+0xfc>
 800d0ac:	f000 f868 	bl	800d180 <__malloc_lock>
 800d0b0:	f8d8 3000 	ldr.w	r3, [r8]
 800d0b4:	461c      	mov	r4, r3
 800d0b6:	bb5c      	cbnz	r4, 800d110 <_malloc_r+0x90>
 800d0b8:	4629      	mov	r1, r5
 800d0ba:	4638      	mov	r0, r7
 800d0bc:	f7ff ffc0 	bl	800d040 <sbrk_aligned>
 800d0c0:	1c43      	adds	r3, r0, #1
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	d155      	bne.n	800d172 <_malloc_r+0xf2>
 800d0c6:	f8d8 4000 	ldr.w	r4, [r8]
 800d0ca:	4626      	mov	r6, r4
 800d0cc:	2e00      	cmp	r6, #0
 800d0ce:	d145      	bne.n	800d15c <_malloc_r+0xdc>
 800d0d0:	2c00      	cmp	r4, #0
 800d0d2:	d048      	beq.n	800d166 <_malloc_r+0xe6>
 800d0d4:	6823      	ldr	r3, [r4, #0]
 800d0d6:	4631      	mov	r1, r6
 800d0d8:	4638      	mov	r0, r7
 800d0da:	eb04 0903 	add.w	r9, r4, r3
 800d0de:	f000 fc61 	bl	800d9a4 <_sbrk_r>
 800d0e2:	4581      	cmp	r9, r0
 800d0e4:	d13f      	bne.n	800d166 <_malloc_r+0xe6>
 800d0e6:	6821      	ldr	r1, [r4, #0]
 800d0e8:	1a6d      	subs	r5, r5, r1
 800d0ea:	4629      	mov	r1, r5
 800d0ec:	4638      	mov	r0, r7
 800d0ee:	f7ff ffa7 	bl	800d040 <sbrk_aligned>
 800d0f2:	3001      	adds	r0, #1
 800d0f4:	d037      	beq.n	800d166 <_malloc_r+0xe6>
 800d0f6:	6823      	ldr	r3, [r4, #0]
 800d0f8:	442b      	add	r3, r5
 800d0fa:	6023      	str	r3, [r4, #0]
 800d0fc:	f8d8 3000 	ldr.w	r3, [r8]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d038      	beq.n	800d176 <_malloc_r+0xf6>
 800d104:	685a      	ldr	r2, [r3, #4]
 800d106:	42a2      	cmp	r2, r4
 800d108:	d12b      	bne.n	800d162 <_malloc_r+0xe2>
 800d10a:	2200      	movs	r2, #0
 800d10c:	605a      	str	r2, [r3, #4]
 800d10e:	e00f      	b.n	800d130 <_malloc_r+0xb0>
 800d110:	6822      	ldr	r2, [r4, #0]
 800d112:	1b52      	subs	r2, r2, r5
 800d114:	d41f      	bmi.n	800d156 <_malloc_r+0xd6>
 800d116:	2a0b      	cmp	r2, #11
 800d118:	d917      	bls.n	800d14a <_malloc_r+0xca>
 800d11a:	1961      	adds	r1, r4, r5
 800d11c:	42a3      	cmp	r3, r4
 800d11e:	6025      	str	r5, [r4, #0]
 800d120:	bf18      	it	ne
 800d122:	6059      	strne	r1, [r3, #4]
 800d124:	6863      	ldr	r3, [r4, #4]
 800d126:	bf08      	it	eq
 800d128:	f8c8 1000 	streq.w	r1, [r8]
 800d12c:	5162      	str	r2, [r4, r5]
 800d12e:	604b      	str	r3, [r1, #4]
 800d130:	4638      	mov	r0, r7
 800d132:	f104 060b 	add.w	r6, r4, #11
 800d136:	f000 f829 	bl	800d18c <__malloc_unlock>
 800d13a:	f026 0607 	bic.w	r6, r6, #7
 800d13e:	1d23      	adds	r3, r4, #4
 800d140:	1af2      	subs	r2, r6, r3
 800d142:	d0ae      	beq.n	800d0a2 <_malloc_r+0x22>
 800d144:	1b9b      	subs	r3, r3, r6
 800d146:	50a3      	str	r3, [r4, r2]
 800d148:	e7ab      	b.n	800d0a2 <_malloc_r+0x22>
 800d14a:	42a3      	cmp	r3, r4
 800d14c:	6862      	ldr	r2, [r4, #4]
 800d14e:	d1dd      	bne.n	800d10c <_malloc_r+0x8c>
 800d150:	f8c8 2000 	str.w	r2, [r8]
 800d154:	e7ec      	b.n	800d130 <_malloc_r+0xb0>
 800d156:	4623      	mov	r3, r4
 800d158:	6864      	ldr	r4, [r4, #4]
 800d15a:	e7ac      	b.n	800d0b6 <_malloc_r+0x36>
 800d15c:	4634      	mov	r4, r6
 800d15e:	6876      	ldr	r6, [r6, #4]
 800d160:	e7b4      	b.n	800d0cc <_malloc_r+0x4c>
 800d162:	4613      	mov	r3, r2
 800d164:	e7cc      	b.n	800d100 <_malloc_r+0x80>
 800d166:	230c      	movs	r3, #12
 800d168:	603b      	str	r3, [r7, #0]
 800d16a:	4638      	mov	r0, r7
 800d16c:	f000 f80e 	bl	800d18c <__malloc_unlock>
 800d170:	e797      	b.n	800d0a2 <_malloc_r+0x22>
 800d172:	6025      	str	r5, [r4, #0]
 800d174:	e7dc      	b.n	800d130 <_malloc_r+0xb0>
 800d176:	605b      	str	r3, [r3, #4]
 800d178:	deff      	udf	#255	; 0xff
 800d17a:	bf00      	nop
 800d17c:	20006be8 	.word	0x20006be8

0800d180 <__malloc_lock>:
 800d180:	4801      	ldr	r0, [pc, #4]	; (800d188 <__malloc_lock+0x8>)
 800d182:	f7ff bf01 	b.w	800cf88 <__retarget_lock_acquire_recursive>
 800d186:	bf00      	nop
 800d188:	20006be4 	.word	0x20006be4

0800d18c <__malloc_unlock>:
 800d18c:	4801      	ldr	r0, [pc, #4]	; (800d194 <__malloc_unlock+0x8>)
 800d18e:	f7ff befc 	b.w	800cf8a <__retarget_lock_release_recursive>
 800d192:	bf00      	nop
 800d194:	20006be4 	.word	0x20006be4

0800d198 <__sfputc_r>:
 800d198:	6893      	ldr	r3, [r2, #8]
 800d19a:	3b01      	subs	r3, #1
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	b410      	push	{r4}
 800d1a0:	6093      	str	r3, [r2, #8]
 800d1a2:	da08      	bge.n	800d1b6 <__sfputc_r+0x1e>
 800d1a4:	6994      	ldr	r4, [r2, #24]
 800d1a6:	42a3      	cmp	r3, r4
 800d1a8:	db01      	blt.n	800d1ae <__sfputc_r+0x16>
 800d1aa:	290a      	cmp	r1, #10
 800d1ac:	d103      	bne.n	800d1b6 <__sfputc_r+0x1e>
 800d1ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1b2:	f7ff bd86 	b.w	800ccc2 <__swbuf_r>
 800d1b6:	6813      	ldr	r3, [r2, #0]
 800d1b8:	1c58      	adds	r0, r3, #1
 800d1ba:	6010      	str	r0, [r2, #0]
 800d1bc:	7019      	strb	r1, [r3, #0]
 800d1be:	4608      	mov	r0, r1
 800d1c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1c4:	4770      	bx	lr

0800d1c6 <__sfputs_r>:
 800d1c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1c8:	4606      	mov	r6, r0
 800d1ca:	460f      	mov	r7, r1
 800d1cc:	4614      	mov	r4, r2
 800d1ce:	18d5      	adds	r5, r2, r3
 800d1d0:	42ac      	cmp	r4, r5
 800d1d2:	d101      	bne.n	800d1d8 <__sfputs_r+0x12>
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	e007      	b.n	800d1e8 <__sfputs_r+0x22>
 800d1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1dc:	463a      	mov	r2, r7
 800d1de:	4630      	mov	r0, r6
 800d1e0:	f7ff ffda 	bl	800d198 <__sfputc_r>
 800d1e4:	1c43      	adds	r3, r0, #1
 800d1e6:	d1f3      	bne.n	800d1d0 <__sfputs_r+0xa>
 800d1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d1ec <_vfiprintf_r>:
 800d1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f0:	460d      	mov	r5, r1
 800d1f2:	b09d      	sub	sp, #116	; 0x74
 800d1f4:	4614      	mov	r4, r2
 800d1f6:	4698      	mov	r8, r3
 800d1f8:	4606      	mov	r6, r0
 800d1fa:	b118      	cbz	r0, 800d204 <_vfiprintf_r+0x18>
 800d1fc:	6a03      	ldr	r3, [r0, #32]
 800d1fe:	b90b      	cbnz	r3, 800d204 <_vfiprintf_r+0x18>
 800d200:	f7ff fc78 	bl	800caf4 <__sinit>
 800d204:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d206:	07d9      	lsls	r1, r3, #31
 800d208:	d405      	bmi.n	800d216 <_vfiprintf_r+0x2a>
 800d20a:	89ab      	ldrh	r3, [r5, #12]
 800d20c:	059a      	lsls	r2, r3, #22
 800d20e:	d402      	bmi.n	800d216 <_vfiprintf_r+0x2a>
 800d210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d212:	f7ff feb9 	bl	800cf88 <__retarget_lock_acquire_recursive>
 800d216:	89ab      	ldrh	r3, [r5, #12]
 800d218:	071b      	lsls	r3, r3, #28
 800d21a:	d501      	bpl.n	800d220 <_vfiprintf_r+0x34>
 800d21c:	692b      	ldr	r3, [r5, #16]
 800d21e:	b99b      	cbnz	r3, 800d248 <_vfiprintf_r+0x5c>
 800d220:	4629      	mov	r1, r5
 800d222:	4630      	mov	r0, r6
 800d224:	f7ff fd8a 	bl	800cd3c <__swsetup_r>
 800d228:	b170      	cbz	r0, 800d248 <_vfiprintf_r+0x5c>
 800d22a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d22c:	07dc      	lsls	r4, r3, #31
 800d22e:	d504      	bpl.n	800d23a <_vfiprintf_r+0x4e>
 800d230:	f04f 30ff 	mov.w	r0, #4294967295
 800d234:	b01d      	add	sp, #116	; 0x74
 800d236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23a:	89ab      	ldrh	r3, [r5, #12]
 800d23c:	0598      	lsls	r0, r3, #22
 800d23e:	d4f7      	bmi.n	800d230 <_vfiprintf_r+0x44>
 800d240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d242:	f7ff fea2 	bl	800cf8a <__retarget_lock_release_recursive>
 800d246:	e7f3      	b.n	800d230 <_vfiprintf_r+0x44>
 800d248:	2300      	movs	r3, #0
 800d24a:	9309      	str	r3, [sp, #36]	; 0x24
 800d24c:	2320      	movs	r3, #32
 800d24e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d252:	f8cd 800c 	str.w	r8, [sp, #12]
 800d256:	2330      	movs	r3, #48	; 0x30
 800d258:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d40c <_vfiprintf_r+0x220>
 800d25c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d260:	f04f 0901 	mov.w	r9, #1
 800d264:	4623      	mov	r3, r4
 800d266:	469a      	mov	sl, r3
 800d268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d26c:	b10a      	cbz	r2, 800d272 <_vfiprintf_r+0x86>
 800d26e:	2a25      	cmp	r2, #37	; 0x25
 800d270:	d1f9      	bne.n	800d266 <_vfiprintf_r+0x7a>
 800d272:	ebba 0b04 	subs.w	fp, sl, r4
 800d276:	d00b      	beq.n	800d290 <_vfiprintf_r+0xa4>
 800d278:	465b      	mov	r3, fp
 800d27a:	4622      	mov	r2, r4
 800d27c:	4629      	mov	r1, r5
 800d27e:	4630      	mov	r0, r6
 800d280:	f7ff ffa1 	bl	800d1c6 <__sfputs_r>
 800d284:	3001      	adds	r0, #1
 800d286:	f000 80a9 	beq.w	800d3dc <_vfiprintf_r+0x1f0>
 800d28a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d28c:	445a      	add	r2, fp
 800d28e:	9209      	str	r2, [sp, #36]	; 0x24
 800d290:	f89a 3000 	ldrb.w	r3, [sl]
 800d294:	2b00      	cmp	r3, #0
 800d296:	f000 80a1 	beq.w	800d3dc <_vfiprintf_r+0x1f0>
 800d29a:	2300      	movs	r3, #0
 800d29c:	f04f 32ff 	mov.w	r2, #4294967295
 800d2a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2a4:	f10a 0a01 	add.w	sl, sl, #1
 800d2a8:	9304      	str	r3, [sp, #16]
 800d2aa:	9307      	str	r3, [sp, #28]
 800d2ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2b0:	931a      	str	r3, [sp, #104]	; 0x68
 800d2b2:	4654      	mov	r4, sl
 800d2b4:	2205      	movs	r2, #5
 800d2b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2ba:	4854      	ldr	r0, [pc, #336]	; (800d40c <_vfiprintf_r+0x220>)
 800d2bc:	f7f2 ff90 	bl	80001e0 <memchr>
 800d2c0:	9a04      	ldr	r2, [sp, #16]
 800d2c2:	b9d8      	cbnz	r0, 800d2fc <_vfiprintf_r+0x110>
 800d2c4:	06d1      	lsls	r1, r2, #27
 800d2c6:	bf44      	itt	mi
 800d2c8:	2320      	movmi	r3, #32
 800d2ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2ce:	0713      	lsls	r3, r2, #28
 800d2d0:	bf44      	itt	mi
 800d2d2:	232b      	movmi	r3, #43	; 0x2b
 800d2d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2d8:	f89a 3000 	ldrb.w	r3, [sl]
 800d2dc:	2b2a      	cmp	r3, #42	; 0x2a
 800d2de:	d015      	beq.n	800d30c <_vfiprintf_r+0x120>
 800d2e0:	9a07      	ldr	r2, [sp, #28]
 800d2e2:	4654      	mov	r4, sl
 800d2e4:	2000      	movs	r0, #0
 800d2e6:	f04f 0c0a 	mov.w	ip, #10
 800d2ea:	4621      	mov	r1, r4
 800d2ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2f0:	3b30      	subs	r3, #48	; 0x30
 800d2f2:	2b09      	cmp	r3, #9
 800d2f4:	d94d      	bls.n	800d392 <_vfiprintf_r+0x1a6>
 800d2f6:	b1b0      	cbz	r0, 800d326 <_vfiprintf_r+0x13a>
 800d2f8:	9207      	str	r2, [sp, #28]
 800d2fa:	e014      	b.n	800d326 <_vfiprintf_r+0x13a>
 800d2fc:	eba0 0308 	sub.w	r3, r0, r8
 800d300:	fa09 f303 	lsl.w	r3, r9, r3
 800d304:	4313      	orrs	r3, r2
 800d306:	9304      	str	r3, [sp, #16]
 800d308:	46a2      	mov	sl, r4
 800d30a:	e7d2      	b.n	800d2b2 <_vfiprintf_r+0xc6>
 800d30c:	9b03      	ldr	r3, [sp, #12]
 800d30e:	1d19      	adds	r1, r3, #4
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	9103      	str	r1, [sp, #12]
 800d314:	2b00      	cmp	r3, #0
 800d316:	bfbb      	ittet	lt
 800d318:	425b      	neglt	r3, r3
 800d31a:	f042 0202 	orrlt.w	r2, r2, #2
 800d31e:	9307      	strge	r3, [sp, #28]
 800d320:	9307      	strlt	r3, [sp, #28]
 800d322:	bfb8      	it	lt
 800d324:	9204      	strlt	r2, [sp, #16]
 800d326:	7823      	ldrb	r3, [r4, #0]
 800d328:	2b2e      	cmp	r3, #46	; 0x2e
 800d32a:	d10c      	bne.n	800d346 <_vfiprintf_r+0x15a>
 800d32c:	7863      	ldrb	r3, [r4, #1]
 800d32e:	2b2a      	cmp	r3, #42	; 0x2a
 800d330:	d134      	bne.n	800d39c <_vfiprintf_r+0x1b0>
 800d332:	9b03      	ldr	r3, [sp, #12]
 800d334:	1d1a      	adds	r2, r3, #4
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	9203      	str	r2, [sp, #12]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	bfb8      	it	lt
 800d33e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d342:	3402      	adds	r4, #2
 800d344:	9305      	str	r3, [sp, #20]
 800d346:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d41c <_vfiprintf_r+0x230>
 800d34a:	7821      	ldrb	r1, [r4, #0]
 800d34c:	2203      	movs	r2, #3
 800d34e:	4650      	mov	r0, sl
 800d350:	f7f2 ff46 	bl	80001e0 <memchr>
 800d354:	b138      	cbz	r0, 800d366 <_vfiprintf_r+0x17a>
 800d356:	9b04      	ldr	r3, [sp, #16]
 800d358:	eba0 000a 	sub.w	r0, r0, sl
 800d35c:	2240      	movs	r2, #64	; 0x40
 800d35e:	4082      	lsls	r2, r0
 800d360:	4313      	orrs	r3, r2
 800d362:	3401      	adds	r4, #1
 800d364:	9304      	str	r3, [sp, #16]
 800d366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d36a:	4829      	ldr	r0, [pc, #164]	; (800d410 <_vfiprintf_r+0x224>)
 800d36c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d370:	2206      	movs	r2, #6
 800d372:	f7f2 ff35 	bl	80001e0 <memchr>
 800d376:	2800      	cmp	r0, #0
 800d378:	d03f      	beq.n	800d3fa <_vfiprintf_r+0x20e>
 800d37a:	4b26      	ldr	r3, [pc, #152]	; (800d414 <_vfiprintf_r+0x228>)
 800d37c:	bb1b      	cbnz	r3, 800d3c6 <_vfiprintf_r+0x1da>
 800d37e:	9b03      	ldr	r3, [sp, #12]
 800d380:	3307      	adds	r3, #7
 800d382:	f023 0307 	bic.w	r3, r3, #7
 800d386:	3308      	adds	r3, #8
 800d388:	9303      	str	r3, [sp, #12]
 800d38a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d38c:	443b      	add	r3, r7
 800d38e:	9309      	str	r3, [sp, #36]	; 0x24
 800d390:	e768      	b.n	800d264 <_vfiprintf_r+0x78>
 800d392:	fb0c 3202 	mla	r2, ip, r2, r3
 800d396:	460c      	mov	r4, r1
 800d398:	2001      	movs	r0, #1
 800d39a:	e7a6      	b.n	800d2ea <_vfiprintf_r+0xfe>
 800d39c:	2300      	movs	r3, #0
 800d39e:	3401      	adds	r4, #1
 800d3a0:	9305      	str	r3, [sp, #20]
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	f04f 0c0a 	mov.w	ip, #10
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3ae:	3a30      	subs	r2, #48	; 0x30
 800d3b0:	2a09      	cmp	r2, #9
 800d3b2:	d903      	bls.n	800d3bc <_vfiprintf_r+0x1d0>
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d0c6      	beq.n	800d346 <_vfiprintf_r+0x15a>
 800d3b8:	9105      	str	r1, [sp, #20]
 800d3ba:	e7c4      	b.n	800d346 <_vfiprintf_r+0x15a>
 800d3bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3c0:	4604      	mov	r4, r0
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	e7f0      	b.n	800d3a8 <_vfiprintf_r+0x1bc>
 800d3c6:	ab03      	add	r3, sp, #12
 800d3c8:	9300      	str	r3, [sp, #0]
 800d3ca:	462a      	mov	r2, r5
 800d3cc:	4b12      	ldr	r3, [pc, #72]	; (800d418 <_vfiprintf_r+0x22c>)
 800d3ce:	a904      	add	r1, sp, #16
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	f3af 8000 	nop.w
 800d3d6:	4607      	mov	r7, r0
 800d3d8:	1c78      	adds	r0, r7, #1
 800d3da:	d1d6      	bne.n	800d38a <_vfiprintf_r+0x19e>
 800d3dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3de:	07d9      	lsls	r1, r3, #31
 800d3e0:	d405      	bmi.n	800d3ee <_vfiprintf_r+0x202>
 800d3e2:	89ab      	ldrh	r3, [r5, #12]
 800d3e4:	059a      	lsls	r2, r3, #22
 800d3e6:	d402      	bmi.n	800d3ee <_vfiprintf_r+0x202>
 800d3e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3ea:	f7ff fdce 	bl	800cf8a <__retarget_lock_release_recursive>
 800d3ee:	89ab      	ldrh	r3, [r5, #12]
 800d3f0:	065b      	lsls	r3, r3, #25
 800d3f2:	f53f af1d 	bmi.w	800d230 <_vfiprintf_r+0x44>
 800d3f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3f8:	e71c      	b.n	800d234 <_vfiprintf_r+0x48>
 800d3fa:	ab03      	add	r3, sp, #12
 800d3fc:	9300      	str	r3, [sp, #0]
 800d3fe:	462a      	mov	r2, r5
 800d400:	4b05      	ldr	r3, [pc, #20]	; (800d418 <_vfiprintf_r+0x22c>)
 800d402:	a904      	add	r1, sp, #16
 800d404:	4630      	mov	r0, r6
 800d406:	f000 f879 	bl	800d4fc <_printf_i>
 800d40a:	e7e4      	b.n	800d3d6 <_vfiprintf_r+0x1ea>
 800d40c:	0800dd91 	.word	0x0800dd91
 800d410:	0800dd9b 	.word	0x0800dd9b
 800d414:	00000000 	.word	0x00000000
 800d418:	0800d1c7 	.word	0x0800d1c7
 800d41c:	0800dd97 	.word	0x0800dd97

0800d420 <_printf_common>:
 800d420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d424:	4616      	mov	r6, r2
 800d426:	4699      	mov	r9, r3
 800d428:	688a      	ldr	r2, [r1, #8]
 800d42a:	690b      	ldr	r3, [r1, #16]
 800d42c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d430:	4293      	cmp	r3, r2
 800d432:	bfb8      	it	lt
 800d434:	4613      	movlt	r3, r2
 800d436:	6033      	str	r3, [r6, #0]
 800d438:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d43c:	4607      	mov	r7, r0
 800d43e:	460c      	mov	r4, r1
 800d440:	b10a      	cbz	r2, 800d446 <_printf_common+0x26>
 800d442:	3301      	adds	r3, #1
 800d444:	6033      	str	r3, [r6, #0]
 800d446:	6823      	ldr	r3, [r4, #0]
 800d448:	0699      	lsls	r1, r3, #26
 800d44a:	bf42      	ittt	mi
 800d44c:	6833      	ldrmi	r3, [r6, #0]
 800d44e:	3302      	addmi	r3, #2
 800d450:	6033      	strmi	r3, [r6, #0]
 800d452:	6825      	ldr	r5, [r4, #0]
 800d454:	f015 0506 	ands.w	r5, r5, #6
 800d458:	d106      	bne.n	800d468 <_printf_common+0x48>
 800d45a:	f104 0a19 	add.w	sl, r4, #25
 800d45e:	68e3      	ldr	r3, [r4, #12]
 800d460:	6832      	ldr	r2, [r6, #0]
 800d462:	1a9b      	subs	r3, r3, r2
 800d464:	42ab      	cmp	r3, r5
 800d466:	dc26      	bgt.n	800d4b6 <_printf_common+0x96>
 800d468:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d46c:	1e13      	subs	r3, r2, #0
 800d46e:	6822      	ldr	r2, [r4, #0]
 800d470:	bf18      	it	ne
 800d472:	2301      	movne	r3, #1
 800d474:	0692      	lsls	r2, r2, #26
 800d476:	d42b      	bmi.n	800d4d0 <_printf_common+0xb0>
 800d478:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d47c:	4649      	mov	r1, r9
 800d47e:	4638      	mov	r0, r7
 800d480:	47c0      	blx	r8
 800d482:	3001      	adds	r0, #1
 800d484:	d01e      	beq.n	800d4c4 <_printf_common+0xa4>
 800d486:	6823      	ldr	r3, [r4, #0]
 800d488:	6922      	ldr	r2, [r4, #16]
 800d48a:	f003 0306 	and.w	r3, r3, #6
 800d48e:	2b04      	cmp	r3, #4
 800d490:	bf02      	ittt	eq
 800d492:	68e5      	ldreq	r5, [r4, #12]
 800d494:	6833      	ldreq	r3, [r6, #0]
 800d496:	1aed      	subeq	r5, r5, r3
 800d498:	68a3      	ldr	r3, [r4, #8]
 800d49a:	bf0c      	ite	eq
 800d49c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4a0:	2500      	movne	r5, #0
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	bfc4      	itt	gt
 800d4a6:	1a9b      	subgt	r3, r3, r2
 800d4a8:	18ed      	addgt	r5, r5, r3
 800d4aa:	2600      	movs	r6, #0
 800d4ac:	341a      	adds	r4, #26
 800d4ae:	42b5      	cmp	r5, r6
 800d4b0:	d11a      	bne.n	800d4e8 <_printf_common+0xc8>
 800d4b2:	2000      	movs	r0, #0
 800d4b4:	e008      	b.n	800d4c8 <_printf_common+0xa8>
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	4652      	mov	r2, sl
 800d4ba:	4649      	mov	r1, r9
 800d4bc:	4638      	mov	r0, r7
 800d4be:	47c0      	blx	r8
 800d4c0:	3001      	adds	r0, #1
 800d4c2:	d103      	bne.n	800d4cc <_printf_common+0xac>
 800d4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4cc:	3501      	adds	r5, #1
 800d4ce:	e7c6      	b.n	800d45e <_printf_common+0x3e>
 800d4d0:	18e1      	adds	r1, r4, r3
 800d4d2:	1c5a      	adds	r2, r3, #1
 800d4d4:	2030      	movs	r0, #48	; 0x30
 800d4d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d4da:	4422      	add	r2, r4
 800d4dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d4e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d4e4:	3302      	adds	r3, #2
 800d4e6:	e7c7      	b.n	800d478 <_printf_common+0x58>
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	4622      	mov	r2, r4
 800d4ec:	4649      	mov	r1, r9
 800d4ee:	4638      	mov	r0, r7
 800d4f0:	47c0      	blx	r8
 800d4f2:	3001      	adds	r0, #1
 800d4f4:	d0e6      	beq.n	800d4c4 <_printf_common+0xa4>
 800d4f6:	3601      	adds	r6, #1
 800d4f8:	e7d9      	b.n	800d4ae <_printf_common+0x8e>
	...

0800d4fc <_printf_i>:
 800d4fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d500:	7e0f      	ldrb	r7, [r1, #24]
 800d502:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d504:	2f78      	cmp	r7, #120	; 0x78
 800d506:	4691      	mov	r9, r2
 800d508:	4680      	mov	r8, r0
 800d50a:	460c      	mov	r4, r1
 800d50c:	469a      	mov	sl, r3
 800d50e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d512:	d807      	bhi.n	800d524 <_printf_i+0x28>
 800d514:	2f62      	cmp	r7, #98	; 0x62
 800d516:	d80a      	bhi.n	800d52e <_printf_i+0x32>
 800d518:	2f00      	cmp	r7, #0
 800d51a:	f000 80d4 	beq.w	800d6c6 <_printf_i+0x1ca>
 800d51e:	2f58      	cmp	r7, #88	; 0x58
 800d520:	f000 80c0 	beq.w	800d6a4 <_printf_i+0x1a8>
 800d524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d528:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d52c:	e03a      	b.n	800d5a4 <_printf_i+0xa8>
 800d52e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d532:	2b15      	cmp	r3, #21
 800d534:	d8f6      	bhi.n	800d524 <_printf_i+0x28>
 800d536:	a101      	add	r1, pc, #4	; (adr r1, 800d53c <_printf_i+0x40>)
 800d538:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d53c:	0800d595 	.word	0x0800d595
 800d540:	0800d5a9 	.word	0x0800d5a9
 800d544:	0800d525 	.word	0x0800d525
 800d548:	0800d525 	.word	0x0800d525
 800d54c:	0800d525 	.word	0x0800d525
 800d550:	0800d525 	.word	0x0800d525
 800d554:	0800d5a9 	.word	0x0800d5a9
 800d558:	0800d525 	.word	0x0800d525
 800d55c:	0800d525 	.word	0x0800d525
 800d560:	0800d525 	.word	0x0800d525
 800d564:	0800d525 	.word	0x0800d525
 800d568:	0800d6ad 	.word	0x0800d6ad
 800d56c:	0800d5d5 	.word	0x0800d5d5
 800d570:	0800d667 	.word	0x0800d667
 800d574:	0800d525 	.word	0x0800d525
 800d578:	0800d525 	.word	0x0800d525
 800d57c:	0800d6cf 	.word	0x0800d6cf
 800d580:	0800d525 	.word	0x0800d525
 800d584:	0800d5d5 	.word	0x0800d5d5
 800d588:	0800d525 	.word	0x0800d525
 800d58c:	0800d525 	.word	0x0800d525
 800d590:	0800d66f 	.word	0x0800d66f
 800d594:	682b      	ldr	r3, [r5, #0]
 800d596:	1d1a      	adds	r2, r3, #4
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	602a      	str	r2, [r5, #0]
 800d59c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	e09f      	b.n	800d6e8 <_printf_i+0x1ec>
 800d5a8:	6820      	ldr	r0, [r4, #0]
 800d5aa:	682b      	ldr	r3, [r5, #0]
 800d5ac:	0607      	lsls	r7, r0, #24
 800d5ae:	f103 0104 	add.w	r1, r3, #4
 800d5b2:	6029      	str	r1, [r5, #0]
 800d5b4:	d501      	bpl.n	800d5ba <_printf_i+0xbe>
 800d5b6:	681e      	ldr	r6, [r3, #0]
 800d5b8:	e003      	b.n	800d5c2 <_printf_i+0xc6>
 800d5ba:	0646      	lsls	r6, r0, #25
 800d5bc:	d5fb      	bpl.n	800d5b6 <_printf_i+0xba>
 800d5be:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d5c2:	2e00      	cmp	r6, #0
 800d5c4:	da03      	bge.n	800d5ce <_printf_i+0xd2>
 800d5c6:	232d      	movs	r3, #45	; 0x2d
 800d5c8:	4276      	negs	r6, r6
 800d5ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5ce:	485a      	ldr	r0, [pc, #360]	; (800d738 <_printf_i+0x23c>)
 800d5d0:	230a      	movs	r3, #10
 800d5d2:	e012      	b.n	800d5fa <_printf_i+0xfe>
 800d5d4:	682b      	ldr	r3, [r5, #0]
 800d5d6:	6820      	ldr	r0, [r4, #0]
 800d5d8:	1d19      	adds	r1, r3, #4
 800d5da:	6029      	str	r1, [r5, #0]
 800d5dc:	0605      	lsls	r5, r0, #24
 800d5de:	d501      	bpl.n	800d5e4 <_printf_i+0xe8>
 800d5e0:	681e      	ldr	r6, [r3, #0]
 800d5e2:	e002      	b.n	800d5ea <_printf_i+0xee>
 800d5e4:	0641      	lsls	r1, r0, #25
 800d5e6:	d5fb      	bpl.n	800d5e0 <_printf_i+0xe4>
 800d5e8:	881e      	ldrh	r6, [r3, #0]
 800d5ea:	4853      	ldr	r0, [pc, #332]	; (800d738 <_printf_i+0x23c>)
 800d5ec:	2f6f      	cmp	r7, #111	; 0x6f
 800d5ee:	bf0c      	ite	eq
 800d5f0:	2308      	moveq	r3, #8
 800d5f2:	230a      	movne	r3, #10
 800d5f4:	2100      	movs	r1, #0
 800d5f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d5fa:	6865      	ldr	r5, [r4, #4]
 800d5fc:	60a5      	str	r5, [r4, #8]
 800d5fe:	2d00      	cmp	r5, #0
 800d600:	bfa2      	ittt	ge
 800d602:	6821      	ldrge	r1, [r4, #0]
 800d604:	f021 0104 	bicge.w	r1, r1, #4
 800d608:	6021      	strge	r1, [r4, #0]
 800d60a:	b90e      	cbnz	r6, 800d610 <_printf_i+0x114>
 800d60c:	2d00      	cmp	r5, #0
 800d60e:	d04b      	beq.n	800d6a8 <_printf_i+0x1ac>
 800d610:	4615      	mov	r5, r2
 800d612:	fbb6 f1f3 	udiv	r1, r6, r3
 800d616:	fb03 6711 	mls	r7, r3, r1, r6
 800d61a:	5dc7      	ldrb	r7, [r0, r7]
 800d61c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d620:	4637      	mov	r7, r6
 800d622:	42bb      	cmp	r3, r7
 800d624:	460e      	mov	r6, r1
 800d626:	d9f4      	bls.n	800d612 <_printf_i+0x116>
 800d628:	2b08      	cmp	r3, #8
 800d62a:	d10b      	bne.n	800d644 <_printf_i+0x148>
 800d62c:	6823      	ldr	r3, [r4, #0]
 800d62e:	07de      	lsls	r6, r3, #31
 800d630:	d508      	bpl.n	800d644 <_printf_i+0x148>
 800d632:	6923      	ldr	r3, [r4, #16]
 800d634:	6861      	ldr	r1, [r4, #4]
 800d636:	4299      	cmp	r1, r3
 800d638:	bfde      	ittt	le
 800d63a:	2330      	movle	r3, #48	; 0x30
 800d63c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d640:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d644:	1b52      	subs	r2, r2, r5
 800d646:	6122      	str	r2, [r4, #16]
 800d648:	f8cd a000 	str.w	sl, [sp]
 800d64c:	464b      	mov	r3, r9
 800d64e:	aa03      	add	r2, sp, #12
 800d650:	4621      	mov	r1, r4
 800d652:	4640      	mov	r0, r8
 800d654:	f7ff fee4 	bl	800d420 <_printf_common>
 800d658:	3001      	adds	r0, #1
 800d65a:	d14a      	bne.n	800d6f2 <_printf_i+0x1f6>
 800d65c:	f04f 30ff 	mov.w	r0, #4294967295
 800d660:	b004      	add	sp, #16
 800d662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d666:	6823      	ldr	r3, [r4, #0]
 800d668:	f043 0320 	orr.w	r3, r3, #32
 800d66c:	6023      	str	r3, [r4, #0]
 800d66e:	4833      	ldr	r0, [pc, #204]	; (800d73c <_printf_i+0x240>)
 800d670:	2778      	movs	r7, #120	; 0x78
 800d672:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d676:	6823      	ldr	r3, [r4, #0]
 800d678:	6829      	ldr	r1, [r5, #0]
 800d67a:	061f      	lsls	r7, r3, #24
 800d67c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d680:	d402      	bmi.n	800d688 <_printf_i+0x18c>
 800d682:	065f      	lsls	r7, r3, #25
 800d684:	bf48      	it	mi
 800d686:	b2b6      	uxthmi	r6, r6
 800d688:	07df      	lsls	r7, r3, #31
 800d68a:	bf48      	it	mi
 800d68c:	f043 0320 	orrmi.w	r3, r3, #32
 800d690:	6029      	str	r1, [r5, #0]
 800d692:	bf48      	it	mi
 800d694:	6023      	strmi	r3, [r4, #0]
 800d696:	b91e      	cbnz	r6, 800d6a0 <_printf_i+0x1a4>
 800d698:	6823      	ldr	r3, [r4, #0]
 800d69a:	f023 0320 	bic.w	r3, r3, #32
 800d69e:	6023      	str	r3, [r4, #0]
 800d6a0:	2310      	movs	r3, #16
 800d6a2:	e7a7      	b.n	800d5f4 <_printf_i+0xf8>
 800d6a4:	4824      	ldr	r0, [pc, #144]	; (800d738 <_printf_i+0x23c>)
 800d6a6:	e7e4      	b.n	800d672 <_printf_i+0x176>
 800d6a8:	4615      	mov	r5, r2
 800d6aa:	e7bd      	b.n	800d628 <_printf_i+0x12c>
 800d6ac:	682b      	ldr	r3, [r5, #0]
 800d6ae:	6826      	ldr	r6, [r4, #0]
 800d6b0:	6961      	ldr	r1, [r4, #20]
 800d6b2:	1d18      	adds	r0, r3, #4
 800d6b4:	6028      	str	r0, [r5, #0]
 800d6b6:	0635      	lsls	r5, r6, #24
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	d501      	bpl.n	800d6c0 <_printf_i+0x1c4>
 800d6bc:	6019      	str	r1, [r3, #0]
 800d6be:	e002      	b.n	800d6c6 <_printf_i+0x1ca>
 800d6c0:	0670      	lsls	r0, r6, #25
 800d6c2:	d5fb      	bpl.n	800d6bc <_printf_i+0x1c0>
 800d6c4:	8019      	strh	r1, [r3, #0]
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	6123      	str	r3, [r4, #16]
 800d6ca:	4615      	mov	r5, r2
 800d6cc:	e7bc      	b.n	800d648 <_printf_i+0x14c>
 800d6ce:	682b      	ldr	r3, [r5, #0]
 800d6d0:	1d1a      	adds	r2, r3, #4
 800d6d2:	602a      	str	r2, [r5, #0]
 800d6d4:	681d      	ldr	r5, [r3, #0]
 800d6d6:	6862      	ldr	r2, [r4, #4]
 800d6d8:	2100      	movs	r1, #0
 800d6da:	4628      	mov	r0, r5
 800d6dc:	f7f2 fd80 	bl	80001e0 <memchr>
 800d6e0:	b108      	cbz	r0, 800d6e6 <_printf_i+0x1ea>
 800d6e2:	1b40      	subs	r0, r0, r5
 800d6e4:	6060      	str	r0, [r4, #4]
 800d6e6:	6863      	ldr	r3, [r4, #4]
 800d6e8:	6123      	str	r3, [r4, #16]
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6f0:	e7aa      	b.n	800d648 <_printf_i+0x14c>
 800d6f2:	6923      	ldr	r3, [r4, #16]
 800d6f4:	462a      	mov	r2, r5
 800d6f6:	4649      	mov	r1, r9
 800d6f8:	4640      	mov	r0, r8
 800d6fa:	47d0      	blx	sl
 800d6fc:	3001      	adds	r0, #1
 800d6fe:	d0ad      	beq.n	800d65c <_printf_i+0x160>
 800d700:	6823      	ldr	r3, [r4, #0]
 800d702:	079b      	lsls	r3, r3, #30
 800d704:	d413      	bmi.n	800d72e <_printf_i+0x232>
 800d706:	68e0      	ldr	r0, [r4, #12]
 800d708:	9b03      	ldr	r3, [sp, #12]
 800d70a:	4298      	cmp	r0, r3
 800d70c:	bfb8      	it	lt
 800d70e:	4618      	movlt	r0, r3
 800d710:	e7a6      	b.n	800d660 <_printf_i+0x164>
 800d712:	2301      	movs	r3, #1
 800d714:	4632      	mov	r2, r6
 800d716:	4649      	mov	r1, r9
 800d718:	4640      	mov	r0, r8
 800d71a:	47d0      	blx	sl
 800d71c:	3001      	adds	r0, #1
 800d71e:	d09d      	beq.n	800d65c <_printf_i+0x160>
 800d720:	3501      	adds	r5, #1
 800d722:	68e3      	ldr	r3, [r4, #12]
 800d724:	9903      	ldr	r1, [sp, #12]
 800d726:	1a5b      	subs	r3, r3, r1
 800d728:	42ab      	cmp	r3, r5
 800d72a:	dcf2      	bgt.n	800d712 <_printf_i+0x216>
 800d72c:	e7eb      	b.n	800d706 <_printf_i+0x20a>
 800d72e:	2500      	movs	r5, #0
 800d730:	f104 0619 	add.w	r6, r4, #25
 800d734:	e7f5      	b.n	800d722 <_printf_i+0x226>
 800d736:	bf00      	nop
 800d738:	0800dda2 	.word	0x0800dda2
 800d73c:	0800ddb3 	.word	0x0800ddb3

0800d740 <__sflush_r>:
 800d740:	898a      	ldrh	r2, [r1, #12]
 800d742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d746:	4605      	mov	r5, r0
 800d748:	0710      	lsls	r0, r2, #28
 800d74a:	460c      	mov	r4, r1
 800d74c:	d458      	bmi.n	800d800 <__sflush_r+0xc0>
 800d74e:	684b      	ldr	r3, [r1, #4]
 800d750:	2b00      	cmp	r3, #0
 800d752:	dc05      	bgt.n	800d760 <__sflush_r+0x20>
 800d754:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d756:	2b00      	cmp	r3, #0
 800d758:	dc02      	bgt.n	800d760 <__sflush_r+0x20>
 800d75a:	2000      	movs	r0, #0
 800d75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d760:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d762:	2e00      	cmp	r6, #0
 800d764:	d0f9      	beq.n	800d75a <__sflush_r+0x1a>
 800d766:	2300      	movs	r3, #0
 800d768:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d76c:	682f      	ldr	r7, [r5, #0]
 800d76e:	6a21      	ldr	r1, [r4, #32]
 800d770:	602b      	str	r3, [r5, #0]
 800d772:	d032      	beq.n	800d7da <__sflush_r+0x9a>
 800d774:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d776:	89a3      	ldrh	r3, [r4, #12]
 800d778:	075a      	lsls	r2, r3, #29
 800d77a:	d505      	bpl.n	800d788 <__sflush_r+0x48>
 800d77c:	6863      	ldr	r3, [r4, #4]
 800d77e:	1ac0      	subs	r0, r0, r3
 800d780:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d782:	b10b      	cbz	r3, 800d788 <__sflush_r+0x48>
 800d784:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d786:	1ac0      	subs	r0, r0, r3
 800d788:	2300      	movs	r3, #0
 800d78a:	4602      	mov	r2, r0
 800d78c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d78e:	6a21      	ldr	r1, [r4, #32]
 800d790:	4628      	mov	r0, r5
 800d792:	47b0      	blx	r6
 800d794:	1c43      	adds	r3, r0, #1
 800d796:	89a3      	ldrh	r3, [r4, #12]
 800d798:	d106      	bne.n	800d7a8 <__sflush_r+0x68>
 800d79a:	6829      	ldr	r1, [r5, #0]
 800d79c:	291d      	cmp	r1, #29
 800d79e:	d82b      	bhi.n	800d7f8 <__sflush_r+0xb8>
 800d7a0:	4a29      	ldr	r2, [pc, #164]	; (800d848 <__sflush_r+0x108>)
 800d7a2:	410a      	asrs	r2, r1
 800d7a4:	07d6      	lsls	r6, r2, #31
 800d7a6:	d427      	bmi.n	800d7f8 <__sflush_r+0xb8>
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	6062      	str	r2, [r4, #4]
 800d7ac:	04d9      	lsls	r1, r3, #19
 800d7ae:	6922      	ldr	r2, [r4, #16]
 800d7b0:	6022      	str	r2, [r4, #0]
 800d7b2:	d504      	bpl.n	800d7be <__sflush_r+0x7e>
 800d7b4:	1c42      	adds	r2, r0, #1
 800d7b6:	d101      	bne.n	800d7bc <__sflush_r+0x7c>
 800d7b8:	682b      	ldr	r3, [r5, #0]
 800d7ba:	b903      	cbnz	r3, 800d7be <__sflush_r+0x7e>
 800d7bc:	6560      	str	r0, [r4, #84]	; 0x54
 800d7be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7c0:	602f      	str	r7, [r5, #0]
 800d7c2:	2900      	cmp	r1, #0
 800d7c4:	d0c9      	beq.n	800d75a <__sflush_r+0x1a>
 800d7c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7ca:	4299      	cmp	r1, r3
 800d7cc:	d002      	beq.n	800d7d4 <__sflush_r+0x94>
 800d7ce:	4628      	mov	r0, r5
 800d7d0:	f7ff fbea 	bl	800cfa8 <_free_r>
 800d7d4:	2000      	movs	r0, #0
 800d7d6:	6360      	str	r0, [r4, #52]	; 0x34
 800d7d8:	e7c0      	b.n	800d75c <__sflush_r+0x1c>
 800d7da:	2301      	movs	r3, #1
 800d7dc:	4628      	mov	r0, r5
 800d7de:	47b0      	blx	r6
 800d7e0:	1c41      	adds	r1, r0, #1
 800d7e2:	d1c8      	bne.n	800d776 <__sflush_r+0x36>
 800d7e4:	682b      	ldr	r3, [r5, #0]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d0c5      	beq.n	800d776 <__sflush_r+0x36>
 800d7ea:	2b1d      	cmp	r3, #29
 800d7ec:	d001      	beq.n	800d7f2 <__sflush_r+0xb2>
 800d7ee:	2b16      	cmp	r3, #22
 800d7f0:	d101      	bne.n	800d7f6 <__sflush_r+0xb6>
 800d7f2:	602f      	str	r7, [r5, #0]
 800d7f4:	e7b1      	b.n	800d75a <__sflush_r+0x1a>
 800d7f6:	89a3      	ldrh	r3, [r4, #12]
 800d7f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7fc:	81a3      	strh	r3, [r4, #12]
 800d7fe:	e7ad      	b.n	800d75c <__sflush_r+0x1c>
 800d800:	690f      	ldr	r7, [r1, #16]
 800d802:	2f00      	cmp	r7, #0
 800d804:	d0a9      	beq.n	800d75a <__sflush_r+0x1a>
 800d806:	0793      	lsls	r3, r2, #30
 800d808:	680e      	ldr	r6, [r1, #0]
 800d80a:	bf08      	it	eq
 800d80c:	694b      	ldreq	r3, [r1, #20]
 800d80e:	600f      	str	r7, [r1, #0]
 800d810:	bf18      	it	ne
 800d812:	2300      	movne	r3, #0
 800d814:	eba6 0807 	sub.w	r8, r6, r7
 800d818:	608b      	str	r3, [r1, #8]
 800d81a:	f1b8 0f00 	cmp.w	r8, #0
 800d81e:	dd9c      	ble.n	800d75a <__sflush_r+0x1a>
 800d820:	6a21      	ldr	r1, [r4, #32]
 800d822:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d824:	4643      	mov	r3, r8
 800d826:	463a      	mov	r2, r7
 800d828:	4628      	mov	r0, r5
 800d82a:	47b0      	blx	r6
 800d82c:	2800      	cmp	r0, #0
 800d82e:	dc06      	bgt.n	800d83e <__sflush_r+0xfe>
 800d830:	89a3      	ldrh	r3, [r4, #12]
 800d832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d836:	81a3      	strh	r3, [r4, #12]
 800d838:	f04f 30ff 	mov.w	r0, #4294967295
 800d83c:	e78e      	b.n	800d75c <__sflush_r+0x1c>
 800d83e:	4407      	add	r7, r0
 800d840:	eba8 0800 	sub.w	r8, r8, r0
 800d844:	e7e9      	b.n	800d81a <__sflush_r+0xda>
 800d846:	bf00      	nop
 800d848:	dfbffffe 	.word	0xdfbffffe

0800d84c <_fflush_r>:
 800d84c:	b538      	push	{r3, r4, r5, lr}
 800d84e:	690b      	ldr	r3, [r1, #16]
 800d850:	4605      	mov	r5, r0
 800d852:	460c      	mov	r4, r1
 800d854:	b913      	cbnz	r3, 800d85c <_fflush_r+0x10>
 800d856:	2500      	movs	r5, #0
 800d858:	4628      	mov	r0, r5
 800d85a:	bd38      	pop	{r3, r4, r5, pc}
 800d85c:	b118      	cbz	r0, 800d866 <_fflush_r+0x1a>
 800d85e:	6a03      	ldr	r3, [r0, #32]
 800d860:	b90b      	cbnz	r3, 800d866 <_fflush_r+0x1a>
 800d862:	f7ff f947 	bl	800caf4 <__sinit>
 800d866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d0f3      	beq.n	800d856 <_fflush_r+0xa>
 800d86e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d870:	07d0      	lsls	r0, r2, #31
 800d872:	d404      	bmi.n	800d87e <_fflush_r+0x32>
 800d874:	0599      	lsls	r1, r3, #22
 800d876:	d402      	bmi.n	800d87e <_fflush_r+0x32>
 800d878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d87a:	f7ff fb85 	bl	800cf88 <__retarget_lock_acquire_recursive>
 800d87e:	4628      	mov	r0, r5
 800d880:	4621      	mov	r1, r4
 800d882:	f7ff ff5d 	bl	800d740 <__sflush_r>
 800d886:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d888:	07da      	lsls	r2, r3, #31
 800d88a:	4605      	mov	r5, r0
 800d88c:	d4e4      	bmi.n	800d858 <_fflush_r+0xc>
 800d88e:	89a3      	ldrh	r3, [r4, #12]
 800d890:	059b      	lsls	r3, r3, #22
 800d892:	d4e1      	bmi.n	800d858 <_fflush_r+0xc>
 800d894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d896:	f7ff fb78 	bl	800cf8a <__retarget_lock_release_recursive>
 800d89a:	e7dd      	b.n	800d858 <_fflush_r+0xc>

0800d89c <__swhatbuf_r>:
 800d89c:	b570      	push	{r4, r5, r6, lr}
 800d89e:	460c      	mov	r4, r1
 800d8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8a4:	2900      	cmp	r1, #0
 800d8a6:	b096      	sub	sp, #88	; 0x58
 800d8a8:	4615      	mov	r5, r2
 800d8aa:	461e      	mov	r6, r3
 800d8ac:	da0d      	bge.n	800d8ca <__swhatbuf_r+0x2e>
 800d8ae:	89a3      	ldrh	r3, [r4, #12]
 800d8b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d8b4:	f04f 0100 	mov.w	r1, #0
 800d8b8:	bf0c      	ite	eq
 800d8ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d8be:	2340      	movne	r3, #64	; 0x40
 800d8c0:	2000      	movs	r0, #0
 800d8c2:	6031      	str	r1, [r6, #0]
 800d8c4:	602b      	str	r3, [r5, #0]
 800d8c6:	b016      	add	sp, #88	; 0x58
 800d8c8:	bd70      	pop	{r4, r5, r6, pc}
 800d8ca:	466a      	mov	r2, sp
 800d8cc:	f000 f848 	bl	800d960 <_fstat_r>
 800d8d0:	2800      	cmp	r0, #0
 800d8d2:	dbec      	blt.n	800d8ae <__swhatbuf_r+0x12>
 800d8d4:	9901      	ldr	r1, [sp, #4]
 800d8d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d8da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d8de:	4259      	negs	r1, r3
 800d8e0:	4159      	adcs	r1, r3
 800d8e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8e6:	e7eb      	b.n	800d8c0 <__swhatbuf_r+0x24>

0800d8e8 <__smakebuf_r>:
 800d8e8:	898b      	ldrh	r3, [r1, #12]
 800d8ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d8ec:	079d      	lsls	r5, r3, #30
 800d8ee:	4606      	mov	r6, r0
 800d8f0:	460c      	mov	r4, r1
 800d8f2:	d507      	bpl.n	800d904 <__smakebuf_r+0x1c>
 800d8f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d8f8:	6023      	str	r3, [r4, #0]
 800d8fa:	6123      	str	r3, [r4, #16]
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	6163      	str	r3, [r4, #20]
 800d900:	b002      	add	sp, #8
 800d902:	bd70      	pop	{r4, r5, r6, pc}
 800d904:	ab01      	add	r3, sp, #4
 800d906:	466a      	mov	r2, sp
 800d908:	f7ff ffc8 	bl	800d89c <__swhatbuf_r>
 800d90c:	9900      	ldr	r1, [sp, #0]
 800d90e:	4605      	mov	r5, r0
 800d910:	4630      	mov	r0, r6
 800d912:	f7ff fbb5 	bl	800d080 <_malloc_r>
 800d916:	b948      	cbnz	r0, 800d92c <__smakebuf_r+0x44>
 800d918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d91c:	059a      	lsls	r2, r3, #22
 800d91e:	d4ef      	bmi.n	800d900 <__smakebuf_r+0x18>
 800d920:	f023 0303 	bic.w	r3, r3, #3
 800d924:	f043 0302 	orr.w	r3, r3, #2
 800d928:	81a3      	strh	r3, [r4, #12]
 800d92a:	e7e3      	b.n	800d8f4 <__smakebuf_r+0xc>
 800d92c:	89a3      	ldrh	r3, [r4, #12]
 800d92e:	6020      	str	r0, [r4, #0]
 800d930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d934:	81a3      	strh	r3, [r4, #12]
 800d936:	9b00      	ldr	r3, [sp, #0]
 800d938:	6163      	str	r3, [r4, #20]
 800d93a:	9b01      	ldr	r3, [sp, #4]
 800d93c:	6120      	str	r0, [r4, #16]
 800d93e:	b15b      	cbz	r3, 800d958 <__smakebuf_r+0x70>
 800d940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d944:	4630      	mov	r0, r6
 800d946:	f000 f81d 	bl	800d984 <_isatty_r>
 800d94a:	b128      	cbz	r0, 800d958 <__smakebuf_r+0x70>
 800d94c:	89a3      	ldrh	r3, [r4, #12]
 800d94e:	f023 0303 	bic.w	r3, r3, #3
 800d952:	f043 0301 	orr.w	r3, r3, #1
 800d956:	81a3      	strh	r3, [r4, #12]
 800d958:	89a3      	ldrh	r3, [r4, #12]
 800d95a:	431d      	orrs	r5, r3
 800d95c:	81a5      	strh	r5, [r4, #12]
 800d95e:	e7cf      	b.n	800d900 <__smakebuf_r+0x18>

0800d960 <_fstat_r>:
 800d960:	b538      	push	{r3, r4, r5, lr}
 800d962:	4d07      	ldr	r5, [pc, #28]	; (800d980 <_fstat_r+0x20>)
 800d964:	2300      	movs	r3, #0
 800d966:	4604      	mov	r4, r0
 800d968:	4608      	mov	r0, r1
 800d96a:	4611      	mov	r1, r2
 800d96c:	602b      	str	r3, [r5, #0]
 800d96e:	f7f3 f9b6 	bl	8000cde <_fstat>
 800d972:	1c43      	adds	r3, r0, #1
 800d974:	d102      	bne.n	800d97c <_fstat_r+0x1c>
 800d976:	682b      	ldr	r3, [r5, #0]
 800d978:	b103      	cbz	r3, 800d97c <_fstat_r+0x1c>
 800d97a:	6023      	str	r3, [r4, #0]
 800d97c:	bd38      	pop	{r3, r4, r5, pc}
 800d97e:	bf00      	nop
 800d980:	20006be0 	.word	0x20006be0

0800d984 <_isatty_r>:
 800d984:	b538      	push	{r3, r4, r5, lr}
 800d986:	4d06      	ldr	r5, [pc, #24]	; (800d9a0 <_isatty_r+0x1c>)
 800d988:	2300      	movs	r3, #0
 800d98a:	4604      	mov	r4, r0
 800d98c:	4608      	mov	r0, r1
 800d98e:	602b      	str	r3, [r5, #0]
 800d990:	f7f3 f9b5 	bl	8000cfe <_isatty>
 800d994:	1c43      	adds	r3, r0, #1
 800d996:	d102      	bne.n	800d99e <_isatty_r+0x1a>
 800d998:	682b      	ldr	r3, [r5, #0]
 800d99a:	b103      	cbz	r3, 800d99e <_isatty_r+0x1a>
 800d99c:	6023      	str	r3, [r4, #0]
 800d99e:	bd38      	pop	{r3, r4, r5, pc}
 800d9a0:	20006be0 	.word	0x20006be0

0800d9a4 <_sbrk_r>:
 800d9a4:	b538      	push	{r3, r4, r5, lr}
 800d9a6:	4d06      	ldr	r5, [pc, #24]	; (800d9c0 <_sbrk_r+0x1c>)
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	4604      	mov	r4, r0
 800d9ac:	4608      	mov	r0, r1
 800d9ae:	602b      	str	r3, [r5, #0]
 800d9b0:	f7f3 f9be 	bl	8000d30 <_sbrk>
 800d9b4:	1c43      	adds	r3, r0, #1
 800d9b6:	d102      	bne.n	800d9be <_sbrk_r+0x1a>
 800d9b8:	682b      	ldr	r3, [r5, #0]
 800d9ba:	b103      	cbz	r3, 800d9be <_sbrk_r+0x1a>
 800d9bc:	6023      	str	r3, [r4, #0]
 800d9be:	bd38      	pop	{r3, r4, r5, pc}
 800d9c0:	20006be0 	.word	0x20006be0

0800d9c4 <_init>:
 800d9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9c6:	bf00      	nop
 800d9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9ca:	bc08      	pop	{r3}
 800d9cc:	469e      	mov	lr, r3
 800d9ce:	4770      	bx	lr

0800d9d0 <_fini>:
 800d9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d2:	bf00      	nop
 800d9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9d6:	bc08      	pop	{r3}
 800d9d8:	469e      	mov	lr, r3
 800d9da:	4770      	bx	lr
